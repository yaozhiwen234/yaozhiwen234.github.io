<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AKF服务拆分原则</title>
    <url>/2021/04/18/AKF%E6%9C%8D%E5%8A%A1%E6%8B%86%E5%88%86%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h1 id="AKF服务拆分原则"><a href="#AKF服务拆分原则" class="headerlink" title="AKF服务拆分原则"></a>AKF服务拆分原则</h1><p>在设计微服务的时候，我们一般会遵循以下4个原则：</p>
<p>1）AKF拆分原则</p>
<p>2）前后端分离原则</p>
<p>3）无状态服务</p>
<p>4）restful的通信风格</p>
<p>下面我们来详细了解以下AKF拆分原则。</p>
<p>1 AKF拆分原则 业界对可扩展系统架构设计有一个朴素的概念，就是：**通过加机器可以解决容量和可用性问题（如果一台不行就两台）</p>
<p>这一理念在“云计算”概念疯狂流行的今天。得到了广泛的认可。对于一个规模迅速增长的系统而言。容量和性能问题当然是首当其冲的。但是随着时间的向前，系统规模的增长，除了面对性能与容量的问题外，还需要面对功能与模块数量上增长带来的系统复杂性问题。以及业务变化带来的提供差异化服务问题。而许多系统在架构设计时并未充分考虑到这些问题，导致系统的重构成为常态。从而影响业务交付能力，还浪费人力财力。对此《可扩展的艺术》一书提出了一个更加系统的可扩展模型—-AKF可扩展立方。这个立方体中沿着三个坐标轴设置分别为X，Y，Z。</p>
<p>2 Y轴功能Y轴扩展会将庞大的整体应用拆分为多个服务。每个服务实现一组相关的功能。如订单管理，客户管理等。在工程上常见的方案是服务化架构（SOA），比如对于一个电子商务平台，我们可以拆分成不同的服务组成下面这样的架构。</p>
<p>但是通过上图容易发现，当服务数量增多时，服务调用关系变得复杂，为系统添加一个新功能。要调用的服务数也变得不可控。由此引发的服务管理上的混乱，一般情况下，需要采用服务注册的机制，形成服务网关来进行服务治理。系统架构将变成如下图所示。</p>
<p>3 X轴（水平扩展）X轴扩展与我们前面理念是一致的。通过绝对平等的复制服务与数据，以及容量和可用性问题。其实就是将微服务运行多个实例。做集群，负载均衡的模式。</p>
<p>为了提升当个服务的可用性和容量。对每一个服务进行x轴扩展划分。</p>
<p><img src="https://pics7.baidu.com/feed/35a85edf8db1cb13a6fbd16fcafd974a93584b6e.jpeg?token=7361c837d5226bd2d991d894cd8126e7&s=95A05F300306454D5EC4C5CA0300F0B3" alt="img"></p>
<p>1.4 Z轴（数据分区）</p>
<p>Z周扩展通常是指基于请求和用户独特的需求，进行系统划分，并使得划分出来的子系统相互隔离，但又是完整的。</p>
<p>1.4.1工程领域常见的这种扩展有以下两种方案。</p>
<p>1.4.1.1 单元化架构</p>
<p>在分布式服务设计领域，一个单元就是满足某个分区所有业务操作的自包含闭环。如上面我们所说的y轴扩展的SOA架构。客户端对服务端节点的选择一般是随机的。但是，如果在此加上这周扩展，那么服务的节点选择将不再是随机的。而是每个单元自成一体。如下图。</p>
<p>1.4.1.2数据分区</p>
<p>为了性能数据安全上的考虑。我们将一个完整的数据集按照一定的维度，划分出不同的子集。一个分区，就是整体数据集的一个子集。比如用尾号来划分用户，那同样尾号的那部分用户，就可以认为是一个分区。数据分析一般包括以下几种数据划分的方式。</p>
<p>数据类型（如：业务类型）</p>
<p>数据范围（如：时间段，用户id）</p>
<p>数据热度（如：用户活跃度，商品热度）</p>
<p>读写分离（如：商品描述，商品库存）</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>CAP定理</title>
    <url>/2021/04/18/CAP%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<h1 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h1><h3 id="CAP理论概述"><a href="#CAP理论概述" class="headerlink" title="CAP理论概述"></a><strong>CAP理论概述</strong></h3><p>   一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两     项。</p>
<h3 id="CAP的定义"><a href="#CAP的定义" class="headerlink" title="CAP的定义"></a><strong>CAP的定义</strong></h3><p><strong>Consistency 一致性</strong></p>
<p>一致性指“<code>all nodes see the same data at the same time</code>”，即所有节点在同一时间的数据完全一致。</p>
<p>一致性是因为多个数据拷贝下并发读写才有的问题，因此理解时一定要注意结合考虑多个数据拷贝下并发读写的场景。</p>
<p>对于一致性，可以分为从客户端和服务端两个不同的视角。</p>
<ul>
<li>客户端</li>
</ul>
<p>从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。</p>
<ul>
<li>服务端</li>
</ul>
<p>从服务端来看，则是更新如何分布到整个系统，以保证数据最终一致。</p>
<p>对于一致性，可以分为强/弱/最终一致性三类</p>
<p>从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。</p>
<ul>
<li>强一致性</li>
</ul>
<p>对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是强一致性。</p>
<ul>
<li>弱一致性</li>
</ul>
<p>如果能容忍后续的部分或者全部访问不到，则是弱一致性。</p>
<ul>
<li>最终一致性</li>
</ul>
<p>如果经过一段时间后要求能访问到更新后的数据，则是最终一致性。</p>
<h3 id="Availability-可用性"><a href="#Availability-可用性" class="headerlink" title="Availability 可用性"></a><strong>Availability 可用性</strong></h3><p>可用性指“<code>Reads and writes always succeed</code>”，即服务在正常响应时间内一直可用。</p>
<p>好的可用性主要是指系统能够很好的为用户服务，不出现用户操作失败或者访问超时等用户体验不好的情况。可用性通常情况下可用性和分布式数据冗余，负载均衡等有着很大的关联。</p>
<h2 id="Partition-Tolerance分区容错性"><a href="#Partition-Tolerance分区容错性" class="headerlink" title="Partition Tolerance分区容错性"></a><strong>Partition Tolerance分区容错性</strong></h2><p>分区容错性指“<code>the system continues to operate despite arbitrary message loss or failure of part of the system</code>”，即分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性或可用性的服务。</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>ConcurrentHashMap 详解</title>
    <url>/2021/05/27/ConcurrentHashMap%20%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="ConcurrentHashMap-详解"><a href="#ConcurrentHashMap-详解" class="headerlink" title="ConcurrentHashMap 详解"></a>ConcurrentHashMap 详解</h2><h3 id="private-static-final-int-MAXIMUM-CAPACITY-1-lt-lt-30"><a href="#private-static-final-int-MAXIMUM-CAPACITY-1-lt-lt-30" class="headerlink" title="private static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;"></a>private static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</h3><ul>
<li><strong>MAXIMUM_CAPACITY是2的30次方 的原因</strong>`<ol>
<li>int的最大的值是2的31次方-1，所以容量无法到达2的31次方，</li>
<li>需要让容量满足2的幂次，所以设置为2的30次方 </li>
</ol>
</li>
</ul>
<h3 id="private-static-final-int-DEFAULT-CAPACITY-16"><a href="#private-static-final-int-DEFAULT-CAPACITY-16" class="headerlink" title="private static final int DEFAULT_CAPACITY = 16;"></a>private static final int DEFAULT_CAPACITY = 16;</h3><ul>
<li><strong>DEFAULT_CAPACITY = 16;</strong><ol>
<li>方便数据迁移</li>
<li>方便进行计算对应的位置</li>
<li>概率统计</li>
</ol>
</li>
</ul>
<h3 id="new-ConcurrentHashMap-lt-gt-2-自定义大小解释："><a href="#new-ConcurrentHashMap-lt-gt-2-自定义大小解释：" class="headerlink" title="new ConcurrentHashMap&lt;&gt;(2); 自定义大小解释："></a>new ConcurrentHashMap&lt;&gt;(2); 自定义大小解释：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">int</span> cap = ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</span><br><span class="line">               MAXIMUM_CAPACITY :</span><br><span class="line">               tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">this</span>.sizeCtl = cap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tableSizeFor的功能（不考虑大于最大容量的情况）是返回大于输入参数且最近的2的整数次幂的数。比如10，则返回16。 </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = c - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java基础知识</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 中的并发</title>
    <url>/2021/05/26/Java%20%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91/</url>
    <content><![CDATA[<h3 id="java-中的Lock"><a href="#java-中的Lock" class="headerlink" title="java 中的Lock"></a>java 中的Lock</h3><ol>
<li>ReentrantLock</li>
<li>ReentrantReadWriteLock</li>
<li>ReentrantLock</li>
<li>lock</li>
</ol>
<h3 id="java-中的并发容器"><a href="#java-中的并发容器" class="headerlink" title="java 中的并发容器"></a>java 中的并发容器</h3><ol>
<li>ConcurrentHashMap：并发版 HashMap</li>
<li>CopyOnWriteArrayList：并发版 ArrayList</li>
<li>CopyOnWriteArraySet：并发 Set</li>
<li>ConcurrentLinkedQueue：并发队列 (基于链表)</li>
<li>ConcurrentLinkedDeque：并发队列 (基于双向链表)</li>
<li>ConcurrentSkipListMap：基于跳表的并发 Map</li>
<li>ConcurrentSkipListSet：基于跳表的并发 Set</li>
<li>ArrayBlockingQueue：阻塞队列 (基于数组)</li>
<li>LinkedBlockingQueue：阻塞队列 (基于链表)</li>
<li>LinkedBlockingDeque：阻塞队列 (基于双向链表)</li>
<li>PriorityBlockingQueue：线程安全的优先队列</li>
<li>SynchronousQueue：读写成对的队列</li>
<li>LinkedTransferQueue：基于链表的数据交换队列</li>
<li>DelayQueue：延时队列</li>
</ol>
<h3 id="java-中的并发框架"><a href="#java-中的并发框架" class="headerlink" title="java 中的并发框架"></a>java 中的并发框架</h3><ol>
<li>Fork/join</li>
</ol>
<h3 id="java中的并发工具类"><a href="#java中的并发工具类" class="headerlink" title="java中的并发工具类"></a>java中的并发工具类</h3><ol>
<li><p>CountDownLatch</p>
</li>
<li><p>CyclicBarrier</p>
</li>
<li><p>Semaphore</p>
</li>
<li><p>Exchanger</p>
</li>
</ol>
<h3 id="Java中的原子操作类"><a href="#Java中的原子操作类" class="headerlink" title="Java中的原子操作类"></a>Java中的原子操作类</h3><ul>
<li><p><strong>原子更新基本类型</strong></p>
<p>·AtomicBoolean：原子更新布尔类型。<br>·AtomicInteger：原子更新整型。<br>·AtomicLong：原子更新长整型。</p>
</li>
<li><p><strong>原子更新数组</strong></p>
<p>·AtomicIntegerArray：原子更新整型数组里的元素。<br>·AtomicLongArray：原子更新长整型数组里的元素。<br>·AtomicReferenceArray：原子更新引用类型数组里的元素。</p>
</li>
<li><p><strong>原子更新引用类型</strong></p>
<p>·AtomicReference：原子更新引用类型。</p>
<p>·AtomicReferenceFieldUpdater：原子更新引用类型里的字段。</p>
<p>·AtomicMarkableReference：原子更新带有标记位的引用类型。可以原子更新一个布尔类型的标记位和引用类型。</p>
</li>
<li><p><strong>原子更新字段</strong></p>
<p>·AtomicIntegerFieldUpdater：原子更新整型的字段的更新器。<br>·AtomicLongFieldUpdater：原子更新长整型字段的更新器。<br>·AtomicStampedReference：原子更新带有版本号的引用类型。该类将整数值与引用关联起来，可用于原子的更新数据和数据的版本号，可以解决使用CAS进行原子更新时可能出现的ABA问题。</p>
</li>
</ul>
<h3 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h3><h3 id="Disruptor"><a href="#Disruptor" class="headerlink" title="Disruptor"></a>Disruptor</h3><h3 id="java中的ThreadPoolExecutor"><a href="#java中的ThreadPoolExecutor" class="headerlink" title="java中的ThreadPoolExecutor"></a>java中的ThreadPoolExecutor</h3><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java基础知识</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的深克隆和浅克隆</title>
    <url>/2020/12/18/Java%E4%B8%AD%E7%9A%84%E6%B7%B1%E5%85%8B%E9%9A%86%E5%92%8C%E6%B5%85%E5%85%8B%E9%9A%86/</url>
    <content><![CDATA[<h4 id="Java中的深克隆和浅克隆"><a href="#Java中的深克隆和浅克隆" class="headerlink" title="Java中的深克隆和浅克隆"></a>Java中的深克隆和浅克隆</h4><p><strong>浅克隆：</strong> 创建一个新对象，新对象的属性和原来对象完全相同（新对象的地址 ！= 原来对象的地址），对于非基本类型属性，仍指向原有属性所指向的对象的内存地址。**(String 类型除外)**。</p>
<p><strong>深克隆：</strong> 创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。</p>
<p><strong>浅克隆示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">teacher</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] drive;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> student stu;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clone = <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        teacher tea = <span class="keyword">new</span> teacher();</span><br><span class="line">        <span class="keyword">int</span>[] i = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">        i[<span class="number">0</span>]=<span class="number">88</span>;</span><br><span class="line">        tea.setDrive(i);</span><br><span class="line">        tea.setName(<span class="string">&quot;老师&quot;</span>);</span><br><span class="line">        student student = <span class="keyword">new</span> student();</span><br><span class="line">        student.setAge(<span class="number">33</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;学生&quot;</span>);</span><br><span class="line">        tea.setAge(<span class="number">56</span>);</span><br><span class="line">        tea.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        tea.setStu(student);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">       teacher clone = (teacher) tea.clone();</span><br><span class="line">         i[<span class="number">0</span>] = <span class="number">99</span>;</span><br><span class="line">        clone.setDrive(i);</span><br><span class="line">        clone.setAge(<span class="number">78</span>);</span><br><span class="line">        clone.setName(<span class="string">&quot;克隆老师&quot;</span>);</span><br><span class="line">        clone.getStu().setAge(<span class="number">99</span>);</span><br><span class="line">        clone.getStu().setName(<span class="string">&quot;小学生&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(tea);</span><br><span class="line">        System.out.println(clone);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>结果</li>
</ul>
<p><strong>注意 此处只有基本数据类型被克隆 引用类型的地址并没有发生变化  Sting除外 因为String是final</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">teacher(drive=[<span class="number">99</span>], name=老师, age=<span class="number">56</span>, sex=男, stu=student(name=小学生, age=<span class="number">99</span>))</span><br><span class="line">teacher(drive=[<span class="number">99</span>], name=克隆老师, age=<span class="number">78</span>, sex=男, stu=student(name=小学生,age=<span class="number">99</span>))</span><br></pre></td></tr></table></figure>

<p><strong>附图：</strong></p>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/%E6%B5%85%E6%8B%B7%E8%B4%9D.png" alt="浅克隆UNL"></p>
<p><strong>深克隆示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clone = <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">teacher</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] drive;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> student stu;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意此处</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clone = <span class="keyword">super</span>.clone();</span><br><span class="line">            student clone1 = (student) <span class="keyword">this</span>.getStu().clone();</span><br><span class="line">            <span class="keyword">this</span>.setStu(clone1);</span><br><span class="line">            <span class="keyword">int</span>[] clone2 = <span class="keyword">this</span>.getDrive().clone();</span><br><span class="line">            <span class="keyword">this</span>.setDrive(clone2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      teacher tea = <span class="keyword">new</span> teacher();</span><br><span class="line">      <span class="keyword">int</span>[] i = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">      i[<span class="number">0</span>] = <span class="number">88</span>;</span><br><span class="line">      tea.setDrive(i);</span><br><span class="line">      tea.setName(<span class="string">&quot;老师&quot;</span>);</span><br><span class="line">      student student = <span class="keyword">new</span> student();</span><br><span class="line">      student.setAge(<span class="number">33</span>);</span><br><span class="line">      student.setName(<span class="string">&quot;学生&quot;</span>);</span><br><span class="line">      tea.setAge(<span class="number">56</span>);</span><br><span class="line">      tea.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">      tea.setStu(student);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">      teacher clone = (teacher) tea.clone();</span><br><span class="line">      i[<span class="number">0</span>] = <span class="number">99</span>;</span><br><span class="line">      clone.setDrive(i);</span><br><span class="line">      clone.setAge(<span class="number">78</span>);</span><br><span class="line">      clone.setName(<span class="string">&quot;克隆老师&quot;</span>);</span><br><span class="line">      clone.getStu().setAge(<span class="number">99</span>);</span><br><span class="line">      clone.getStu().setName(<span class="string">&quot;小学生&quot;</span>);</span><br><span class="line"></span><br><span class="line">      System.out.println(tea);</span><br><span class="line">      System.out.println(clone);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>结果</li>
</ul>
<p><strong>注意结果发生明显的变化， 因为没个对象都被克隆 所有的引用都指向了不同的地址</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">teacher(drive=[<span class="number">88</span>], name=老师, age=<span class="number">56</span>, sex=男, stu=student(name=学生, age=<span class="number">33</span>))</span><br><span class="line">teacher(drive=[<span class="number">99</span>], name=克隆老师, age=<span class="number">78</span>, sex=男, stu=student(name=小学生, age=<span class="number">99</span>))</span><br></pre></td></tr></table></figure>

<p><strong>附图：</strong></p>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/%E6%B7%B1%E6%8B%B7%E8%B4%9D.png" alt="深克隆UML"></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java基础知识</category>
      </categories>
      <tags>
        <tag>Java中的深克隆和浅克隆</tag>
      </tags>
  </entry>
  <entry>
    <title>Keepalived</title>
    <url>/2021/03/28/Keepalived/</url>
    <content><![CDATA[<h3 id="Keepalived"><a href="#Keepalived" class="headerlink" title="Keepalived"></a>Keepalived</h3><p><strong>LVS集群的缺点</strong></p>
<p>LVS能够实现四层负载，能够支持足够大的并发量，但使用LVS负载均衡集群有以下两个缺点。</p>
<p>① 如果调度器（Director）挂了（不可用），将会导致整个系统不可用，从而调度器成为了单点故障（SPOF）。</p>
<p>② 调度器（Director）无法对后端RealServer做健康状态检测。因此，如果后端的某一台RealServer挂了，前端调度器将无法得知，仍然会向该RealServer调度请求，导致服务不可用；另外，如果某一台挂了的RealServer但已经恢复正常并重新提供服务时，前端调度器也无法得知，并将其加入调度队列。</p>
<p>因此，为了能够使前端调度器（Director）能够冗余、使Director能够对后端各RS做健康状态检测，并按需增删RS，需要引入高可用集群的解决方案。以下介绍的是Keepalived高可用软件。</p>
<p><strong>Keepalived的介绍</strong></p>
<p>什么是keepalived呢？keepalived是实现高可用的一种轻量级的技术手段，主要用来防止单点故障(单点故障是指一旦某一点出现故障就会导致整个系统架构的不可用)的发生。</p>
<p>Keepalived的高可用功能是通过VRRP协议实现的，VRRP是Virtual Router Redundancy Protocol（虚拟路由器冗余协议）的缩写。VRRP的出现是为了解决静态路由单点故障的问题，当某一节点出现故障时，可以防止导致整个网络不可用。Keepalived除了可以高可用LVS之外，还可以作为其他系统网络服务（Nginx、Haproxy等）的高可用解决方案（Keepalived可通过调用vrrp_script来高可用其它服务，并通过调用vrrp_track来追踪每一个服务）。</p>
<p><strong>Keepalived的功能</strong></p>
<p>Keepalived有三个重要功能，如下。</p>
<ul>
<li>高可用系统网络服务。</li>
</ul>
<p>Keepalived可以实现在两台或多台主机之间的故障切换转移。如果在两台主机中都安装了Keepalived，当正常工作时，有一台主机工作为Master角色，另一台主机工作为Backup角色。角色为Master的主机获得所有资源（VIP资源、服务资源）并向用户提供服务，角色为Backup的主机不提供服务而仅作为Master主机的热备。当角色为Master的主机出现故障时，角色为Backup的主机将自动接管Master主机的所有资源（VIP资源、服务资源）并开始工作。当Master主机故障修复完成时，将重新接管原来的资源和工作，而Backup主机则释放Master主机故障时它接管的资源和工作，各自恢复原来的角色。</p>
<ul>
<li>实现对LVS集群中各RealServer的健康状态进行检测。</li>
</ul>
<p>Keepalived可以通过在自身配置文件keepalived.conf中配置LVS集群服务中各台RealServer的IP地址和相关参数，并可以通过网络层、传输层和应用层这三层进行探测各RealServer的健康状态。当有一台或多台RealServer出现故障而无法提供服务时，Keepalived服务可以把出现故障的RealServer从LVS的正常转发队列中移除，保证不影响用户的访问。而当有RealServer故障修复完成时，Keepalived服务可以将其重新加入LVS的正常转发队列中，向用户提供服务。</p>
<ul>
<li>管理LVS负载均衡软件</li>
</ul>
<p>Keepalived可以读取配置文件，并通过一个更为底层的接口来管理IPVS并生成IPVS规则，这使得LVS的使用更为方便。</p>
<p><strong>Keepalived工作原理</strong></p>
<p>前面提到，Keepalived的高可用功能是通过VRRP协议实现的，要了解Keepalived的工作原理，需要先了解VRRP协议的工作原理。</p>
<p><strong>VRRP</strong></p>
<p>​        VRRP是一种容错性协议，它是通过将多台设备虚拟化成一台设备，如果其中一台设备出现故障，那么另一台设备可以迅速接替其工作，已保证通讯的可靠性和连续性。</p>
<p>​     1.工作原理</p>
<p>​    在企业网当中，PC一般是需要使用”网关”来与外部网络进行通讯，这样如果网关出现了故障那么整一个子网的对外通讯都会被切断，VRRP的出现就能把这个问题很好地解决了，VRRP可以通过把多台设备（路由器、交换机、防火墙等）虚拟化成一台设备，然后通过配置虚拟IP地址作为网关就能实现对网关的备份（这虚拟IP地址是代表整个VRRP组内的所有设备），当其中一台设备出现故障之后，VRRP组内其他设备会通过某些机制来接替故障设备的工作。</p>
<p><strong>VRRP概念</strong></p>
<p><strong>虚拟设备：</strong>由一个”主（Master）”设备和多个”备（Backup）”设备组成的一个虚拟网关。</p>
<p><strong>主设备（Master）：</strong>负责转发数据报文和周期性向备设备发送VRRP协议报文。</p>
<p><strong>备设备（Backup）：</strong>不负责转发数据报文，在Master设备发生故障的时候会通过选举形式成为新的Master设备，该角色会接收来自Master设备的VRRP报文并加以分析。</p>
<p><strong>VRID：</strong>用来表示一个VRRP组。</p>
<p><strong>虚拟IP：</strong>配置在虚拟设备上的虚拟IP地址，一个虚拟设备可以拥有一个或者多个虚拟IP地址。</p>
<p><strong>IP地址拥有者：</strong>分配给虚拟设备的虚拟IP的真实拥有者（例如：分配个虚拟路由的IP为192.168.1.1，但是这个IP已经分配给物理接口G0/0/1这个接口那么这个接口就是”IP拥有者”），IP拥有者会直接跳过选举成为Master，并且是不可抢占的。</p>
<p><strong>虚拟MAC地址：</strong>由虚拟设备生成的虚拟MAC地址，每一个虚拟设备都会自动生成一个虚拟MAC地址，这个MAC地址是用于虚拟设备处理ARP报文的。</p>
<p><strong>优先级：</strong>用于表示物理设备的优先级，这个参数用于Master的选举，取值范围是1-254，这个有优先级有两个比较特殊的值，分别是0和255，优先级0是由原来Master设备发送的，这个优先级是声明此设备不再参与VRRP组。优先级为255的是IP拥有者的优先级，拥有这个优先级会直接成为Master。<strong>（优先级数值越低优先级则越高）</strong></p>
<p><strong>抢占模式：</strong>当Backup 设备接收到的VRRP报文通过分析得出当前Master设备的优先级低于Backup设备，则Backup设备会切换为Master设备。</p>
<p><strong>工作流程</strong></p>
<p>VRRP备份组会通过优先级选举出Master，Master会使用虚拟MAC发送ARP报文，使与Master连接的主机或者客户端建立与虚拟MAC对应的ARP映射表，同时Master会周期性发布VRRP报文向所有Backup通告其配置信息与工作状态。</p>
<p>如果当前Master出现故障，Backup设备将会在MASTER_DOWN_INTERVAL定时器超时或者其他联动技术检测到Master出现故障时则会根据Backup组内的成员的优先级选举出新的Master，如果Backup只有一台设备则直接成为Master。</p>
<p>新的Master使用虚拟MAC发送ARP报文，使连接在当前VRRP组内的客户端或者设备刷新其ARP映射表。</p>
<p>如果原来的Master从故障中恢复过来，如果其优先级为255则会直接切换到Master，若不是则会恢复到Backup状态，如果当前为抢占模式，当原Master接收到新Master的VRRP报文发现其优先级高于原Master则原Master会直接成为Master。如果处于非抢占模式，则原Master会在新Master出现故障时通过选举等方式成为Master。</p>
<p><strong>VRRP选举</strong></p>
<p>VRRP通过优先级来确定设备成为Master或者Backup，优先级取值越低，则优先级越高。</p>
<p>初始创建的VRRP设备都处于初始状态，在该状态下，如果设备的优先级为255，则直接成为Master并且跳过接下来的选举，若不是则会切换到Backup状态，然后会等待MASTER_DOWN_INTERVAL超时后成为Master。</p>
<p>首先切换到Master的设备会通过VRRP报文获取其他设备的优先级，然后通过以下规则进行选举：</p>
<ol>
<li>如果Backup设备接收到来自Master的VRRP报文，发现其优先级数值低于自身，则继续处于Backup状态。</li>
<li>如果Backup设备接收到来自Master的VRRP报文，发现其优先级数值高于自身，则当前Backup设备会切换到Master，而原Master设备会切换到Backup。如果在非抢占模式下，Backup设备仍然会处于Backup状态。</li>
<li>如果同时有多个设备切换到Master，则会互相通过VRRP报文确定其优先级，优先级高的则成为Master，若优先级一样，则对比IP地址，IP地址大的则成为Master。</li>
</ol>
<p> <strong>VRRP状态通告</strong></p>
<p>Master设备会周期性发送VRRP报文，通告其配置信息与工作状态，Backup则会接收并处理VRRP报文确定Master设备的工作状态。</p>
<p>当Master主动退出VRRP组是，会发送优先级为0的报文通知所有的Backup设备，Backup设备接收到之后会直接切换到Master状态，若Backup组内有多台设备则通过上述选举选出新的Master设备，而不需要等待MASTER_DOWN_INTERVAL超时后再进行切换或者选举。</p>
<p>当Master设备由于故障不能发送VRRP报文，所有的Backup设备都需要等待MASTER_DOWN_INTERVAL 超时后才会认为Master设备出现故障，之后才切换到Master。</p>
<h3 id="如何保证单台服务器的可靠性"><a href="#如何保证单台服务器的可靠性" class="headerlink" title="如何保证单台服务器的可靠性"></a><strong>如何保证单台服务器的可靠性</strong></h3><p><strong>可以借用VRRP的两种模式</strong></p>
<ul>
<li><p>主备备份模式</p>
</li>
<li><p>负载分担模式</p>
</li>
</ul>
<h3 id="主备备份模式："><a href="#主备备份模式：" class="headerlink" title="主备备份模式："></a><strong>主备备份模式：</strong></h3><p>主备备份模式就是只由Master设备负责转发数据，而Backup设备则处于待机备份模式不参与数据转发，当Master设备出现故障时才会切换到Master进行数据转发。</p>
<p>参照下图，正常情况下只有SW1转发数据，而SW2则处于待机状态，SW1会周期发送VRRP报文告知SW2自身的配置信息和工作状态，如果SW1发生故障，则SW2会自动切换到到Master继续进行数据转发等。</p>
<p>而当SW1恢复之后，若当前为抢占模式，若SW1的优先级为255那么SW1会直接成为Master否则会先切换到Backup然后再切换到Master。</p>
<pre class="mermaid">graph TD
A[pc]  
      A --> |客户端的情求| C[SW3]
      C -->  B[Master   SW1]
      C -->  f[Backup SW2]
      B --> c[SW3]
      f --> c[R]</pre>





<h3 id="负载分担模式："><a href="#负载分担模式：" class="headerlink" title="负载分担模式："></a><strong>负载分担模式：</strong></h3><p>上述的主备备份模式，若SW1一直正常工作，那么SW2则长期处于待机状态，显然这种做法比较浪费，所以一般会采用负载分担模式，负载分到模式会是SW2都处于工作状态。</p>
<p>参照下图，负载分担模式是创建两个VRRP组分别为A组和B组，A组的Master为SW1，Backup为SW2，而B组的Master为SW2，Backup为SW1，通过创建多个拥有不同虚拟IP的VRRP组，为不同的VLAN指定网关实现负载分担。</p>
<pre class="mermaid">graph TD

A[pc1]  
      D[pc2]
      A --> |客户端的情求| C[SW3]
      D --> |客户端的情求| C[vlan 10 192.168.10.1 </br> vlan 20   192.168.20.1</br>  SW3]
      C -->  B[Master:vlan 10 </br> backup:vlan 20 </br>  SW1]  
      C -->  f[Master:vlan 20 </br> backup:vlan 10 </br>  SW2]
      f --> E[R]
      B --> E[R]</pre>

<p>参照上图，在VLAN10当中Master是SW1，Backup为SW2，两台交换机都分别创建vlan10和vlan20 并且分配好IP地址，正常情况下vlan10的客户端会通过SW1访问R1，vlan20的客户端会通过SW2访问R1这样就实现了负载分担，如果SW1出现故障，那么SW2会成为vlan10的Master（同时也是vlan20的Master），接替SW1的工作，而vlan10的客户端也会通过SW2访问R1，而SW2故障则同理。</p>
<p> <strong>Keepalived的配置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主备服务安装Keepalived</span><br><span class="line">	yum install keepalived ipvsadm -y</span><br><span class="line">	</span><br><span class="line"> 修改配置文件：</span><br><span class="line">		cd  &#x2F;etc&#x2F;keepalived&#x2F;</span><br><span class="line">		cp keepalived.conf keepalived.conf.bak</span><br><span class="line">		vi keepalived.conf</span><br><span class="line"></span><br><span class="line">			node01:</span><br><span class="line">			vrrp：虚拟路由冗余协议！</span><br><span class="line">				vrrp_instance VI_1 &#123;</span><br><span class="line">					state MASTER     &#x2F;&#x2F;MASTER&#x2F; BACKUP</span><br><span class="line">					interface eth0  &#x2F;&#x2F;网关接口</span><br><span class="line">					virtual_router_id 51</span><br><span class="line">					priority 100 &#x2F;&#x2F;权重配置	100&#x2F; 50</span><br><span class="line">					advert_int 1</span><br><span class="line">					authentication &#123;</span><br><span class="line">						auth_type PASS</span><br><span class="line">						auth_pass 1111</span><br><span class="line">					&#125;</span><br><span class="line">					virtual_ipaddress &#123;</span><br><span class="line">						192.168.150.100&#x2F;24 dev eth0 label  eth0:3     &#x2F;&#x2F;虚拟IP</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">&#x2F;&#x2F;配置入包规则</span><br><span class="line">			virtual_server 192.168.150.100 80 &#123;</span><br><span class="line">				delay_loop 6</span><br><span class="line">				lb_algo rr   &#x2F;&#x2F;负载机制  rr轮询</span><br><span class="line">				lb_kind DR   &#x2F;&#x2F;模式</span><br><span class="line">				nat_mask 255.255.255.0</span><br><span class="line">&#x2F;&#x2F;在50秒内如果同一个用户有多次的请求发送过来则向固定的一台服务负载</span><br><span class="line">				persistence_timeout 50  </span><br><span class="line">				protocol TCP</span><br><span class="line">&#x2F;&#x2F; 出包规则</span><br><span class="line">				real_server 192.168.150.12 80 &#123;</span><br><span class="line">					weight 1</span><br><span class="line">					HTTP_GET &#123;</span><br><span class="line">						url &#123;</span><br><span class="line">						  path &#x2F;</span><br><span class="line">						  status_code 200</span><br><span class="line">						&#125;</span><br><span class="line">						connect_timeout 3</span><br><span class="line">						nb_get_retry 3</span><br><span class="line">						delay_before_retry 3</span><br><span class="line">					&#125;   </span><br><span class="line">				&#125;       </span><br><span class="line">				real_server 192.168.150.13 80 &#123;</span><br><span class="line">					weight 1</span><br><span class="line">					HTTP_GET &#123;</span><br><span class="line">						url &#123;</span><br><span class="line">						  path &#x2F;</span><br><span class="line">						  status_code 200</span><br><span class="line">						&#125;</span><br><span class="line">						connect_timeout 3</span><br><span class="line">						nb_get_retry 3</span><br><span class="line">						delay_before_retry 3</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br></pre></td></tr></table></figure>



<h3 id="详细参考https-www-cnblogs-com-wuweidong-p-13804180-html"><a href="#详细参考https-www-cnblogs-com-wuweidong-p-13804180-html" class="headerlink" title="详细参考https://www.cnblogs.com/wuweidong/p/13804180.html"></a>详细参考<a href="https://www.cnblogs.com/wuweidong/p/13804180.html">https://www.cnblogs.com/wuweidong/p/13804180.html</a></h3><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>LVS</title>
    <url>/2021/03/21/LVS/</url>
    <content><![CDATA[<h3 id="LVS的介绍"><a href="#LVS的介绍" class="headerlink" title="LVS的介绍"></a>LVS的介绍</h3><p><strong>LVS是什么？</strong><br>LVS（Linux Virtual Server，Linux虚拟服务器）是由章文嵩开发的一款开源软件（遵循GPL协议）。LVS工作在layer 4，又称为四层路由/四层交换，能够根据请求报文的目标IP地址和目标PORT将其调度转发至后端的某台服务器上，调度转发是根据调度算法来进行的。</p>
<p>LVS由两部分组成，分别是工作在内核空间的ipvs框架和工作在用户空间的ipvsadm命令。ipvsadm是工作在用户空间的命令行工具，用于管理集群服务及集群服务上的Real Server（RS），而ipvs则是工作于内核上的netfilter的INPUT钩子上的程序，其功能是根据用户定义的集群实现对请求报文的转发。</p>
<p>LVS支持基于TCP、UDP、SCTP、AH、EST、AH_EST等协议进行调度。</p>
<p><strong>为什么要使用LVS？</strong></p>
<p>LVS是负载均衡能力最强的一款软件，对于选择LVS作为负载均衡的原因总结如下。</p>
<p>1、相比于Nginx、Haproxy等负载均衡器，LVS支持较大的并发量。Nginx、Haproxy是工作在七层的负载均衡器，因此需要监听在一个端口上，同时对于每一个客户端都需要打开一个套接字文件来接受请求数据，当在应用层分析完数据时，有需要扮演成客户端角色向后端的服务器主机发送请求报文，不仅需要打开大量套接字文件，还需要有多个随机端口可以使用，而端口数最多只有65535个，并且其中有一部分端口是不能使用的。因此，工作在七层的负载均衡软件（如Nginx、Haproxy等）的最大并发数受限于能够打开的套接字文件数（内核需要打开很多的文件描述符来维护）以及能使用的随机端口数。对于LVS而言，因此它工作在四层，所以不需要监听在某个端口以响应客户端请求，因此不需要打开套接字接受和发送数据，同时也不需要使用端口，所有功能均在ipvs中实现，因此LVS的性能更高，支持的并发量更大。据统计，LVS的最大并发量可以达到400~500w。</p>
<p>2、LVS是一款开源且免费的软件，结合Linux使用可以大大降低企业的应用成本。</p>
<p>3、LVS具有可伸缩性。当一台服务器负载压力增长时，系统可以在不降低服务质量的情况下通过扩展来满足需求。</p>
<p>4、LVS具有高可靠性。这在国内很多大型的、关键性的Web站点实践中得到印证。</p>
<h3 id="LVS的三种搭建模型"><a href="#LVS的三种搭建模型" class="headerlink" title="LVS的三种搭建模型"></a>LVS的三种搭建模型</h3><ul>
<li><p><strong>NAT模式</strong><br>优点：集群中的物理服务器可以使用任何支持TCP/IP操作系统，物理服务器可以分配Internet的保留私有地址，只有负载均衡器需要一个合法的IP地址。</p>
<p>不足：扩展性有限。当服务器节点（普通PC服务器）数据增长到20个或更多时,负载均衡器将成为整个系统的瓶颈，因为所有的请求包和应答包都需要经过负载均衡器再生。假使TCP包的平均长度是536字节的话，平均包再生延迟时间大约为60us（在Pentium处理器上计算的，采用更快的处理器将使得这个延迟时间变短），负载均衡器的最大容许能力为8.93M/s，假定每台物理服务器的平台容许能力为400K/s来计算，负责均衡器能为22台物理服务器计算。<br><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/data/%E7%BD%91%E7%BB%9C/lvs%20nat%E6%A8%A1%E5%9E%8B.png" alt="NAT模式"></p>
</li>
<li><p><strong>TUN模式</strong><br>我们发现，许多Internet服务（例如WEB服务器）的请求包很短小，而应答包通常很大。<br>优点：负载均衡器只负责将请求包分发给物理服务器，而物理服务器将应答包直接发给用户。所以，负载均衡器能处理很巨大的请求量，这种方式，一台负载均衡能为超过100台的物理服务器服务，负载均衡器不再是系统的瓶颈。使用VS-TUN方式，如果你的负载均衡器拥有100M的全双工网卡的话，就能使得整个Virtual Server能达到1G的吞吐量。<br>不足：但是，这种方式需要所有的服务器支持”IP Tunneling”(IP Encapsulation)协议，我仅在Linux系统上实现了这个，如果你能让其它操作系统支持，还在探索之中。<br><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/data/%E7%BD%91%E7%BB%9C/lvs%20TUN.png" alt="TUN"></p>
</li>
<li><p><strong>DR模式</strong><br>优点：和VS-TUN一样，负载均衡器也只是分发请求，应答包通过单独的路由方法返回给客户端。与VS-TUN相比，VS-DR这种实现方式不需要隧道结构，因此可以使用大多数操作系统做为物理服务器，其中包括：Linux 2.0.36、2.2.9、2.2.10、2.2.12；Solaris 2.5.1、2.6、2.7；FreeBSD 3.1、3.2、3.3；NT4.0无需打补丁；IRIX 6.5；HPUX11等。<br>不足：要求负载均衡器的网卡必须与物理网卡在一个物理段上<br><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/data/%E7%BD%91%E7%BB%9C/lvs%20DR.png" alt="DR"></p>
</li>
</ul>
<h3 id="使用LVS搭建基于四层网络模型的负载均衡器-DR模式"><a href="#使用LVS搭建基于四层网络模型的负载均衡器-DR模式" class="headerlink" title="使用LVS搭建基于四层网络模型的负载均衡器 DR模式"></a>使用LVS搭建基于四层网络模型的负载均衡器 DR模式</h3><p><strong>命令解释</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rr:轮循</span><br><span class="line">wrr:</span><br><span class="line">dh:</span><br><span class="line">sh:</span><br><span class="line"></span><br><span class="line">动态调度方法：</span><br><span class="line">lc: 最少连接</span><br><span class="line">wlc: 加权最少连接</span><br><span class="line">sed: 最短期望延迟</span><br><span class="line">nq: never queue</span><br><span class="line">LBLC: 基于本地的最少连接</span><br><span class="line">LBLCR: 基于本地的带复制功能的最少连接</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><figcaption><span>：</span></figcaption><table><tr><td class="code"><pre><span class="line">kernel parameter:</span><br><span class="line">目标mac地址为全F，交换机触发广播</span><br><span class="line">  &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;*IF*&#x2F;</span><br><span class="line">arp_ignore: 定义接收到ARP请求时的响应级别；</span><br><span class="line">  0：只要本地配置的有相应地址，就给予响应；</span><br><span class="line">  1：仅在请求的目标(MAC)地址配置请求</span><br><span class="line">        到达的接口上的时候，才给予响应；</span><br><span class="line"></span><br><span class="line">arp_announce：定义将自己地址向外通告时的通告级别；</span><br><span class="line">  0：将本地任何接口上的任何地址向外通告；</span><br><span class="line">  1：试图仅向目标网络通告与其网络匹配的地址；</span><br><span class="line">  2：仅向与本地接口上地址匹配的网络进行通告；</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install ipvsadm -y</span><br><span class="line"></span><br><span class="line">管理集群服务</span><br><span class="line">添加：-A -t|u|f service-address [-s scheduler]</span><br><span class="line">-t: TCP协议的集群</span><br><span class="line">-u: UDP协议的集群</span><br><span class="line">service-address:     IP:PORT</span><br><span class="line">-f: FWM: 防火墙标记</span><br><span class="line">service-address: Mark Number</span><br><span class="line">修改：-E</span><br><span class="line">删除：-D -t|u|f service-address</span><br><span class="line"></span><br><span class="line">ipvsadm -A -t 192.168.9.100:80 -s rr</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加：ipvsadm  -a -t|u|f service-address -r server-address [-g|i|m] [-w weight]</span><br><span class="line">  -t|u|f service-address：事先定义好的某集群服务</span><br><span class="line">  -r server-address: 某RS的地址，在NAT模型中，可使用IP：PORT实现端口映射；</span><br><span class="line">  [-g|i|m]: LVS类型 </span><br><span class="line">  -g: DR</span><br><span class="line">  -i: TUN</span><br><span class="line">  -m: NAT</span><br><span class="line">  [-w weight]: 定义服务器权重</span><br><span class="line">修改：-e</span><br><span class="line">删除：-d -t|u|f service-address -r server-address</span><br><span class="line"># ipvsadm -a -t 172.16.100.1:80 -r 192.168.10.8 –g</span><br><span class="line"># ipvsadm -a -t 172.16.100.1:80 -r 192.168.10.9 -g</span><br><span class="line">查看</span><br><span class="line">  -L|l</span><br><span class="line">  -n: 数字格式显示主机地址和端口</span><br><span class="line">  --stats：统计数据</span><br><span class="line">  --rate: 速率</span><br><span class="line">  --timeout: 显示tcp、tcpfin和udp的会话超时时长</span><br><span class="line">  -:c 显示当前的ipvs连接状况</span><br><span class="line">删除所有集群服务</span><br><span class="line">  -C：清空ipvs规则</span><br><span class="line">保存规则</span><br><span class="line">  -S</span><br><span class="line"># ipvsadm -S &gt; &#x2F;path&#x2F;to&#x2F;somefile</span><br><span class="line">载入此前的规则：</span><br><span class="line">  -R</span><br><span class="line"># ipvsadm -R &lt; &#x2F;path&#x2F;form&#x2F;somefile </span><br></pre></td></tr></table></figure>

<ul>
<li><strong>拓扑图</strong><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/data/%E7%BD%91%E7%BB%9C/lvs-DR%E6%90%AD%E5%BB%BA%E6%A8%A1%E5%9E%8B.png" alt="lvs-DR拓扑图"></li>
<li><strong>开始搭建</strong></li>
</ul>
<p>1.在192.168.150.11 中添加192.168.150.100的网卡</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加网卡  ifconfig eth0:2 192.168.150.100&#x2F;24</span><br><span class="line"></span><br><span class="line">注意&#x2F;24代表子网掩码是255.255.255.1</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>   <font color='red'> 删除 eth0:2网卡 ifconfig eth0:2 down </font></p>
<p> 2.调192.168.150.12  和 192.168.150.13的内核协议</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo 1  &gt;  &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;eth0&#x2F;arp_ignore </span><br><span class="line">echo 1  &gt;  &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;all&#x2F;arp_ignore </span><br><span class="line">echo 2 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;eth0&#x2F;arp_announce </span><br><span class="line">echo 2 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;all&#x2F;arp_announce </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>3.配置192.168.150.12  和 192.168.150.13环行路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig lo:2 192.168.150.100 netmask 255.255.255.255</span><br></pre></td></tr></table></figure>
<p>4.在 192.168.150.12 和 192.168.150.13中安装 httpd</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install httpd -y</span><br><span class="line">启动  service httpd start</span><br><span class="line">创建主页vi &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html</span><br></pre></td></tr></table></figure>
<p>5在浏览器中输入192.168.150.12:80测试</p>
<p>6.在192.168.150.11 中安装 ipvsadm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install ipvsadm -y</span><br><span class="line">添加进包的规则：ipvsadm -A  -t  192.168.150.100:80  -s rr</span><br><span class="line">添加负载的规则:</span><br><span class="line">ipvsadm -a  -t 192.168.150.100:80  -r  192.168.150.12 -g -w 1</span><br><span class="line">ipvsadm -a  -t 192.168.150.100:80  -r  192.168.150.13 -g -w 1</span><br><span class="line"></span><br><span class="line">查看规则：ipvsadm  -ln</span><br></pre></td></tr></table></figure>
<p>7.验证：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">浏览器访问  192.168.150.100   看到负载  F5属性</span><br><span class="line">192.168.150.11：</span><br><span class="line">	netstat -natp   结论看不到socket连接</span><br><span class="line">192.168.150.12~192.168.150.13:</span><br><span class="line">	netstat -natp   结论看到很多的socket连接</span><br><span class="line">192.168.150.11:</span><br><span class="line">	ipvsadm -lnc    查看偷窥记录本</span><br><span class="line">	TCP 00:57  FIN_WAIT    192.168.150.1:51587 192.168.150.100:80 192.168.150.12:80</span><br><span class="line"></span><br><span class="line">	           FIN_WAIT： 连接过，偷窥了所有的包</span><br><span class="line">	           SYN_RECV： 基本上lvs都记录了，证明lvs没事，一定是后边网络层出问题</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>LVS三种搭建模式</title>
    <url>/2021/03/21/LVS%E4%B8%89%E7%A7%8D%E6%90%AD%E5%BB%BA%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="lvs的三种搭建模型"><a href="#lvs的三种搭建模型" class="headerlink" title="lvs的三种搭建模型"></a>lvs的三种搭建模型</h3><ul>
<li><p><strong>NAT模式</strong><br>优点：集群中的物理服务器可以使用任何支持TCP/IP操作系统，物理服务器可以分配Internet的保留私有地址，只有负载均衡器需要一个合法的IP地址。</p>
<p>不足：扩展性有限。当服务器节点（普通PC服务器）数据增长到20个或更多时,负载均衡器将成为整个系统的瓶颈，因为所有的请求包和应答包都需要经过负载均衡器再生。假使TCP包的平均长度是536字节的话，平均包再生延迟时间大约为60us（在Pentium处理器上计算的，采用更快的处理器将使得这个延迟时间变短），负载均衡器的最大容许能力为8.93M/s，假定每台物理服务器的平台容许能力为400K/s来计算，负责均衡器能为22台物理服务器计算。<br><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/data/%E7%BD%91%E7%BB%9C/lvs%20nat%E6%A8%A1%E5%9E%8B.png" alt="NAT模式"></p>
</li>
<li><p><strong>TUN模式</strong><br>我们发现，许多Internet服务（例如WEB服务器）的请求包很短小，而应答包通常很大。<br>优点：负载均衡器只负责将请求包分发给物理服务器，而物理服务器将应答包直接发给用户。所以，负载均衡器能处理很巨大的请求量，这种方式，一台负载均衡能为超过100台的物理服务器服务，负载均衡器不再是系统的瓶颈。使用VS-TUN方式，如果你的负载均衡器拥有100M的全双工网卡的话，就能使得整个Virtual Server能达到1G的吞吐量。<br>不足：但是，这种方式需要所有的服务器支持”IP Tunneling”(IP Encapsulation)协议，我仅在Linux系统上实现了这个，如果你能让其它操作系统支持，还在探索之中。<br><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/data/%E7%BD%91%E7%BB%9C/lvs%20TUN.png" alt="TUN"></p>
</li>
<li><p><strong>DR模式</strong><br>优点：和VS-TUN一样，负载均衡器也只是分发请求，应答包通过单独的路由方法返回给客户端。与VS-TUN相比，VS-DR这种实现方式不需要隧道结构，因此可以使用大多数操作系统做为物理服务器，其中包括：Linux 2.0.36、2.2.9、2.2.10、2.2.12；Solaris 2.5.1、2.6、2.7；FreeBSD 3.1、3.2、3.3；NT4.0无需打补丁；IRIX 6.5；HPUX11等。<br>不足：要求负载均衡器的网卡必须与物理网卡在一个物理段上<br><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/data/%E7%BD%91%E7%BB%9C/lvs%20DR.png" alt="DR"></p>
</li>
</ul>
<h3 id="使用LVS搭建基于四层网络模型的负载均衡器-DR模式"><a href="#使用LVS搭建基于四层网络模型的负载均衡器-DR模式" class="headerlink" title="使用LVS搭建基于四层网络模型的负载均衡器 DR模式"></a>使用LVS搭建基于四层网络模型的负载均衡器 DR模式</h3><p><strong>命令解释</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rr:轮循</span><br><span class="line">wrr:</span><br><span class="line">dh:</span><br><span class="line">sh:</span><br><span class="line"></span><br><span class="line">动态调度方法：</span><br><span class="line">lc: 最少连接</span><br><span class="line">wlc: 加权最少连接</span><br><span class="line">sed: 最短期望延迟</span><br><span class="line">nq: never queue</span><br><span class="line">LBLC: 基于本地的最少连接</span><br><span class="line">LBLCR: 基于本地的带复制功能的最少连接</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><figcaption><span>：</span></figcaption><table><tr><td class="code"><pre><span class="line">kernel parameter:</span><br><span class="line">目标mac地址为全F，交换机触发广播</span><br><span class="line">  &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;*IF*&#x2F;</span><br><span class="line">arp_ignore: 定义接收到ARP请求时的响应级别；</span><br><span class="line">  0：只要本地配置的有相应地址，就给予响应；</span><br><span class="line">  1：仅在请求的目标(MAC)地址配置请求</span><br><span class="line">        到达的接口上的时候，才给予响应；</span><br><span class="line"></span><br><span class="line">arp_announce：定义将自己地址向外通告时的通告级别；</span><br><span class="line">  0：将本地任何接口上的任何地址向外通告；</span><br><span class="line">  1：试图仅向目标网络通告与其网络匹配的地址；</span><br><span class="line">  2：仅向与本地接口上地址匹配的网络进行通告；</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install ipvsadm -y</span><br><span class="line"></span><br><span class="line">管理集群服务</span><br><span class="line">添加：-A -t|u|f service-address [-s scheduler]</span><br><span class="line">-t: TCP协议的集群</span><br><span class="line">-u: UDP协议的集群</span><br><span class="line">service-address:     IP:PORT</span><br><span class="line">-f: FWM: 防火墙标记</span><br><span class="line">service-address: Mark Number</span><br><span class="line">修改：-E</span><br><span class="line">删除：-D -t|u|f service-address</span><br><span class="line"></span><br><span class="line">ipvsadm -A -t 192.168.9.100:80 -s rr</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加：ipvsadm  -a -t|u|f service-address -r server-address [-g|i|m] [-w weight]</span><br><span class="line">  -t|u|f service-address：事先定义好的某集群服务</span><br><span class="line">  -r server-address: 某RS的地址，在NAT模型中，可使用IP：PORT实现端口映射；</span><br><span class="line">  [-g|i|m]: LVS类型 </span><br><span class="line">  -g: DR</span><br><span class="line">  -i: TUN</span><br><span class="line">  -m: NAT</span><br><span class="line">  [-w weight]: 定义服务器权重</span><br><span class="line">修改：-e</span><br><span class="line">删除：-d -t|u|f service-address -r server-address</span><br><span class="line"># ipvsadm -a -t 172.16.100.1:80 -r 192.168.10.8 –g</span><br><span class="line"># ipvsadm -a -t 172.16.100.1:80 -r 192.168.10.9 -g</span><br><span class="line">查看</span><br><span class="line">  -L|l</span><br><span class="line">  -n: 数字格式显示主机地址和端口</span><br><span class="line">  --stats：统计数据</span><br><span class="line">  --rate: 速率</span><br><span class="line">  --timeout: 显示tcp、tcpfin和udp的会话超时时长</span><br><span class="line">  -:c 显示当前的ipvs连接状况</span><br><span class="line">删除所有集群服务</span><br><span class="line">  -C：清空ipvs规则</span><br><span class="line">保存规则</span><br><span class="line">  -S</span><br><span class="line"># ipvsadm -S &gt; &#x2F;path&#x2F;to&#x2F;somefile</span><br><span class="line">载入此前的规则：</span><br><span class="line">  -R</span><br><span class="line"># ipvsadm -R &lt; &#x2F;path&#x2F;form&#x2F;somefile </span><br></pre></td></tr></table></figure>

<ul>
<li><strong>拓扑图</strong><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/data/%E7%BD%91%E7%BB%9C/lvs-DR%E6%90%AD%E5%BB%BA%E6%A8%A1%E5%9E%8B.png" alt="lvs-DR拓扑图"></li>
<li><strong>开始搭建</strong></li>
</ul>
<p>1.在192.168.150.11 中添加192.168.150.100的网卡</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加网卡  ifconfig eth0:2 192.168.150.100&#x2F;24</span><br><span class="line"></span><br><span class="line">注意&#x2F;24代表子网掩码是255.255.255.1</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>   <font color='red'> 删除 eth0:2网卡 ifconfig eth0:2 down </font></p>
<p> 2.调192.168.150.12  和 192.168.150.13的内核协议</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo 1  &gt;  &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;eth0&#x2F;arp_ignore </span><br><span class="line">echo 1  &gt;  &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;all&#x2F;arp_ignore </span><br><span class="line">echo 2 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;eth0&#x2F;arp_announce </span><br><span class="line">echo 2 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;all&#x2F;arp_announce </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>3.配置192.168.150.12  和 192.168.150.13环行路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig lo:2 192.168.150.100 netmask 255.255.255.255</span><br></pre></td></tr></table></figure>
<p>4.在 192.168.150.12 和 192.168.150.13中安装 httpd</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install httpd -y</span><br><span class="line">启动  service httpd start</span><br><span class="line">创建主页vi &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html</span><br></pre></td></tr></table></figure>
<p>5在浏览器中输入192.168.150.12:80测试</p>
<p>6.在192.168.150.11 中安装 ipvsadm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install ipvsadm -y</span><br><span class="line">添加进包的规则：ipvsadm -A  -t  192.168.150.100:80  -s rr</span><br><span class="line">添加负载的规则:</span><br><span class="line">ipvsadm -a  -t 192.168.150.100:80  -r  192.168.150.12 -g -w 1</span><br><span class="line">ipvsadm -a  -t 192.168.150.100:80  -r  192.168.150.13 -g -w 1</span><br><span class="line"></span><br><span class="line">查看规则：ipvsadm  -ln</span><br></pre></td></tr></table></figure>
<p>7.验证：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">浏览器访问  192.168.150.100   看到负载  F5属性</span><br><span class="line">192.168.150.11：</span><br><span class="line">	netstat -natp   结论看不到socket连接</span><br><span class="line">192.168.150.12~192.168.150.13:</span><br><span class="line">	netstat -natp   结论看到很多的socket连接</span><br><span class="line">192.168.150.11:</span><br><span class="line">	ipvsadm -lnc    查看偷窥记录本</span><br><span class="line">	TCP 00:57  FIN_WAIT    192.168.150.1:51587 192.168.150.100:80 192.168.150.12:80</span><br><span class="line"></span><br><span class="line">	           FIN_WAIT： 连接过，偷窥了所有的包</span><br><span class="line">	           SYN_RECV： 基本上lvs都记录了，证明lvs没事，一定是后边网络层出问题</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadLocal</title>
    <url>/2021/06/03/ThreadLocal/</url>
    <content><![CDATA[<h3 id="java中的ThreadLocal"><a href="#java中的ThreadLocal" class="headerlink" title="java中的ThreadLocal"></a>java中的ThreadLocal</h3><p><strong>1. ThreadLocal的作用：</strong></p>
<p>ThreadLocal的作用主要是做数据隔离，填充的数据只属于当前线程，变量的数据对别的线程而言是相对隔离的，在多线程环境下，如何防止自己的变量被其它线程篡改。</p>
<p><strong>2. ThreadLocal使用到的场景：</strong></p>
<ol>
<li>Spring采用Threadlocal的方式，来保证单个线程中的数据库操作使用的是同一个数据库连接，同时，采用这种方式可以使业务层使用事务时不需要感知并管理connection对象，通过传播级别，巧妙地管理多个事务配置之间的切换，挂起和恢复。</li>
</ol>
<p><strong>3. ThreadLocal的原理：</strong></p>
<p>其实使用真的很简单，线程进来之后初始化一个可以泛型的ThreadLocal对象，之后这个线程只要在remove之前去get，都能拿到之前set的值，注意这里我说的是remove之前。</p>
<p>他是能做到线程间数据隔离的，所以别的线程使用get（）方法是没办法拿到其他线程的值的</p>
<ul>
<li>以下是set时的源码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadLocal&lt;String&gt; localName = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line">localName.set(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">String name = localName.get();</span><br><span class="line">localName.remove();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">     Thread t = Thread.currentThread();    <span class="comment">//获取当前线程</span></span><br><span class="line">     ThreadLocalMap map = getMap(t);       <span class="comment">//在当前线程中获取ThreadLocalMap对象</span></span><br><span class="line">     <span class="keyword">if</span> (map != <span class="keyword">null</span>)                       <span class="comment">//当前线程中存在ThreadLocalMap对象，直接设置值</span></span><br><span class="line">         map.set(<span class="keyword">this</span>, value);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">         createMap(t, value);              <span class="comment">// 不存在则创建一个为空的map对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们基本上可以找到ThreadLocal数据隔离的真相了，每个线程Thread都维护了自己的threadLocals变量，所以在每个线程创建ThreadLocal的时候，实际上数据是存在自己线程Thread的threadLocals变量里面的，别人没办法拿到，从而实现了隔离。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</span><br><span class="line">          Entry[] tab = table;       <span class="comment">//其实它是把值放到了数组中</span></span><br><span class="line">          <span class="keyword">int</span> len = tab.length;</span><br><span class="line">          <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);  <span class="comment">//根据ThreadLocal对象的hash值，计算到table中的位置</span></span><br><span class="line">        <span class="comment">//拿到ThreadLocal对象中的Entry,如果ThreadLocal对象的Entry不存在，就会在i位置直接 new Entry()</span></span><br><span class="line">         <span class="comment">//如果位置i的不为空，而且key不等于entry，那就找下一个空位置，直到为空为止。</span></span><br><span class="line">          <span class="keyword">for</span> (Entry e = tab[i];                      </span><br><span class="line">               e != <span class="keyword">null</span>;</span><br><span class="line">               e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">              ThreadLocal&lt;?&gt; k = e.get();  </span><br><span class="line"> </span><br><span class="line">              <span class="keyword">if</span> (k == key) &#123;    <span class="comment">// 如果值相等就刷新Entry中的value；</span></span><br><span class="line">                  e.value = value;</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;  <span class="comment">//如果当前位置是空的，就初始化一个Entry对象放在位置i上；</span></span><br><span class="line">                  replaceStaleEntry(key, value, i);</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          tab[i] = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line">          <span class="keyword">int</span> sz = ++size;</span><br><span class="line">          <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">              rehash();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>以下是get时的源码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Entry <span class="title">getEntry</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">         Entry e = table[i];  </span><br><span class="line">        <span class="comment">// 如果当前线程在数组中存在直接返回 否则就直接找下一个</span></span><br><span class="line">         <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == key)</span><br><span class="line">             <span class="keyword">return</span> e;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">             <span class="keyword">return</span> getEntryAfterMiss(key, i, e);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Entry <span class="title">getEntryAfterMiss</span><span class="params">(ThreadLocal&lt;?&gt; key, <span class="keyword">int</span> i, Entry e)</span> </span>&#123;</span><br><span class="line">      Entry[] tab = table;</span><br><span class="line">      <span class="keyword">int</span> len = tab.length;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">          ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">          <span class="keyword">if</span> (k == key)</span><br><span class="line">              <span class="keyword">return</span> e;</span><br><span class="line">          <span class="keyword">if</span> (k == <span class="keyword">null</span>)</span><br><span class="line">              expungeStaleEntry(i);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">              i = nextIndex(i, len);</span><br><span class="line">          e = tab[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><strong>4. ThreadLocal 数据共享</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ThreadLocal threadLocal = <span class="keyword">new</span> InheritableThreadLocal();</span><br><span class="line">        threadLocal.set(<span class="string">&quot;帅得一匹&quot;</span>);</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  输出  &quot;</span> + threadLocal.get());</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        t.join();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  输出  &quot;</span> + threadLocal.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在子线程中我是能够正常输出那一行，这也就是父子线程数据传递的</p>
<p>**5. ThreadLocal内存溢出问题 **</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">            <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">            Object value;</span><br><span class="line"></span><br><span class="line">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">                <span class="keyword">super</span>(k);   <span class="comment">//key 为弱引用</span></span><br><span class="line">                value = v;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ThreadLocal在保存的时候会把自己当做Key存在ThreadLocalMap中，正常情况应该是key和value都应该被外界强引用才对，但是现在key被设计成WeakReference弱引用了。</p>
<p>这就导致了一个问题，ThreadLocal在没有外部强引用时，发生GC时会被回收，如果创建ThreadLocal的线程一直持续运行，那么这个Entry对象中的value就有可能一直得不到回收，发生内存泄露。</p>
<p>就比如线程池里面的线程，线程都是复用的，那么之前的线程实例处理完之后，出于复用的目的线程依然存活，所以，ThreadLocal设定的value值被持有，导致内存泄露。</p>
<p>按照道理一个线程使用完，ThreadLocalMap是应该要被清空的，但是现在线程被复用了。</p>
<p><strong><code>得在使用的最后用remove把值清空就好了</code></strong></p>
</blockquote>
<p><strong>ThreadLocal为什么要把key设计为弱引用？ 请看垃圾回收机制</strong></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java基础知识</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>http协议</title>
    <url>/2021/03/21/http%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h3><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p>
<p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p>
<p>HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。</p>
<p>HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p>
<h4 id="http协议的特点"><a href="#http协议的特点" class="headerlink" title="http协议的特点"></a>http协议的特点</h4><p>1、简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</p>
<p>2、灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</p>
<p>3.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p>
<p>4.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。<br>5、支持B/S及C/S模式。</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>java 中的四大引用</title>
    <url>/2021/06/02/java%20%E4%B8%AD%E7%9A%84%E5%9B%9B%E5%A4%A7%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<h2 id="java-中的四大引用"><a href="#java-中的四大引用" class="headerlink" title="java 中的四大引用"></a>java 中的四大引用</h2><p><strong>1. 强引用：（StrongReference）</strong></p>
<blockquote>
<p>强引用是使用最普遍的引用。如果一个对象具有强引用，那垃圾回收器绝不会回收它。当内存空间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足的问题。 ps：强引用其实也就是我们平时<code>A a = new A()</code>这个意思。</p>
</blockquote>
<p><strong>2. 软引用（SoftReference）</strong></p>
<blockquote>
<p>如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存（下文给出示例）。<br>软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。<br><code>String str = new String(&quot;abc&quot;); SoftReference&lt;String&gt; softReference = new SoftReference&lt;String&gt;(str);</code></p>
</blockquote>
<p><strong>3. 弱引用（WeakReference）</strong></p>
<blockquote>
<p>弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。<br>弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。<br><code>String str = new String(&quot;哈哈哈哈&quot;); WeakReference wr = new  WeakReference(str);</code></p>
</blockquote>
<p><strong>4. 虚引用（PhantomReference）</strong></p>
<blockquote>
<p>“虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。<br>虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。<br><code>ReferenceQueue rq =  new  ReferenceQueue();        PhantomReference pr =  new  PhantomReference(str,rq);</code></p>
</blockquote>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java基础知识</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>java8之Stream</title>
    <url>/2020/11/28/java8%E4%B9%8BStream/</url>
    <content><![CDATA[<h3 id="1-Stream介绍"><a href="#1-Stream介绍" class="headerlink" title="1. Stream介绍"></a>1. Stream介绍</h3><p>Stream不是集合元素，它不是数据结构并不保存数据，它是有关算法和计算的，它更像一个高级版本的Iterator。原始版本的Iterator，用户只能显式地一个一个遍历元素并对其执行某些操作；高级版本的Stream，用户只要给出需要对其包含的元素执行什么操作，比如，“过滤掉长度大于 10 的字符串”、“获取每个字符串的首字母”等，Stream会隐式地在内部进行遍历，做出相应的数据转换。Stream就如同一个迭代器（Iterator），单向，不可往复，数据只能遍历一次，遍历过一次后即用尽了。<br>在Java8 中增加了Stream API ，简化了串行或者并行的大批量的操作 。<br>Stream中的数据元素可以是对象引用，或者基本数据类型的值： int  long double  </p>
<h3 id="2-Stream的具体用法"><a href="#2-Stream的具体用法" class="headerlink" title="2. Stream的具体用法"></a>2. Stream的具体用法</h3><h4 id="1-Stream-常用的创建方法"><a href="#1-Stream-常用的创建方法" class="headerlink" title="1. Stream 常用的创建方法"></a>1. Stream 常用的创建方法</h4><pre><code>   ***使用Collection下的 stream() 和 parallelStream() 方法***　　
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">       </span><br><span class="line"> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Returns a sequential &#123;@code Stream&#125; with this collection as its source.(返回一个顺序的流，将此集合作为其源。)</span></span><br><span class="line">  Stream&lt;String&gt; stream = list.stream(); </span><br><span class="line"> <span class="comment">//Returns a possibly parallel &#123;@code Stream&#125; with this collection as its (返回一个可能是并行的流，其中包含此集合)</span></span><br><span class="line">  Stream&lt;String&gt; parallelStream = list.parallelStream();</span><br></pre></td></tr></table></figure>
<ul>
<li><em><strong>使用Arrays 中的 stream() 方法，将数组转成流</strong></em></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] nums = <span class="keyword">new</span> Integer[<span class="number">10</span>];</span><br><span class="line">Stream&lt;Integer&gt; stream = Arrays.stream(nums);</span><br></pre></td></tr></table></figure>

<ul>
<li><em><strong>使用Stream中的静态方法：of()、iterate()、generate()</strong></em></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">Stream&lt;Integer&gt; stream2 = Stream.iterate(<span class="number">0</span>, (x) -&gt; x + <span class="number">2</span>).limit(<span class="number">6</span>);</span><br><span class="line">stream2.forEach(System.out::println); <span class="comment">// 0 2 4 6 8 10</span></span><br><span class="line"></span><br><span class="line">Stream&lt;Double&gt; stream3 = Stream.generate(Math::random).limit(<span class="number">2</span>);</span><br><span class="line">stream3.forEach(System.out::println);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p><em><strong>使用 BufferedReader.lines() 方法，将每行内容转成流</strong></em></p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;D:\\test_stream.txt&quot;</span>));</span><br><span class="line">Stream&lt;String&gt; lineStream = reader.lines();</span><br><span class="line">lineStream.forEach(System.out::println);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p><em><strong>使用 Pattern.splitAsStream() 方法，将字符串分隔成流</strong></em></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pattern pattern = Pattern.compile(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stringStream = pattern.splitAsStream(<span class="string">&quot;a,b,c,d&quot;</span>);</span><br><span class="line">stringStream.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h4 id="2-Stream的中间操作"><a href="#2-Stream的中间操作" class="headerlink" title="2 . Stream的中间操作"></a>2 . Stream的中间操作</h4><ul>
<li><em><strong>筛选与切片</strong></em></li>
</ul>
<p>​       filter：过滤流中的某些元素<br>　　 limit(n)：获取n个元素<br>　　 skip(n)：跳过n个元素，配合limit(n)可实现分页<br>　　 distinct：通过流中元素的 hashCode() 和 equals() 去除重复元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">14</span>);</span><br><span class="line">  </span><br><span class="line">Stream&lt;Integer&gt; newStream = stream.filter(s -&gt; s &gt; <span class="number">5</span>) <span class="comment">//6 6 7 9 8 10 12 14 14</span></span><br><span class="line">.distinct() <span class="comment">//6 7 9 8 10 12 14</span></span><br><span class="line">.skip(<span class="number">2</span>) <span class="comment">//9 8 10 12 14</span></span><br><span class="line">.limit(<span class="number">2</span>); <span class="comment">//9 8</span></span><br><span class="line">newStream.forEach(System.out::println);</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Student&gt; stuList = stuList();</span><br><span class="line"> </span><br><span class="line">	<span class="comment">// 需要筛选的条件：从stuList中筛选出年龄为21和22的学生</span></span><br><span class="line">	List&lt;Integer&gt; ageList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">	ageList.add(<span class="number">21</span>);</span><br><span class="line">	ageList.add(<span class="number">22</span>);</span><br><span class="line"> </span><br><span class="line">	<span class="comment">// JDK1.8提供了lambda表达式， 可以从stuList中过滤出符合条件的结果。</span></span><br><span class="line">	<span class="comment">// 定义结果集</span></span><br><span class="line">	List&lt;Student&gt; result = <span class="keyword">null</span>;</span><br><span class="line">	result = stuList.stream()</span><br><span class="line">			.filter((Student s) -&gt; ageList.contains(s.getAge()))</span><br><span class="line">			.collect(Collectors.toList());</span><br><span class="line">   </span><br><span class="line">	<span class="comment">// 打印原有stuList集合中的数据</span></span><br><span class="line">	System.out.println(<span class="string">&quot;原有stuList集合中的数据&quot;</span>);</span><br><span class="line">	stuList.forEach((Student s) -&gt; System.out.println(s.getName() + <span class="string">&quot;---&gt;&quot;</span> + s.getAge()));</span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<ul>
<li><em><strong>映射</strong></em></li>
</ul>
<p>​       map：接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。<br>　   flatMap：接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;a,b,c&quot;</span>, <span class="string">&quot;1,2,3&quot;</span>);</span><br><span class="line">  </span><br><span class="line"><span class="comment">//将每个元素转成一个新的且不带逗号的元素</span></span><br><span class="line">Stream&lt;String&gt; s1 = list.stream().map(s -&gt; s.replaceAll(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">s1.forEach(System.out::println); <span class="comment">// abc 123</span></span><br><span class="line">  </span><br><span class="line">Stream&lt;String&gt; s3 = list.stream().flatMap(s -&gt; &#123;</span><br><span class="line"><span class="comment">//将每个元素转换成一个stream</span></span><br><span class="line">String[] split = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; s2 = Arrays.stream(split);</span><br><span class="line"><span class="keyword">return</span> s2;</span><br><span class="line">&#125;);</span><br><span class="line">s3.forEach(System.out::println); <span class="comment">// a b c 1 2 3</span></span><br></pre></td></tr></table></figure>

<ul>
<li><em><strong>排序</strong></em> </li>
</ul>
<p>​        sorted()：自然排序，流中元素需实现Comparable接口<br>　　sorted(Comparator com)：定制排序，自定义Comparator排序器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;ff&quot;</span>, <span class="string">&quot;dd&quot;</span>);</span><br><span class="line"><span class="comment">//String 类自身已实现Compareable接口</span></span><br><span class="line">list.stream().sorted().forEach(System.out::println);<span class="comment">// aa dd ff</span></span><br><span class="line">  </span><br><span class="line">Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>);</span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;bb&quot;</span>, <span class="number">20</span>);</span><br><span class="line">Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;aa&quot;</span>, <span class="number">30</span>);</span><br><span class="line">Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;dd&quot;</span>, <span class="number">40</span>);</span><br><span class="line">List&lt;Student&gt; studentList = Arrays.asList(s1, s2, s3, s4);</span><br><span class="line">  </span><br><span class="line"><span class="comment">//自定义排序：先按姓名升序，姓名相同则按年龄升序</span></span><br><span class="line">studentList.stream().sorted(</span><br><span class="line">(o1, o2) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (o1.getName().equals(o2.getName())) &#123;</span><br><span class="line"><span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">).forEach(System.out::println);　</span><br></pre></td></tr></table></figure>
<ul>
<li><em><strong>消费</strong></em></li>
</ul>
<p>　　peek：如同于map，能得到流中的每一个元素。但map接收的是一个Function表达式，有返回值；而peek接收的是Consumer表达   式，没有返回值。</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>);</span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;bb&quot;</span>, <span class="number">20</span>);</span><br><span class="line">List&lt;Student&gt; studentList = Arrays.asList(s1, s2);</span><br><span class="line">  </span><br><span class="line">studentList.stream()</span><br><span class="line">.peek(o -&gt; o.setAge(<span class="number">100</span>))</span><br><span class="line">.forEach(System.out::println);</span><br><span class="line">  </span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line">Student&#123;name=<span class="string">&#x27;aa&#x27;</span>, age=<span class="number">100</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">&#x27;bb&#x27;</span>, age=<span class="number">100</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-Stream的终止操作-常用函数"><a href="#3-Stream的终止操作-常用函数" class="headerlink" title="3. Stream的终止操作 (常用函数)"></a>3. Stream的终止操作 (常用函数)</h4><ul>
<li><em><strong>匹配 聚合操作</strong></em></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">boolean</span> allMatch = list.stream().allMatch(e -&gt; e &gt; <span class="number">10</span>); <span class="comment">//false</span></span><br><span class="line"><span class="keyword">boolean</span> noneMatch = list.stream().noneMatch(e -&gt; e &gt; <span class="number">10</span>); <span class="comment">//true</span></span><br><span class="line"><span class="keyword">boolean</span> anyMatch = list.stream().anyMatch(e -&gt; e &gt; <span class="number">4</span>); <span class="comment">//true</span></span><br><span class="line">  </span><br><span class="line">Integer findFirst = list.stream().findFirst().get(); <span class="comment">//1</span></span><br><span class="line">Integer findAny = list.stream().findAny().get(); <span class="comment">//1</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">long</span> count = list.stream().count(); <span class="comment">//5</span></span><br><span class="line">Integer max = list.stream().max(Integer::compareTo).get(); <span class="comment">//5</span></span><br><span class="line">Integer min = list.stream().min(Integer::compareTo).get(); <span class="comment">//1　</span></span><br></pre></td></tr></table></figure>

<ul>
<li><em><strong>规约操作(reduce)</strong></em></li>
</ul>
<p> 三个重载的方法：</p>
<p>  1.Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator);</p>
<p>  2.T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</p>
<p>  3.&lt;U&gt; U reduce(U identity, BiFunction&lt;U, ? super T, U&gt; accumulator, BinaryOperator&lt;U&gt; combiner);用在流并发操作的时候，将每个线程前两个参数形成的结果result集合并为一个。所以第三个参数是一个BinaryOperator函数接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//reduce(String identity, BinaryOperator&lt;String&gt; accumulator) 第一个参数相当于起始值 ，第二个参数是二元运算函数接口</span></span><br><span class="line">String s1 = custs.stream().map(Cust::getCustName).reduce(<span class="string">&quot;&quot;</span>, (x,y)-&gt;x+<span class="string">&quot;,&quot;</span>+y).replaceFirst(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">System.out.println(s1);</span><br><span class="line">		</span><br><span class="line"><span class="comment">//reduce(BinaryOperator&lt;String&gt; accumulator) 参数是二元运算函数接口，因为没有给默认值，所以为了避免使用时空指针异常，返回的是Optional</span></span><br><span class="line">Optional&lt;String&gt; opt = custs.stream().map(Cust::getCustName).reduce((x,y)-&gt;x+<span class="string">&quot;,&quot;</span>+y);</span><br><span class="line">String s2 = opt.get().replaceFirst(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><em><strong>收集操作</strong></em><br><em><strong>collect:</strong></em> 接收一个Collector实例，将流中元素收集成另外一个数据结构。<br><em><strong>Collector&lt;T, A, R&gt;:</strong></em> 是一个接口，有以下5个抽象方法：<br>***Supplier&lt;A&gt; supplier():***创建一个结果容器A<br>***BiConsumer&lt;A, T&gt; accumulator():***消费型接口，第一个参数为容器A，第二个参数为流中元素T。<br>***BinaryOperator&lt;A&gt; combiner():***函数接口，该参数的作用跟上一个方法(reduce)中的combiner  参数一样，将并行流中各 个子进程          的运行结果(accumulator函数操作后的容器A)进行合并。<br>***Function&lt;A, R&gt; finisher():***函数式接口，参数为：容器A，返回类型为：collect方法最终想要的结果R。<br><em><strong>Set&lt;Characteristics&gt; characteristics():</strong></em>  返回一个不可变的Set集合，用来表明该Collector的特征。有以下三个特征：<br>***CONCURRENT:***表示此收集器支持并发。<br>***UNORDERED:***表示该收集操作不会保留流中元素原有的顺序。<br>***IDENTITY_FINISH:***表示finisher参数只是标识而已，可忽略。</li>
</ul>
<p><em><strong>Collector 工具库：Collectors</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;bb&quot;</span>, <span class="number">20</span>,<span class="number">2</span>);</span><br><span class="line">Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;cc&quot;</span>, <span class="number">10</span>,<span class="number">3</span>);</span><br><span class="line">List&lt;Student&gt; list = Arrays.asList(s1, s2, s3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//装成list</span></span><br><span class="line">List&lt;Integer&gt; ageList = list.stream().map(Student::getAge).collect(Collectors.toList()); <span class="comment">// [10, 20, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//转成set</span></span><br><span class="line">Set&lt;Integer&gt; ageSet = list.stream().map(Student::getAge).collect(Collectors.toSet()); <span class="comment">// [20, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//转成map,注:key不能相同，否则报错</span></span><br><span class="line">Map&lt;String, Integer&gt; studentMap = list.stream().collect(Collectors.toMap(Student::getName, Student::getAge)); <span class="comment">// &#123;cc=10, bb=20, aa=10&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//转成map 如何key相同 是否覆盖  (oldVal ,newVal)-&gt;newVal ? oldVal</span></span><br><span class="line"> Map&lt;String, Integer&gt; studentMap = list.stream().collect(Collectors.toMap(Student::getName, Student::getAge, (oldVal ,newVal)-&gt;newVal)); </span><br><span class="line"></span><br><span class="line"><span class="comment">//转为 LinkedHashMap   (LinkedHashMap::new)</span></span><br><span class="line">LinkedHashMap&lt;String, Integer&gt; collect = list.stream().collect(Collectors.toMap(Student::getName, Student::getAge, (oldVal, newVal) -&gt; newVal, LinkedHashMap::<span class="keyword">new</span>));<span class="comment">// &#123;cc=10, bb=20, aa=10&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串分隔符连接</span></span><br><span class="line">String joinName = list.stream().map(Student::getName).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;(&quot;</span>, <span class="string">&quot;)&quot;</span>)); <span class="comment">// (aa,bb,cc)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//聚合操作</span></span><br><span class="line"><span class="comment">//1.学生总数</span></span><br><span class="line">Long count = list.stream().collect(Collectors.counting()); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">//2.最大年龄 (最小的minBy同理)</span></span><br><span class="line">Integer maxAge = list.stream().map(Student::getAge).collect(Collectors.maxBy(Integer::compare)).get(); <span class="comment">// 20</span></span><br><span class="line"><span class="comment">//3.所有人的年龄</span></span><br><span class="line">Integer sumAge = list.stream().collect(Collectors.summingInt(Student::getAge)); <span class="comment">// 40</span></span><br><span class="line"><span class="comment">//4.平均年龄</span></span><br><span class="line">Double averageAge = list.stream().collect(Collectors.averagingDouble(Student::getAge)); <span class="comment">// 13.333333333333334</span></span><br><span class="line"><span class="comment">// 带上以上所有方法</span></span><br><span class="line">DoubleSummaryStatistics statistics = list.stream().collect(Collectors.summarizingDouble(Student::getAge));</span><br><span class="line">System.out.println(<span class="string">&quot;count:&quot;</span> + statistics.getCount() + <span class="string">&quot;,max:&quot;</span> + statistics.getMax() + <span class="string">&quot;,sum:&quot;</span> + statistics.getSum() + <span class="string">&quot;,average:&quot;</span> + statistics.getAverage());</span><br><span class="line"></span><br><span class="line"><span class="comment">//分组</span></span><br><span class="line">Map&lt;Integer, List&lt;Student&gt;&gt; ageMap = list.stream().collect(Collectors.groupingBy(Student::getAge));</span><br><span class="line"><span class="comment">//多重分组,先根据类型分再根据年龄分</span></span><br><span class="line">Map&lt;Integer, Map&lt;Integer, List&lt;Student&gt;&gt;&gt; typeAgeMap = list.stream().collect(Collectors.groupingBy(Student::getType, Collectors.groupingBy(Student::getAge)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//分区</span></span><br><span class="line"><span class="comment">//分成两部分，一部分大于10岁，一部分小于等于10岁</span></span><br><span class="line">Map&lt;Boolean, List&lt;Student&gt;&gt; partMap = list.stream().collect(Collectors.partitioningBy(v -&gt; v.getAge() &gt; <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//规约</span></span><br><span class="line">Integer allAge = list.stream().map(Student::getAge).collect(Collectors.reducing(Integer::sum)).get(); <span class="comment">//40　</span></span><br></pre></td></tr></table></figure>

<h3 id="3-补充"><a href="#3-补充" class="headerlink" title="3.补充"></a>3.补充</h3><p>​     <em><strong>并行流：</strong></em>并行流就是把一个内容分成多个数据库卡，并用不同的线程分别处理每个数据块的流  </p>
<p>​    <em><strong>顺序流：</strong></em> 单线程执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * parallel（）  开启并行流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Instant start = Instant.now();</span><br><span class="line">LongStream.rangeClosed(<span class="number">1</span>,<span class="number">10000000000L</span>).parallel().reduce(<span class="number">0</span>,Long::sum);</span><br><span class="line">System.out.println(<span class="string">&quot;系统执行时间:&quot;</span>+ Duration.between(start,Instant.now()).toMillis());</span><br></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sequential()  开启顺序流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Instant start1 = Instant.now();</span><br><span class="line">LongStream.rangeClosed(<span class="number">1</span>,<span class="number">10000000000L</span>).sequential().reduce(<span class="number">0</span>,Long::sum);</span><br><span class="line">System.out.println(<span class="string">&quot;系统执行时间:&quot;</span>+Duration.between(start1,Instant.now()).toMillis());</span><br></pre></td></tr></table></figure>

<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>​     <em><strong>并行流 ：</strong></em>  </p>
<p>​               使用并行流并不是一定会提高效率，因为jvm对数据进行切片和切换线程也是需要时间的。</p>
<p>​               所以数据量越小，串行操作越快；数据量越大，并行操作效果越好。</p>
<p>​              并行流内部使用了默认的ForkJoinPool线程池，所以它默认的线程数量就是处理器的数量，通过它可以得到这个值。<br>​              <em><strong>System.out.println(Runtime.getRuntime().availableProcessors())。</strong></em></p>
<p>​                通过这个方法可以修改这个值，而且这个还是全局属性，不过建议一般不修改</p>
<p>​               <em><strong>System.setProperty(“java.util.concurrent.ForkJoinPool.common.parallelism”, “12”);</strong></em></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java基础知识</category>
      </categories>
      <tags>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title>java8之Stream补充</title>
    <url>/2021/03/16/java8%E4%B9%8BStream%E8%A1%A5%E5%85%85/</url>
    <content><![CDATA[<h3 id="java8之Stream补充"><a href="#java8之Stream补充" class="headerlink" title="java8之Stream补充"></a>java8之Stream补充</h3><p><strong>.findFirst()：</strong>  返回流中的第一个元素<br><strong>.findAny()</strong>   返回Stream中的任何元素<br><strong>.orElse(null)</strong>  表示如果一个都没找到返回null. 【orElse()中可以塞默认值。如果找不到就会返回orElse中你自己设置的默认值。】</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java基础知识</category>
      </categories>
      <tags>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title>java中的ThreadPoolExecutor</title>
    <url>/2021/06/04/java%E4%B8%AD%E7%9A%84ThreadPoolExecutor/</url>
    <content><![CDATA[<h3 id="java中的ThreadPoolExecutor"><a href="#java中的ThreadPoolExecutor" class="headerlink" title="java中的ThreadPoolExecutor"></a>java中的ThreadPoolExecutor</h3><p><strong>1. 为什么要使用线程池</strong></p>
<blockquote>
<ol>
<li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li>
<li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li>
<li>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。但是要做到合理的利用线程池，必须对其原理了如指掌。</li>
</ol>
</blockquote>
<p><strong>2. ThreadPoolExecutor中的构造器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                             TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                             BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                             ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                             RejectedExecutionHandler handler)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>corePoolSize（基本大小）:指定了线程池中的核心线程数量， 也就是线程池的目标大小。只有在工作队列满了的情况下才会创建超出这个数量的线程。</strong></p>
</blockquote>
<blockquote>
<p><strong>maximumPoolSize:指定了线程池中的总线程数量，为了保证系统资源有控制的消耗。</strong></p>
</blockquote>
<blockquote>
<p><strong>keepAliveTime:当线程池中空闲线程数量超过corePoolSize时，多余的线程会在多长时间内被销毁；</strong></p>
</blockquote>
<blockquote>
<p><strong>unit:keepAliveTime的单位</strong></p>
</blockquote>
<blockquote>
<p><strong>workQueue:任务队列，被添加到线程池中，但尚未被执行的任务；它一般分为直接提交队列、有界任务队列、无界任务队列、优先任务队列几种；</strong></p>
</blockquote>
<blockquote>
<p><strong>threadFactory:线程工厂，用于创建线程，一般用于给线程命名；</strong></p>
</blockquote>
<blockquote>
<p><strong>handler:拒绝策略；当任务太多来不及处理时，如何拒绝任务；</strong></p>
</blockquote>
<p>**3.  ThreadPoolExecutor中的构造器参数的额外说明 **</p>
<blockquote>
<p><strong>1.刚刚创建ThreadPoolExecutor的时候，线程并不会 立即启动，而是要等到有任务提交时才会启动。如果预先调用了prestartCoreThread()/prestartAllCoreThreads()，则会事先启动核心线程。</strong></p>
<p><strong>2. 考虑到keepAliveTime()和allowCoreThreadTimeOut()超市参数的影响，没有任务或者没有足够任务执行的时候，线程池中运行线程的数量（线程池的大小）小于等于corePoolSize。</strong></p>
<p><strong>3. 由于maximumPoolSize可以在运行中通过setMaximumPoolSize()来设置，所以可以通过largestPoolSize()方法来获得线程池曾经运行过的最大线程数量，来评估当前maximumPoolSize设置是否合适。</strong></p>
<p><strong>4. 对于核心线程，默认一直保留存活，如果将allowCoreThreadTimeOut设置为true，则核心线程也接受keepAliveTime的约束。</strong></p>
</blockquote>
<p><strong>4. 关于BlockingQueue的详细说明：</strong></p>
<blockquote>
<p>此BlockingQueue的实现有：<br>-&gt;ArrayBlockingQueue:基于数组结构的有届阻塞队列，FIFO<br>-&gt;LinkedBlockingQueue:基于链表的阻塞队列，FIFO。吞吐量大于上者。静态工厂方法Executors.newFixedThreadPool()使用了这个队列<br>-&gt;SynchronousQueue:一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量高于LinkedBlockingQueue.静态工厂方法Executors.newCachedThreadPool()使用了这个队列。<br>-&gt;PriorityBlockingQueue:一个具有优先级的无限阻塞队列。</p>
</blockquote>
<p><strong>5. 关于RejectedExecutionHandler的详细说明：</strong></p>
<blockquote>
<p>当队列和线程池都满了之后的饱和策略。默认情况下是AbortPolicy,表示无法处理新任务时抛出异常。以下是JDK1.5提供的四种策略：<br>-&gt;AbortPolicy:直接抛出异常<br>-&gt;CallerRunsPolicy:只用调用者所在的线程来运行任务。<br>-&gt;DiscardOldestPolicy:丢弃队列里最近一个任务，并执行当前任务。<br>-&gt;DiscardPolicy:不处理，丢弃掉。<br>-&gt;也可以根据应用场景需要来实现RejectedExecutionHandler接口自定义策略。如记录日志或持久化不能处理的任务。</p>
</blockquote>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java基础知识</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>java中的位和位移运算符</title>
    <url>/2021/04/05/java%E4%B8%AD%E7%9A%84%E4%BD%8D%E5%92%8C%E4%BD%8D%E7%A7%BB%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h3 id="位和位移运算符"><a href="#位和位移运算符" class="headerlink" title="位和位移运算符"></a>位和位移运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>如果相对应的位数都是1，则结果为1，否则为0</td>
<td>(1100&amp;1101) = 1100</td>
</tr>
<tr>
<td>|</td>
<td>如果对应的位数有一个是1，则结果是1，否则为0</td>
<td>(1100&amp;1101) = 1101</td>
</tr>
<tr>
<td>^</td>
<td>如果相对应 位的值相同则取0，否则取1</td>
<td>(1100&amp;1101) = 0001</td>
</tr>
<tr>
<td>~</td>
<td>按位取反运算符，反转操作数的每一位，即0变成1，1变成0</td>
<td>~ 1100 = 0011</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>按位左移运算符，按照指定的位数左移,不分正负数，低位补0,带符号位移，高位移出，低位补0，移动位数超过该类型的最大位数，则进行取模，如对Integer型左移34位，实际上只移动了两位。左移一位相当于乘以2的一次方，左移n位相当于乘以2的n次方。</td>
<td>1100 &lt;&lt; 1 = 1000</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>按位右移运算符。按照指定的位数右移并以符号位填空 ,如果该数为正，则高位补0，若为负数，则高位补1；带符号右移</td>
<td>1100 &gt;&gt;1 = 1110</td>
</tr>
<tr>
<td>&gt;&gt;&gt;</td>
<td>按位右移补0操作,按照指定的位数右移并以零填空位,无符号右移，也叫逻辑右移，即若该数为正，则高位补0，而若该数为负数，则右移后高位同样补0；不带符号右移</td>
<td>1100 &gt;&gt;&gt; 1 =  0110</td>
</tr>
</tbody></table>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java基础知识</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>java好的开源项目</title>
    <url>/2021/01/08/java%E5%A5%BD%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h4 id="好的开源项目"><a href="#好的开源项目" class="headerlink" title="好的开源项目"></a>好的开源项目</h4><ul>
<li><strong>项目简介</strong></li>
</ul>
<p>一个基于 Spring Boot 2.1.0 、 Spring Boot Jpa、 JWT、Spring Security、Redis、Vue的前后端分离的后台管理系统</p>
<p>  <a href="https://el-admin.vip/">开发文档</a></p>
<p> <a href="https://doc.el-admin.xin/">备用文档</a></p>
<p><strong>账号密码：</strong> <code>admin / 123456</code></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>随笔记录</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>java对象结构</title>
    <url>/2021/05/24/java%E5%AF%B9%E8%B1%A1%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="java对象结构"><a href="#java对象结构" class="headerlink" title="java对象结构"></a>java对象结构</h1><p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/juc/%E5%AF%B9%E8%B1%A1%E7%BB%93%E6%9E%84.png" alt="对象布局"></p>
<p><strong>HotSpot虚拟机</strong> markOop.cpp 中的 C++ 代码注释片段，描述了 64bits 下 mark-word 的存储状态，也就是如上图结构示意。</p>
<p>markOop.cpp 源码地址： <a href="http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/share/vm/oops/markOop.hpp">jdk8/hotspot/file/vm/oops/markOop.hpp</a></p>
<p><strong>HotSpot虚拟机中</strong>，对象在内存中存储的布局可以分为三块区域：<code>对象头（Header）</code>、<code>实例数据（Instance Data）</code>和<code>对齐填充（Padding）</code>。</p>
<ul>
<li>mark-word：对象标记字段占4个字节，用于存储一些列的标记位，比如：哈希值、轻量级锁的标记位，偏向锁标记位、分代年龄等。</li>
<li>Klass Pointer：Class对象的类型指针，Jdk1.8默认开启指针压缩后为4字节，关闭指针压缩（<code>-XX:-UseCompressedOops</code>）后，长度为8字节。其指向的位置是对象对应的Class对象（其对应的元数据对象）的内存地址。</li>
<li>对象实际数据：包括对象的所有成员变量，大小由各个成员变量决定，比如：byte占1个字节8比特位、int占4个字节32比特位。</li>
<li>对齐：最后这段空间补全并非必须，仅仅为了起到占位符的作用。由于HotSpot虚拟机的内存管理系统要求对象起始地址必须是8字节的整数倍，所以对象头正好是8字节的倍数。因此当对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。</li>
</ul>
<p><strong>另外</strong>，在mark-word锁类型标记中，无锁，偏向锁，轻量锁，重量锁，以及GC标记，5种类中没法用2比特标记（2比特最终有4种组合<code>00</code>、<code>01</code>、<code>10</code>、<code>11</code>），所以无锁、偏向锁，前又占了一位偏向锁标记。最终：001为无锁、101为偏向锁。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.openjdk.jol/jol-core --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jol-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class A &#123;</span><br><span class="line">    int i &#x3D; 3;</span><br><span class="line">    int i1 &#x3D; 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        A a &#x3D; new A();</span><br><span class="line">&#x2F;&#x2F;        Object o &#x3D; new Object();</span><br><span class="line">&#x2F;&#x2F;        System.out.println(o + &quot; 十六进制哈希：&quot; + Integer.toHexString(o.hashCode()));</span><br><span class="line">&#x2F;&#x2F;        System.out.println(ClassLayout.parseInstance(a).toPrintable());</span><br><span class="line">        System.out.println(ClassLayout.parseInstance(a).toPrintable());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.yzw.juc.markWord.A@5cad8086 十六进制哈希：5cad8086</span><br><span class="line">com.yzw.juc.markWord.A object internals:</span><br><span class="line"> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>     <span class="number">4</span>        (object header)                           <span class="number">01</span> <span class="number">86</span> <span class="number">80</span> ad (<span class="number">00000001</span> <span class="number">10000110</span> <span class="number">10000000</span> <span class="number">10101101</span>) (-<span class="number">1384086015</span>)</span><br><span class="line">      <span class="number">4</span>     <span class="number">4</span>        (object header)                           5c <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> (<span class="number">01011100</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>) (<span class="number">92</span>)</span><br><span class="line">      <span class="number">8</span>     <span class="number">4</span>        (object header)                           <span class="number">43</span> c1 <span class="number">00</span> f8 (<span class="number">01000011</span> <span class="number">11000001</span> <span class="number">00000000</span> <span class="number">11111000</span>) (-<span class="number">134168253</span>)</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>    <span class="keyword">int</span> A.i                                       <span class="number">3</span></span><br><span class="line">     <span class="number">16</span>     <span class="number">4</span>    <span class="keyword">int</span> A.i1                                      <span class="number">3</span></span><br><span class="line">     <span class="number">20</span>     <span class="number">4</span>        (loss due to the next object alignment)</span><br><span class="line">Instance size: <span class="number">24</span> bytes</span><br><span class="line">Space losses: <span class="number">0</span> bytes internal + <span class="number">4</span> bytes external = <span class="number">4</span> bytes total</span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果</li>
</ul>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/juc/%E5%A4%B4%E5%83%8F%E5%A4%B4%E5%AD%98%E5%82%A8%E9%AA%8C%E8%AF%81.png" alt="验证"></p>
<ul>
<li><p><strong>如上图：</strong> markWord 占8字节   Klass Point占4字节  实际的对象数据占8字节  最后四个字节用于填充对齐</p>
</li>
<li><p><strong>如上图：</strong> 对象的头部也存放了hash,只不过这个哈希值是倒过来的</p>
<p><strong>关于倒过来的问题是大小端存储导致的</strong></p>
<ul>
<li>Big-Endian：高位字节存放于内存的低地址端，低位字节存放于内存的高地址端</li>
<li>Little-Endian：低位字节存放于内存的低地址端，高位字节存放于内存的高地址端</li>
</ul>
</li>
</ul>
<p><strong>markWord结构</strong></p>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/juc/markword%E7%BB%93%E6%9E%84.png" alt="markWord"></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java基础知识</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>java模拟浏览器做文件上传</title>
    <url>/2021/01/02/java%E6%A8%A1%E6%8B%9F%E6%B5%8F%E8%A7%88%E5%99%A8%E5%81%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h4 id="java模拟浏览器做文件上传"><a href="#java模拟浏览器做文件上传" class="headerlink" title="java模拟浏览器做文件上传"></a>java模拟浏览器做文件上传</h4><p><strong>所需jar:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;httpclient.version&gt;4.5.13&lt;/httpclient.version&gt;</span><br><span class="line">    &lt;httpcore.version&gt;4.4.14&lt;/httpcore.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;httpclient.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;httpcore&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.4.14&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;httpmime&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.5.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>代码示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yzw.http;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.mime.HttpMultipartMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.mime.MultipartEntityBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.mime.content.FileBody;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yzw</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">httpClientUploadFile</span><span class="params">(String url, File file, Map&lt;String,String&gt; params)</span> </span>&#123;</span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line">        String result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//每个post参数之间的分隔。随意设定，只要不会和其他的字符串重复即可。</span></span><br><span class="line">        String boundary =<span class="string">&quot;--------------20200103121104567&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HttpPost httpPost = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line">            <span class="comment">//设置请求头</span></span><br><span class="line">            httpPost.setHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;multipart/form-data; boundary=&quot;</span>+boundary);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//HttpEntity builder</span></span><br><span class="line">            MultipartEntityBuilder builder = MultipartEntityBuilder.create();</span><br><span class="line">            <span class="comment">//字符编码</span></span><br><span class="line">            builder.setCharset(Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="comment">//模拟浏览器</span></span><br><span class="line">            builder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);</span><br><span class="line">            <span class="comment">//boundary</span></span><br><span class="line">            builder.setBoundary(boundary);</span><br><span class="line">            <span class="comment">//multipart/form-data</span></span><br><span class="line">            builder.addPart(<span class="string">&quot;uploadimg&quot;</span>,<span class="keyword">new</span> FileBody(file));<span class="comment">//相当于&lt;input name=&#x27;file&#x27; type=&#x27;file&#x27;/&gt;</span></span><br><span class="line">            <span class="comment">// binary</span></span><br><span class="line"><span class="comment">//            builder.addBinaryBody(&quot;name=\&quot;file\&quot;; filename=\&quot;test.txt\&quot;&quot;, new FileInputStream(file), ContentType.MULTIPART_FORM_DATA, file.getName());// 文件流</span></span><br><span class="line">            <span class="comment">//其他参数</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : params.entrySet()) &#123;</span><br><span class="line">                builder.addTextBody(entry.getKey(), entry.getValue() );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//HttpEntity</span></span><br><span class="line">            HttpEntity entity = builder.build();</span><br><span class="line">            httpPost.setEntity(entity);</span><br><span class="line">            <span class="comment">// 执行提交</span></span><br><span class="line">            HttpResponse response = httpClient.execute(httpPost);</span><br><span class="line">            <span class="comment">//响应</span></span><br><span class="line">            HttpEntity responseEntity = response.getEntity();</span><br><span class="line">            <span class="keyword">if</span> (responseEntity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 将响应内容转换为字符串</span></span><br><span class="line">                result = EntityUtils.toString(responseEntity, Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                httpClient.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.err.println(<span class="string">&quot;result&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//main 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        String filePath = <span class="keyword">new</span> String(<span class="string">&quot;C:\\Users\\27184\\Desktop\\项目\\新建文件夹\\的文案.png&quot;</span>);</span><br><span class="line">        <span class="comment">// 把一个普通参数和文件上传给下面这个地址 是一个servlet</span></span><br><span class="line">        String httpPost = <span class="string">&quot;http://1.w2wz.com/upload.php&quot;</span>;</span><br><span class="line">        httpClientUploadFile(httpPost,<span class="keyword">new</span> File(filePath),params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
      <tags>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis相关笔记</title>
    <url>/2020/12/10/mybatis%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="mybatis中inster一条数据后返回数据库自增的主键值"><a href="#mybatis中inster一条数据后返回数据库自增的主键值" class="headerlink" title="mybatis中inster一条数据后返回数据库自增的主键值"></a>mybatis中inster一条数据后返回数据库自增的主键值</h4><ul>
<li>相关sql的写法<ol>
<li> keyProperty=”tid” 对应的是实体映射</li>
<li> keyColumn=”typing_test_id” 对应的是表中的字段自增主键 id</li>
</ol>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&lt;insert id=&quot;insterTypingTest&quot; parameterType=&quot;com.mwt.oes.dto.TypingTestDTO&quot; useGeneratedKeys=&quot;true&quot;                 keyProperty=&quot;tid&quot;  keyColumn=&quot;typing_test_id&quot;&gt;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> typing_test ( title, test_user_role, typing_content_id, start_time, end_time, <span class="keyword">duration</span>,                create_user,create_time, update_time )</span><br><span class="line"> <span class="keyword">VALUES</span></span><br><span class="line">       (<span class="comment">#&#123;typingTestDTO.title&#125;,#&#123;typingTestDTO.userRole&#125;,#&#123;typingTestDTO.typingContentId&#125;,#          &#123;typingTestDTO.startTime&#125;,#&#123;typingTestDTO.endTime&#125;,#&#123;typingTestDTO.duration&#125;,#   &#123;typingTestDTO.createUser&#125;,now(),now())</span></span><br><span class="line">&lt;/<span class="keyword">insert</span>&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>service层的调用写法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insterTypingTest</span><span class="params">(TypingTestDTO typingTestDTO)</span> </span>&#123;</span><br><span class="line">     typingTestMapper.insterTypingTest(typingTestDTO); <span class="comment">//执行完inster语句之后mybatis会自动封装到你的参数对象中</span></span><br><span class="line">     System.out.println(typingTestDTO.getTid())</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql存储过程分割字符串</title>
    <url>/2021/01/07/mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%88%86%E5%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h4 id="mysql存储过程循环分割字符串示例："><a href="#mysql存储过程循环分割字符串示例：" class="headerlink" title="mysql存储过程循环分割字符串示例："></a>mysql存储过程循环分割字符串示例：</h4><p><strong>业务逻辑：</strong> 在sys_menu表中 inster添加菜单数据，在sys_roles_menus表中给菜单分配权限     </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建菜单的存储过程 并为菜单赋权限  默认权限admin roleId = 1   </span></span><br><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">PROCEDURE</span> <span class="string">`kq`</span>(<span class="keyword">IN</span> roleId <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> i <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">declare</span> j <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">  <span class="comment">-- 记录所有的inster 之后的自增主键id	</span></span><br><span class="line">  <span class="keyword">declare</span> k   <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	</span><br><span class="line">  <span class="comment">-- 定义用于分割字符串的变量	</span></span><br><span class="line">  <span class="keyword">declare</span> _next <span class="built_in">TEXT</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">declare</span> _nextlen <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">declare</span> _value <span class="built_in">TEXT</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`sys_menu`</span>(<span class="string">`pid`</span>, <span class="string">`sub_count`</span>, <span class="string">`type`</span>, <span class="string">`title`</span>, <span class="string">`name`</span>, <span class="string">`component`</span>, <span class="string">`menu_sort`</span>, <span class="string">`icon`</span>, <span class="string">`path`</span>, <span class="string">`i_frame`</span>, <span class="string">`cache`</span>, <span class="string">`hidden`</span>, <span class="string">`permission`</span>, <span class="string">`create_by`</span>, <span class="string">`update_by`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>) <span class="keyword">VALUES</span> ( <span class="literal">NULL</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="string">&#x27;人员温度管理&#x27;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">999</span>, <span class="string">&#x27;anq&#x27;</span>, <span class="string">&#x27;kq&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="literal">NULL</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="keyword">now</span>(), <span class="literal">null</span>);</span><br><span class="line"><span class="comment">-- 拿到inster 之后的自增主键id  以下数据依赖它的id</span></span><br><span class="line"><span class="keyword">set</span> i = <span class="keyword">LAST_INSERT_ID</span>();</span><br><span class="line"><span class="comment">-- 记录每一条的主键id k 用于sys_roles_menus表的角色分配</span></span><br><span class="line"><span class="keyword">set</span> k = i; </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`sys_menu`</span>( <span class="string">`pid`</span>, <span class="string">`sub_count`</span>, <span class="string">`type`</span>, <span class="string">`title`</span>, <span class="string">`name`</span>, <span class="string">`component`</span>, <span class="string">`menu_sort`</span>, <span class="string">`icon`</span>, <span class="string">`path`</span>, <span class="string">`i_frame`</span>, <span class="string">`cache`</span>, <span class="string">`hidden`</span>, <span class="string">`permission`</span>, <span class="string">`create_by`</span>, <span class="string">`update_by`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>) <span class="keyword">VALUES</span> (i, <span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;异常记录&#x27;</span>, <span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;kq/error/index&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;Steve-Jobs&#x27;</span>, <span class="string">&#x27;error&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;errorRecord:list&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="keyword">now</span>(), <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">set</span> k = <span class="keyword">CONCAT</span>(k , <span class="string">&#x27;,&#x27;</span> ,<span class="keyword">LAST_INSERT_ID</span>()); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`sys_menu`</span>( <span class="string">`pid`</span>, <span class="string">`sub_count`</span>, <span class="string">`type`</span>, <span class="string">`title`</span>, <span class="string">`name`</span>, <span class="string">`component`</span>, <span class="string">`menu_sort`</span>, <span class="string">`icon`</span>, <span class="string">`path`</span>, <span class="string">`i_frame`</span>, <span class="string">`cache`</span>, <span class="string">`hidden`</span>, <span class="string">`permission`</span>, <span class="string">`create_by`</span>, <span class="string">`update_by`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>) <span class="keyword">VALUES</span> (i, <span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;测温异常 &#x27;</span>, <span class="string">&#x27;temperature&#x27;</span>, <span class="string">&#x27;kq/temperature/index&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;temperature&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;temperatureError:list&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="keyword">now</span>(), <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">set</span> k = <span class="keyword">CONCAT</span>(k , <span class="string">&#x27;,&#x27;</span> ,<span class="keyword">LAST_INSERT_ID</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`sys_menu`</span>( <span class="string">`pid`</span>, <span class="string">`sub_count`</span>, <span class="string">`type`</span>, <span class="string">`title`</span>, <span class="string">`name`</span>, <span class="string">`component`</span>, <span class="string">`menu_sort`</span>, <span class="string">`icon`</span>, <span class="string">`path`</span>, <span class="string">`i_frame`</span>, <span class="string">`cache`</span>, <span class="string">`hidden`</span>, <span class="string">`permission`</span>, <span class="string">`create_by`</span>, <span class="string">`update_by`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>) <span class="keyword">VALUES</span> (i, <span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;出入记录&#x27;</span>, <span class="string">&#x27;inOut&#x27;</span>, <span class="string">&#x27;kq/inOut/index&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;link&#x27;</span>, <span class="string">&#x27;inOut&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;inOutRecord:list&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="keyword">now</span>(), <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">set</span> k = <span class="keyword">CONCAT</span>(k , <span class="string">&#x27;,&#x27;</span> ,<span class="keyword">LAST_INSERT_ID</span>()); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`sys_menu`</span>(<span class="string">`pid`</span>, <span class="string">`sub_count`</span>, <span class="string">`type`</span>, <span class="string">`title`</span>, <span class="string">`name`</span>, <span class="string">`component`</span>, <span class="string">`menu_sort`</span>, <span class="string">`icon`</span>, <span class="string">`path`</span>, <span class="string">`i_frame`</span>, <span class="string">`cache`</span>, <span class="string">`hidden`</span>, <span class="string">`permission`</span>, <span class="string">`create_by`</span>, <span class="string">`update_by`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>) <span class="keyword">VALUES</span> (i, <span class="number">2</span>, <span class="number">1</span>, <span class="string">&#x27;考勤统计&#x27;</span>, <span class="string">&#x27;errorPerson&#x27;</span>, <span class="string">&#x27;kq/errorPerson/index&#x27;</span>, <span class="number">4</span>, <span class="string">&#x27;permission&#x27;</span>, <span class="string">&#x27;errorPerson&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;kqCount:list&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="keyword">now</span>(), <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">set</span> j = <span class="keyword">LAST_INSERT_ID</span>();</span><br><span class="line"><span class="keyword">set</span> k = <span class="keyword">CONCAT</span>(k , <span class="string">&#x27;,&#x27;</span> ,j);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`sys_menu`</span>(<span class="string">`pid`</span>, <span class="string">`sub_count`</span>, <span class="string">`type`</span>, <span class="string">`title`</span>, <span class="string">`name`</span>, <span class="string">`component`</span>, <span class="string">`menu_sort`</span>, <span class="string">`icon`</span>, <span class="string">`path`</span>, <span class="string">`i_frame`</span>, <span class="string">`cache`</span>, <span class="string">`hidden`</span>, <span class="string">`permission`</span>, <span class="string">`create_by`</span>, <span class="string">`update_by`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>) <span class="keyword">VALUES</span> (j, <span class="number">0</span>, <span class="number">2</span>, <span class="string">&#x27;缺勤列表&#x27;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">999</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;notPerson:list&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="keyword">now</span>(), <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">set</span> k = <span class="keyword">CONCAT</span>(k , <span class="string">&#x27;,&#x27;</span> ,<span class="keyword">LAST_INSERT_ID</span>()); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`sys_menu`</span>(<span class="string">`pid`</span>, <span class="string">`sub_count`</span>, <span class="string">`type`</span>, <span class="string">`title`</span>, <span class="string">`name`</span>, <span class="string">`component`</span>, <span class="string">`menu_sort`</span>, <span class="string">`icon`</span>, <span class="string">`path`</span>, <span class="string">`i_frame`</span>, <span class="string">`cache`</span>, <span class="string">`hidden`</span>, <span class="string">`permission`</span>, <span class="string">`create_by`</span>, <span class="string">`update_by`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>) <span class="keyword">VALUES</span> (j, <span class="number">0</span>, <span class="number">2</span>, <span class="string">&#x27;异常列表&#x27;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">999</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;errorPerson:list&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="keyword">now</span>(), <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">set</span> k = <span class="keyword">CONCAT</span>(k , <span class="string">&#x27;,&#x27;</span> ,<span class="keyword">LAST_INSERT_ID</span>()); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- k = &#x27;151,152,153,154,155,156,157&#x27;</span></span><br><span class="line"><span class="comment">-- 循环分割 k 字符串</span></span><br><span class="line">iterator:</span><br><span class="line">LOOP</span><br><span class="line">  IF LENGTH(TRIM(k)) = 0 OR k IS NULL THEN</span><br><span class="line">    LEAVE iterator;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">SET</span> _next = SUBSTRING_INDEX(k,<span class="string">&#x27;,&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">SET</span> _nextlen = <span class="keyword">LENGTH</span>(_next);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">SET</span> _value = <span class="keyword">TRIM</span>(_next);</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 拿到分割好的字符串插入表中</span></span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`sys_roles_menus`</span>(<span class="string">`menu_id`</span>, <span class="string">`role_id`</span>) <span class="keyword">VALUES</span> (_value, roleId );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">SET</span> k = <span class="keyword">INSERT</span>(k,<span class="number">1</span>,_nextlen + <span class="number">1</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用存储过程插入菜单 传入你要分配的角色id   默认admin角色id 是1  </span></span><br><span class="line"><span class="keyword">call</span> kq(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除存储过程</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> kq;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title>springBoot整合 jpa数据源+mybatis数据源</title>
    <url>/2021/03/18/springBoot%E6%95%B4%E5%90%88%20jpa%E6%95%B0%E6%8D%AE%E6%BA%90+mybatis%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
    <content><![CDATA[<h3 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">dynamic:</span></span><br><span class="line">      <span class="attr">primary:</span> <span class="string">toc</span> <span class="comment">#设置默认的数据源或者数据源组,默认值即为master</span></span><br><span class="line">      <span class="attr">strict:</span> <span class="literal">false</span> <span class="comment">#设置严格模式,默认false不启动. 启动后在未匹配到指定数据源时候回抛出异常,不启动会使用默认数据源.</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">admin:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://xx.xx.xx.xx:3306/xx?autoReconnect=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">xx</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">xxxx</span></span><br><span class="line">          <span class="attr">dbcp2:</span></span><br><span class="line">            <span class="attr">min-idle:</span> <span class="number">5</span>             <span class="comment"># 数据库连接池的最小维持连接数</span></span><br><span class="line">            <span class="attr">initial-size:</span> <span class="number">5</span>         <span class="comment"># 初始化连接数</span></span><br><span class="line">            <span class="attr">max-total:</span> <span class="number">5</span>            <span class="comment"># 最大连接数</span></span><br><span class="line">            <span class="attr">max-wait-millis:</span> <span class="number">150</span>    <span class="comment"># 等待连接获取的最大超时时间</span></span><br><span class="line">          <span class="attr">druid:</span></span><br><span class="line">            <span class="comment"># 初始连接数</span></span><br><span class="line">            <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">            <span class="comment"># 最小连接数</span></span><br><span class="line">            <span class="attr">min-idle:</span> <span class="number">10</span></span><br><span class="line">            <span class="comment"># 最大连接数</span></span><br><span class="line">            <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">            <span class="comment"># 获取连接超时时间</span></span><br><span class="line">            <span class="attr">max-wait:</span> <span class="number">5000</span></span><br><span class="line">            <span class="comment"># 连接有效性检测时间</span></span><br><span class="line">            <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">            <span class="comment"># 连接在池中最小生存的时间</span></span><br><span class="line">            <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">            <span class="comment"># 连接在池中最大生存的时间</span></span><br><span class="line">            <span class="attr">max-evictable-idle-time-millis:</span> <span class="number">900000</span></span><br><span class="line">            <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">            <span class="comment"># 检测连接是否有效</span></span><br><span class="line">            <span class="attr">validation-query:</span> <span class="string">select</span> <span class="number">1</span></span><br><span class="line">            <span class="comment"># 配置监控统计</span></span><br><span class="line">            <span class="attr">webStatFilter:</span></span><br><span class="line">              <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">stat-view-servlet:</span></span><br><span class="line">              <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">              <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">              <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">filter:</span></span><br><span class="line">              <span class="attr">stat:</span></span><br><span class="line">                <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">                <span class="comment"># 记录慢SQL</span></span><br><span class="line">                <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">                <span class="attr">slow-sql-millis:</span> <span class="number">1000</span></span><br><span class="line">                <span class="attr">merge-sql:</span> <span class="literal">true</span></span><br><span class="line">              <span class="attr">wall:</span></span><br><span class="line">                <span class="attr">config:</span></span><br><span class="line">                  <span class="attr">multi-statement-allow:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">toc:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://xx.xx.xx.xx:3306/xx?autoReconnect=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">xx</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">xx</span></span><br><span class="line">          <span class="attr">dbcp2:</span></span><br><span class="line">            <span class="attr">min-idle:</span> <span class="number">5</span>             <span class="comment"># 数据库连接池的最小维持连接数</span></span><br><span class="line">            <span class="attr">initial-size:</span> <span class="number">5</span>         <span class="comment"># 初始化连接数</span></span><br><span class="line">            <span class="attr">max-total:</span> <span class="number">5</span>            <span class="comment"># 最大连接数</span></span><br><span class="line">            <span class="attr">max-wait-millis:</span> <span class="number">150</span>    <span class="comment"># 等待连接获取的最大超时时间</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>spring校验注解</title>
    <url>/2021/03/16/spring%E6%A0%A1%E9%AA%8C%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="NotNull-NotBlank和-NotEmpty的区别"><a href="#NotNull-NotBlank和-NotEmpty的区别" class="headerlink" title="@NotNull,@NotBlank和 @NotEmpty的区别"></a>@NotNull,@NotBlank和 @NotEmpty的区别</h3><ul>
<li>@NotEmpty 用在集合上面(不能注释枚举) 对象不能是 null 并且相关对象的 size 大于 0。</li>
<li>@NotBlank用在String上面  String 不能是 null 且去除两端空白字符后的长度(trimmed length)大于 0。</li>
<li>@NotNull用在所有类型上面  对象不能是 null, 但可以是空集(size = 0)。</li>
</ul>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>spring的注解</title>
    <url>/2021/03/16/spring%E7%9A%84%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="NotNull-NotBlank和-NotEmpty的区别"><a href="#NotNull-NotBlank和-NotEmpty的区别" class="headerlink" title="@NotNull,@NotBlank和 @NotEmpty的区别"></a>@NotNull,@NotBlank和 @NotEmpty的区别</h3><ul>
<li>@NotEmpty 用在集合上面(不能注释枚举) 对象不能是 null 并且相关对象的 size 大于 0。</li>
<li>@NotBlank用在String上面  String 不能是 null 且去除两端空白字符后的长度(trimmed length)大于 0。</li>
<li>@NotNull用在所有类型上面  对象不能是 null, 但可以是空集(size = 0)。</li>
</ul>
<h3 id="springMvc-使用LocalDate接收页面请求过来的参数时需要的注解"><a href="#springMvc-使用LocalDate接收页面请求过来的参数时需要的注解" class="headerlink" title="springMvc 使用LocalDate接收页面请求过来的参数时需要的注解"></a>springMvc 使用LocalDate接收页面请求过来的参数时需要的注解</h3><ul>
<li>  @DateTimeFormat(pattern = “yyyy-MM-dd”)</li>
</ul>
<h3 id="Valid与-Validated校验的区别"><a href="#Valid与-Validated校验的区别" class="headerlink" title="@Valid与@Validated校验的区别"></a>@Valid与@Validated校验的区别</h3><ul>
<li><strong>@Valid注解用于校验，所属包为：javax.validation.Valid。</strong><br>首先需要在实体类的相应字段上添加用于充当校验条件的注解，如：@Min,如下代码（age属于Girl类中的属性）：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Min(value = 18,message = &quot;未成年禁止入内&quot;)</span>  </span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br></pre></td></tr></table></figure>

<p>其次在controller层的方法的要校验的参数上添加@Valid注解，并且需要传入BindingResult对象，用于获取校验失败情况下的反馈信息，如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/girls&quot;)</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> Girl <span class="title">addGirl</span><span class="params">(<span class="meta">@Valid</span> Girl girl, BindingResult bindingResult)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(bindingResult.hasErrors())&#123;    					                 	           System.out.println(bindingResult.getFieldError().getDefaultMessage()); </span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">    <span class="keyword">return</span> girlResposity.save(girl);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注: 通常不在这里处理异常, 由统一的exceptioin全局异常处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">violationException</span><span class="params">(MethodArgumentNotValidException exception)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 不带任何参数访问接口,会抛出 BindException</span></span><br><span class="line">        <span class="comment">// 因此，我们只需捕获这个异常，并返回我们设置的 message 即可</span></span><br><span class="line">        String message = exception.getBindingResult().getAllErrors().get(<span class="number">0</span>).getDefaultMessage();</span><br><span class="line">        <span class="keyword">return</span> JsonResult.fail(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>@Validated是@Valid 的一次封装，是Spring提供的校验机制使用。</strong></p>
</li>
<li><p><strong>两者的区别</strong></p>
<p>在检验Controller的入参是否符合规范时，使用@Validated或者@Valid在基本验证功能上没有太多区别。但是在<strong>分组</strong>、<strong>注解地方</strong>、<strong>嵌套验证</strong>等功能上两个有所不同：</p>
<h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><p>@Valid 作为标准JSR-303规范，还没有吸收分组的功能。</p>
<p>@Validated Spring’s JSR-303规范，是标准JSR-303的一个变种, 提供了一个分组功能，可以在入参验证时，根据不同的分组采用不同的验证机制。</p>
<h4 id="注解地方"><a href="#注解地方" class="headerlink" title="注解地方"></a>注解地方</h4><p>@Valid：可以用在方法、构造函数、方法参数和成员属性（字段）上</p>
<p>@Validated：可以用在类型、方法和方法参数上。但是不能用在成员属性（字段）上</p>
<p>两者是否能用于成员属性（字段）上直接影响能否提供嵌套验证的功能。</p>
<h4 id="嵌套验证"><a href="#嵌套验证" class="headerlink" title="嵌套验证"></a>嵌套验证</h4><p>在比较两者嵌套验证时，先说明下什么叫做嵌套验证。比如我们现在有个实体叫做Item：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;id不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Min(value = 1, message = &quot;id必须为正整数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;props不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Size(min = 1, message = &quot;至少要有一个属性&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Prop&gt; props;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Item带有很多属性，属性里面有属性id，属性值id，属性名和属性值，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prop</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;pid不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Min(value = 1, message = &quot;pid必须为正整数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long pid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;vid不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Min(value = 1, message = &quot;vid必须为正整数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long vid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;pidName不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String pidName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;vidName不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String vidName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>属性这个实体也有自己的验证机制，比如属性和属性值id不能为空，属性名和属性值不能为空等。</p>
<p>现在我们有个ItemController接受一个Item的入参，想要对Item进行验证，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/item/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(<span class="meta">@Validated</span> Item item, BindingResult bindingResult)</span> </span>&#123;</span><br><span class="line">        doSomething();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>在上图中，如果Item实体的props属性不额外加注释，只有@NotNull和@Size，无论入参采用@Validated还是@Valid验证，Spring Validation框架只会对Item的id和props做非空和数量验证，不会对props字段里的Prop实体进行字段验证，也就是**@Validated<strong>和</strong>@Valid**加在方法参数前，都不会自动对参数进行嵌套验证。也就是说如果传的List中有Prop的pid为空或者是负数，入参验证不会检测出来。</p>
<p>为了能够进行嵌套验证，必须手动在Item实体的props字段上明确指出这个字段里面的实体也要进行验证。由于@Validated不能用在成员属性（字段）上，但是@Valid能加在成员属性（字段）上，而且@Valid类注解上也说明了它支持嵌套验证功能，那么我们能够推断出：@Valid加在方法参数时并不能够自动进行嵌套验证，而是用在需要嵌套验证类的相应字段上，来配合方法参数上@Validated或@Valid来进行嵌套验证。</p>
<p>我们修改Item类如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;id不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Min(value = 1, message = &quot;id必须为正整数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Valid</span> <span class="comment">// 嵌套验证必须用@Valid</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;props不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Size(min = 1, message = &quot;props至少要有一个自定义属性&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Prop&gt; props;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>然后我们在ItemController的addItem函数上再使用@Validated或者@Valid，就能对Item的入参进行嵌套验证。此时Item里面的props如果含有Prop的相应字段为空的情况，Spring Validation框架就会检测出来，bindingResult就会记录相应的错误。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>@Validated：用在方法入参上无法单独提供嵌套验证功能。<strong>不能用在成员属性（字段）上</strong>，也无法提示框架进行嵌套验证。能配合嵌套验证注解@Valid进行嵌套验证。</p>
<p>@Valid：用在方法入参上无法单独提供嵌套验证功能。<strong>能够用在成员属性（字段）上</strong>，提示验证框架进行嵌套验证。能配合嵌套验证注解@Valid进行嵌套验证。</p>
<p>注：</p>
<p>在MVC中如果使用@Validated的同时，<strong>不使用@RequestBody的情况下</strong>，需要对实体类进行验证时，全局异常处理<strong>不会抛出MethodArgumentNotValidException异常</strong>，而是<strong>抛出BindException异常</strong>，需增加全局异常捕获方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@ExceptionHandler(value = BindException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">violationException</span><span class="params">(BindException exception)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 不带任何参数访问接口,会抛出 BindException</span></span><br><span class="line">    <span class="comment">// 因此，我们只需捕获这个异常，并返回我们设置的 message 即可</span></span><br><span class="line">    String message = exception.getBindingResult().getAllErrors().get(<span class="number">0</span>).getDefaultMessage();</span><br><span class="line">    <span class="keyword">return</span> JsonResult.fail(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>synchronized</title>
    <url>/2021/05/24/synchronized/</url>
    <content><![CDATA[<h1 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h1><ul>
<li><p><strong>jdk早期的synchronized为什么是重量级的</strong></p>
<p>因为我们的jvm是运行在操作系统上的，即用户态，而我们的操作系统是运行在内核态的，用户态中的程序是不能直接调用系统指令的，所以synchronized必须经过老大操作系统,所以synchronized是重量级锁</p>
</li>
<li><p><strong>synchronized的升级过程</strong></p>
</li>
</ul>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/juc/synchronized%E5%8D%87%E7%BA%A7%E8%BF%87%E7%A8%8B.png" alt="锁升级"></p>
<ul>
<li><p><strong>偏向锁：</strong></p>
<p>引入偏向锁是为了在<code>无多线程</code>竞争的情况下尽量减少不必要的轻量级锁执行路径，因为轻量级锁的获取及释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令（由于一旦出现多线程竞争的情况就必须撤销偏向锁，所以偏向锁的撤销操作的性能损耗必须小于节省下来的CAS原子指令的性能消耗）。上面说过，轻量级锁是为了在线程交替执行同步块时提高性能，而偏向锁则是在只有一个线程执行同步块时进一步提高性能。</p>
</li>
<li><p><strong>偏向锁的获取：</strong></p>
<p>（1）访问Mark Word中偏向锁的标识是否设置成1，锁标志位是否为01——确认为可偏向状态。</p>
<p>（2）当第一次第一个线程来的时候将Mark Word中线程ID设置为当前线程ID</p>
</li>
<li><p><strong>偏向锁的释放</strong></p>
<p>偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程不会主动去释放偏向锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有字节码正在执行），它会首先暂停拥有偏向锁的线程，判断锁对象是否处于被锁定状态，撤销偏向锁后恢复到未锁定（标志位为“01”）或轻量级锁（标志位为“00”）的状态。</p>
</li>
<li><p><strong>偏向锁的使用</strong></p>
<p>偏向锁 - markword 上记录当前线程指针，下次同一个线程加锁的时候，不需要争用, 只需要判断线程指针是否同一个，所以，偏向              锁, 偏向加锁的第一个线程 。hashCode备份在线程栈上 线程销毁，锁降级为无锁</p>
<p> 有争用 - 锁升级为轻量级锁 - 每个线程有自己的LockRecord在自己的线程栈上，用CAS去争用markword的LR的指针，指针指向哪个线程的LR，哪个线程就拥有锁</p>
</li>
<li><p><strong>匿名偏向锁</strong></p>
<p>默认情况 偏向锁有个时延，默认是4秒</p>
<p>打开偏向锁刚 new 出来的对象就是匿名偏向锁</p>
</li>
</ul>
<ul>
<li><p><strong>注：</strong></p>
<p>  在 JDK 15 中，默认情况下禁用偏向锁（Biased Locking），并弃用所有相关的命令行选项。</p>
</li>
<li><p><strong>自旋锁</strong></p>
<p>自旋锁在 JDK1.4.2 中引入，使用 -XX:+UseSpinning 来开启。JDK 6 中变为默认开启，并且引入了自适应的自旋锁（适应性自旋锁）。</p>
<p>自适应自旋锁意味着自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。</p>
</li>
<li><p><strong>什么情况下升级为重量级锁</strong></p>
<p>锁的时间长，或者自旋线程多</p>
</li>
<li><p><strong>new –&gt; 偏向锁 –&gt; 轻量级锁 （无锁, 自旋锁，自适应自旋）–&gt; 重量级锁</strong></p>
<ol>
<li><p>Object o = new Object()<br>锁 = 0 01 无锁态<br>注意：如果偏向锁打开，默认是匿名偏向状态,不偏向任何线程</p>
</li>
<li><p>o.hashCode()<br>001 + hashcode</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">00000001</span> <span class="number">10101101</span> <span class="number">00110100</span> <span class="number">00110110</span></span><br><span class="line"><span class="number">01011001</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br></pre></td></tr></table></figure>

<p>little endian big endian </p>
<p>00000000 00000000 00000000 01011001 00110110 00110100 10101101 00000000</p>
</li>
<li><p>默认synchronized(o)<br>00 -&gt; 轻量级锁<br>默认情况 偏向锁有个时延，默认是4秒<br>why? 因为JVM虚拟机自己有一些默认启动的线程，里面有好多sync代码，这些sync代码启动时就知道肯定会有竞争，如果使用偏向锁，就会造成偏向锁不断的进行锁撤销和锁升级的操作，效率较低。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-XX:BiasedLockingStartupDelay=0</span><br></pre></td></tr></table></figure></li>
<li><p>如果设定上述参数<br>new Object () - &gt; 101 偏向锁 -&gt;线程ID为0 -&gt; Anonymous BiasedLock<br>打开偏向锁，new出来的对象，默认就是一个可偏向匿名对象101</p>
</li>
<li><p>如果有线程上锁<br>上偏向锁，指的就是，把markword的线程ID改为自己线程ID的过程<br>偏向锁不可重偏向 批量偏向 批量撤销</p>
</li>
<li><p>如果有线程竞争<br>撤销偏向锁，升级轻量级锁<br>线程在自己的线程栈生成LockRecord ，用CAS操作将markword设置为指向自己这个线程的LR的指针，设置成功者得到锁</p>
</li>
<li><p>如果竞争加剧<br>竞争加剧：有线程超过10次自旋， -XX:PreBlockSpin， 或者自旋线程数超过CPU核数的一半， 1.6之后，加入自适应自旋 Adapative Self Spinning ， JVM自己控制<br>升级重量级锁：-&gt; 向操作系统申请资源，linux mutex , CPU从3级-0级系统调用，线程挂起，进入等待队列，等待操作系统的调度，然后再映射回用户空间</p>
</li>
</ol>
<p>(以上实验环境是JDK11，打开就是偏向锁，而JDK8默认对象头是无锁)</p>
<p>偏向锁默认是打开的，但是有一个时延，如果要观察到偏向锁，应该设定参数</p>
<p><strong>如果计算过对象的hashCode，则对象无法进入偏向状态！</strong></p>
<blockquote>
<p>轻量级锁重量级锁的hashCode存在与什么地方？</p>
<p>答案：线程栈中，轻量级锁的LR中，或是代表重量级锁的ObjectMonitor的成员中</p>
</blockquote>
<p><strong>为什么有自旋锁还需要重量级锁？</strong></p>
<blockquote>
<p>自旋是消耗CPU资源的，如果锁的时间长，或者自旋线程多，CPU会被大量消耗</p>
<p>重量级锁有等待队列，所有拿不到锁的进入等待队列，不需要消耗CPU资源</p>
</blockquote>
<p><strong>偏向锁是否一定比自旋锁效率高？</strong></p>
<blockquote>
<p>不一定，在明确知道会有多线程竞争的情况下，偏向锁肯定会涉及锁撤销，这时候直接使用自旋锁</p>
<p>JVM启动过程，会有很多线程竞争（明确），所以默认情况启动时不打开偏向锁，过一段儿时间再打开</p>
</blockquote>
</li>
<li><p><strong>锁重入</strong></p>
<p>sychronized是可重入锁</p>
<p>重入次数必须记录，因为要解锁几次必须得对应</p>
<p>偏向锁 自旋锁 -&gt; 线程栈 -&gt; LR + 1</p>
</li>
<li><p> <strong>锁消除 lock eliminate</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String str1,String str2)</span></span>&#123;</span><br><span class="line">         StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">         sb.append(str1).append(str2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们都知道 StringBuffer 是线程安全的，因为它的关键方法都是被 synchronized 修饰过的，但我们看上面这段代码，我们会发现，sb 这个引用只会在 add 方法中使用，不可能被其它线程引用（因为是局部变量，栈私有），因此 sb 是不可能共享的资源，JVM 会自动消除 StringBuffer 对象内部的锁。</p>
<ul>
<li><strong>锁粗化 lock coarsening</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">       StringBuffer sb = <span class="keyword">new</span> StringBuffer():</span><br><span class="line">       <span class="keyword">while</span>(i &lt; <span class="number">100</span>)&#123;</span><br><span class="line">           sb.append(str);</span><br><span class="line">           i++;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> sb.toString():</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JVM 会检测到这样一连串的操作都对同一个对象加锁（while 循环内 100 次执行 append，没有锁粗化的就要进行 100  次加锁/解锁），此时 JVM 就会将加锁的范围粗化到这一连串的操作的外部（比如 while 虚幻体外），使得这一连串操作只需要加一次锁即可。</p>
<ul>
<li><strong>锁降级</strong></li>
</ul>
<p><a href="https://www.zhihu.com/question/63859501">https://www.zhihu.com/question/63859501</a></p>
<ul>
<li><strong>超线程</strong></li>
</ul>
<p>一个ALU + 两组Registers + PC</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java基础知识</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>tcpip协议</title>
    <url>/2021/03/21/tcpip%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h3 id="Tcp-ip协议"><a href="#Tcp-ip协议" class="headerlink" title="Tcp/ip协议"></a>Tcp/ip协议</h3><p>   <strong>TCP/IP传输协议，即传输控制/网络协议，也叫作网络通讯协议</strong></p>
<ul>
<li><p><strong>三次握手</strong><br><strong>为了对每次发送的数据量进行跟踪与协商，确保数据段的发送和接收同步，根据所接收到的数据量而确认数据发送、接收完毕后何时撤消联系，并建立虚连接。<br>为了提供可靠的传送，TCP在发送新的数据之前，以特定的顺序将数据包的序号，并需要这些包传送给目标机之后的确认消息。TCP总是用来发送大批量的数据。当应用程序在收到数据后要做出确认时也要用到TCP</strong><br><strong>第一次握手：</strong> 建立连接时，客户端发送syn包（seq=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。<br><strong>第二次握手：</strong>　服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（seq=k），即SYN+ACK包，此时服务器进入SYN_RECV状态。<br><strong>第三次握手：</strong> 客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</p>
</li>
<li><p><strong>为什么需要三次握手，两次不行吗</strong><br>1.通过以上我们知道，<br>  客户端——-syn(seq=j)——-&gt;服务器 <strong>此时服务器知道客户端的发送功能是正常的</strong><br>  客户端&lt;——-syn+ack———-服务器 <strong>此时客户端知道服务器的接收和发送的功能是正常的</strong></p>
<p><strong>以上的两次握手并不能满足Tcp/ip协议的可靠性，因为服务器只知道客户端的发送功能是正常的，并不知道客户端的接收功能是否正常，所以此时就需要第三次的握手来让服务器知道客户端的接收功能是否正常</strong></p>
</li>
<li><p><strong>四次挥手</strong><br><strong>对于一个已经建立的连接，TCP使用改进的四次握手来释放连接（使用一个带有FIN附加标记的报文段）。TCP关闭连接的步骤如下：</strong></p>
<p><strong>第一步:</strong> 当主机A的应用程序通知TCP数据已经发送完毕时，TCP向主机B发送一个带有FIN附加标记的报文段（FIN表示英文finish)<br><strong>第二步:</strong> 主机B收到这个FIN报文段之后，并不立即用FIN报文段回复主机A，而是先向主机A发送一个确认序号ACK，同时通知自己相应的应用程序：对方要求关闭连接（先发送ACK的目的是为了防止在这段时间内，对方重传FIN报文段）<br><strong>第三步</strong> 主机B的应用程序告诉TCP：我要彻底的关闭连接，TCP向主机A送一个FIN报文段。<br><strong>第四步</strong> 主机A收到这个FIN报文段后，向主机B发送一个ACK表示连接彻底释放。 </p>
</li>
<li><p><strong>为什么需要四次挥手</strong><br>因为当服务端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当服务端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉客户端，“你发的FIN报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四次挥手</p>
</li>
</ul>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>volatile</title>
    <url>/2021/05/24/volatile/</url>
    <content><![CDATA[<h2 id="volatile的用途"><a href="#volatile的用途" class="headerlink" title="volatile的用途"></a>volatile的用途</h2><h3 id="问题：-DCL单例需不需要加volatile？"><a href="#问题：-DCL单例需不需要加volatile？" class="headerlink" title="问题： DCL单例需不需要加volatile？"></a>问题： DCL单例需不需要加volatile？</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Instance</span> </span>&#123;</span><br><span class="line">    <span class="comment">//此处加volatile 和 不加的区别</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Instance ins = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Instance <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ins == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Instance.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ins == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    ins = <span class="keyword">new</span> Instance();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ins;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-防止指令重排序"><a href="#1-防止指令重排序" class="headerlink" title="1.防止指令重排序"></a>1.防止指令重排序</h3><ul>
<li>证明指令重排序存在</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        x = <span class="number">0</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        a = <span class="number">0</span>;</span><br><span class="line">        b = <span class="number">0</span>;</span><br><span class="line">        Thread one = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            a = <span class="number">1</span>;</span><br><span class="line">            x = b;</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread other = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            b = <span class="number">1</span>;</span><br><span class="line">            y = a;</span><br><span class="line">        &#125;);</span><br><span class="line">        one.start();</span><br><span class="line">        other.start();</span><br><span class="line">        one.join();</span><br><span class="line">        other.join();</span><br><span class="line">        String result = <span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;次 (&quot;</span> + x + <span class="string">&quot;,&quot;</span> + y + <span class="string">&quot;）&quot;</span>;</span><br><span class="line">        <span class="comment">// 出现00组合 证明cpu乱序执行了</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) &#123;</span><br><span class="line">            System.err.println(result);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//  System.out.println(result);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>不存乱序的情况下应该输出的值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span>;</span><br><span class="line">y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>存在乱序的情况下出现的值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">第<span class="number">461233</span>次 (<span class="number">0</span>,<span class="number">0</span>）</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>对象创建的过程</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//https://blog.csdn.net/u010737756/article/details/104843152</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        C o = <span class="keyword">new</span> C();</span><br><span class="line">        System.out.println(ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.使用 idea 的插件jclasslib  Bytecode Viewer 即可查看对象实例化过程的字节码</p>
<p><code>new C();</code>实列化过程 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">0 new #2 &lt;com/yzw/juc/markWord/C&gt;</span><br><span class="line"><span class="number">3</span> dup</span><br><span class="line">4 invokespecial #3 &lt;com/yzw/juc/markWord/C.&lt;init&gt;&gt;</span><br><span class="line"><span class="number">7</span> astore_1</span><br><span class="line"><span class="number">8</span> <span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<p><code>new C();</code>字节码解释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="keyword">new</span>                         创建一个对象，并且其引用进栈</span><br><span class="line"><span class="number">3</span> dup                         复制栈顶数值，并且复制值进栈</span><br><span class="line"><span class="number">4</span> invokespecial               调用超类构造方法、实例初始化方法、私有方法</span><br><span class="line"><span class="number">7</span> astore_1                    将栈顶数值（objectref）存入当前</span><br><span class="line"><span class="number">8</span> <span class="keyword">return</span>                      从当前方法返回<span class="keyword">void</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<ul>
<li><strong>字节码</strong></li>
</ul>
<p>0.new -&gt;申请内存。堆里有了一个新的内存。（<strong>半初始化。成员变量设置默认值</strong>）</p>
<pre class="mermaid">graph LR
A(c)    
B[i = 0]</pre>



<p>3 dup 因为invokespecial会消耗一份，所以必须先复制一份<br>4 invokespecial T initlize 初始化，<strong>调用他的构造方法</strong></p>
<pre class="mermaid">graph LR
A(c)  
B[i = 8]</pre>

<p>7 astore_1 <strong>把c与i建立关联</strong></p>
<pre class="mermaid">graph LR
A(c)  --> B[i = 8]</pre>

<p>8 return                      从当前方法返回void</p>
<ul>
<li>结论</li>
</ul>
<p>由上述步骤可以看出：<code>在多线程的环境下，假设线程1拿到锁Instance.class，线程1执行锁中的代码时有可能会发生  c与i先建立联系 ， 然后给i赋值，此时线程2如果出现进入第一个判断ins！= null,此时的线程2就会直接 return ins，所以这里就会出现问题</code></p>
<h3 id="2-保证线程的可见性"><a href="#2-保证线程的可见性" class="headerlink" title="2.保证线程的可见性"></a>2.<strong>保证线程的可见性</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//证明线程的可见性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*volatile*/</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>; <span class="comment">//对比一下有无volatile的情况下，整个程序运行结果的区别</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m start&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (running) &#123;</span><br><span class="line">            <span class="comment">//System.out.println(&quot;runing.....&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;m end!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        V v = <span class="keyword">new</span> V();</span><br><span class="line">        <span class="keyword">new</span> Thread(v::m, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        v.running = <span class="keyword">false</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;min stop&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java基础知识</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>web安全笔记</title>
    <url>/2021/03/14/web%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="关于web端安全笔记"><a href="#关于web端安全笔记" class="headerlink" title="关于web端安全笔记"></a>关于web端安全笔记</h3><p>   <a href="https://websec.readthedocs.io/zh/latest/index.html">web安全地址</a></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>上网攻略</title>
    <url>/2021/01/14/%E4%B8%8A%E7%BD%91%E6%94%BB%E7%95%A5/</url>
    <content><![CDATA[<h4 id="上网攻略"><a href="#上网攻略" class="headerlink" title="上网攻略"></a>上网攻略</h4><p><strong>centos6+ wget链接到外网</strong></p>
<ul>
<li>执行以下命令修改文件</li>
</ul>
<p>​       vi /etc/resolv.conf</p>
<ul>
<li>把resolv.conf里面的文件替换为以下：</li>
</ul>
<p>​        nameserver 8.8.8.8<br>​         nameserver 114.114.114.114search localdomain</p>
<p><strong>注意：是用以上的配置替换文件中的所有配置</strong></p>
<h3 id="KX上网完整攻略"><a href="#KX上网完整攻略" class="headerlink" title="KX上网完整攻略"></a>KX上网完整攻略</h3><p>客观条件要求：<br>1，代理节点：<br>免费节点分享：<a href="http://bit.ly/3cFPrfV">http://bit.ly/3cFPrfV</a><br>免费节点订阅：<a href="http://bit.ly/2xa7o67">http://bit.ly/2xa7o67</a><br>2，代理客户端：<br>ssr客户端免费下载：<br>PC端：<a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases</a><br>-下载最新版本的zip压缩包；<br>MAC端：<a href="https://github.com/qinyuhang/ShadowsocksX-NG-R/releases">https://github.com/qinyuhang/ShadowsocksX-NG-R/releases</a><br>-下载最新版本的dmg安装包；<br>安卓端：<a href="https://github.com/shadowsocksrr/shadowsocksr-android/releases">https://github.com/shadowsocksrr/shadowsocksr-android/releases</a><br>-下载最上面的版本 APK安装包（一般Android手机浏览器会自动下安装）。<br>v2ray客户端免费下载：<br>PC端和MAC端：<a href="https://github.com/v2ray/v2ray-core/releases">https://github.com/v2ray/v2ray-core/releases</a><br>-PC端下载最新版本的zip压缩包；MAC端下载最新的macos版本zip压缩包后解压；<br>MAC端其他版本v2rayU：<a href="https://github.com/yanue/V2rayU/releases">https://github.com/yanue/V2rayU/releases</a><br>-下载最新版本的dmg安装包;<br>安卓端：<a href="https://github.com/2dust/v2rayNG/releases">https://github.com/2dust/v2rayNG/releases</a><br>-下载最新版本的APK安装包。<br>IOS（苹果手机iphone或ipad）建议使用小火箭shadowrocket和quantumult，但因为大陆商店统统下架，所以只能使用非大陆地区的AppleID，打开App Store才能找到这两个软件，而且这两个软件收费;<br>如果希望不花钱也可以安装小火箭，请看我的视频：免费分享美区香港Apple ID(已购买小火箭shadowrocket)</p>
<p>小火箭shadowrocket ipa安装包下载：<br>小火箭爱思助手ipa安装包：<a href="http://bit.ly/38r7VNX">http://bit.ly/38r7VNX</a><br>小火箭和quantumult配置文件规则：<br>最完善的小火箭翻墙规则：<a href="https://github.com/h2y/Shadowrocket-ADBlock-Rules">https://github.com/h2y/Shadowrocket-ADBlock-Rules</a><br>quantumult等客户端配置规则：<a href="https://github.com/lhie1/Rules">https://github.com/lhie1/Rules</a><br>以上规则足够使用；<br>如果youtube出现黑屏 请点进去所使用的规则列表 搜索youtube 删除 “ads.youtube.com”这条规则.<br>如果不会添加规则，请看我的视频：小火箭使用教程</p>
<p>自己搭建代理节点<br>自己搭建代理节点，需要租用一台vps，视频教程里我会以谷歌云vps为例，因为谷歌云可以免费申请300美金的赠金，并且有一年的有效期。假如赠金用光或是有效期到期，还可以申请新的账号，再获取300美金赠金，并可转移至老账户作为付款账户，如此可以不用修改已经在用的节点而一直免费使用，爽吧！</p>
<p>一，ssr节点搭建步骤<br>系统要求：<br>CentOS 6+ / Debian 6+ / Ubuntu 14.04 +<br>推荐使用Debian 8+<br>安装：<br>简单的来说，如果你什么都不懂，那么你直接一路回车就可以了！</p>
<p>进入root目录：<br>首先确认命令符框最前面是不是root@xxxxx<br>如果不是, 说明不在根目录，请输入：<br>sudo su<br>输入上面代码回车后可能会提示你输入当前用户的密码，输入并回车后，没有报错就继续下面的步骤安装ShadowsocksR。<br>ssr一键安装脚本（逗比-单用户）：<br>wget -N –no-check-certificate <a href="https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh">https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh</a> &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh<br>单用户脚本：ssr.sh 则是单服务器单用户脚本，使用的是SSR服务端的单用户配置方式，即使实现了多端口，但是还算不上多用户，不支持每个用户(端口)不同的加密方式/协议/混淆等，并且无法管理流量使用。<br>ssr一键安装脚本（逗比-多用户）：<br>wget -N –no-check-certificate <a href="https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/ssrmu.sh">https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/ssrmu.sh</a> &amp;&amp; chmod +x ssrmu.sh &amp;&amp; bash ssrmu.sh<br>多用户脚本：ssrmu.sh 脚本是单服务器多用户脚本，使用的是SSR服务端的MudbJSON模式，可以给每个用户(端口)设置不同的加密方式/协议/混淆/限制速度/设备数限制/可用总流量等功能。即实现单服务器多用户流量管理等功能。<br>根据你的需求选择，比如你仅仅是 一个或两个人使用，并且不需要流量管理功能，那么选择 ssr.sh 好了。而如果很多人使用，并且都需要限制流量来管理，那你适合使用 ssrmu.sh , 所以自己看着选，多试试（两个脚本不能共存）！<br>运行后会提示你输入数字来选择要做什么。按提示操作即可;<br>如果全部完成，出现黑屏，请滑动一下你的鼠标滚轮！！！<br>使用管理：<br>运行脚本(单用户ssr.sh)：<br>bash ssr.sh<br>运行脚本(多用户ssrmu.sh)：<br>bash ssrmu.sh<br>输入对应的数字来执行相应的命令。<br>如果需要网络加速，可以安装BBR:<br>同样，需要在根目录操作：<br>如果没有安装wget GCP服务器，输入安装：<br>yum -y install wget<br>bbr加速一键安装脚本(其实以上ssr两个脚本14项“其他”里面已经可以安装）：<br>wget -N –no-check-certificate <a href="https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/bbr.sh">https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/bbr.sh</a> &amp;&amp; chmod +x bbr.sh &amp;&amp; bash bbr.sh<br>注意：在Debian系统中，删除旧内核时，会提示你是否终止删除内核的行为(点击打开图样)，这个需要你选择 (键盘方向键:选择，回车键:确认)。<br>使用管理：<br>1:启动bbr:bash bbr.sh start<br>2:关闭bbr:bash bbr.sh stop<br>3:查看bbr状态：bash bbr.sh status<br>二，v2ray节点搭建步骤<br>系统要求：<br>Ubuntu 16+ / Debian 8+ / CentOS 7+ 系统<br>推荐使用 Debian 9 系统，脚本会自动启用 BBR 优化。<br>安装：<br>进入root目录：<br>首先确认命令符框最前面是不是root@xxxxx<br>如果不是, 说明不在根目录，请输入：<br>sudo -i<br>v2ray一键安装脚本（233大佬)：<br>bash &lt;(curl -s -L <a href="https://git.io/v2ray.sh">https://git.io/v2ray.sh</a>)<br>如果提示 curl: command not found ，那是因为你的VPS没装Curl;<br>ubuntu/debian系统安装Curl,输入: apt-get update -y &amp;&amp; apt-get install curl -y<br>centos系统安装Curl,输入: yum update -y &amp;&amp; yum install curl -y<br>安装好curl之后就能安装脚本了!<br>安装完成后，自动启用bbr加速;<br>根目录下输入：v2ray 即可管理 V2Ray;<br>如果提示你的系统不支持此脚本，那么请尝试更换系统.<br>快速管理<br>查看 V2Ray 配置信息：v2ray info<br>修改 V2Ray 配置：v2ray config<br>生成 V2Ray 配置文件链接：v2ray link<br>生成 V2Ray 配置信息链接：v2ray infolink<br>生成 V2Ray 配置二维码链接：v2ray qr<br>查看 V2Ray 运行状态：v2ray status<br>启动 V2Ray：v2ray start<br>停止 V2Ray：v2ray stop<br>重启 V2Ray：v2ray restart<br>查看 V2Ray 运行日志：v2ray log<br>更新 V2Ray：v2ray update<br>更新 V2Ray 管理脚本：v2ray update.sh<br>卸载 V2Ray：v2ray uninstall<br>欢迎加入我的电报圈子<br>点击加入：<a href="https://bit.ly/2wqOQ1B">https://bit.ly/2wqOQ1B</a></p>
<p>Telegram客户端免费下载：<br>PC(desktop)端：<a href="https://desktop.telegram.org/">https://desktop.telegram.org/</a><br>安卓：<a href="https://play.google.com/store/apps/details?id=org.telegram.messenger">https://play.google.com/store/apps/details?id=org.telegram.messenger</a><br>IOS：<a href="https://www.apple.com/us/search/telegram?src=globalnav">https://www.apple.com/us/search/telegram?src=globalnav</a><br>MacOS：<a href="https://macos.telegram.org/">https://macos.telegram.org/</a><br>WP：<a href="https://www.microsoft.com/en-us/p/telegram-messenger/9wzdncrdzhs0?rtc=1&amp;activetab=pivot:overviewtab">https://www.microsoft.com/en-us/p/telegram-messenger/9wzdncrdzhs0?rtc=1&amp;activetab=pivot:overviewtab</a><br>Web网页端：<a href="https://web.telegram.org/#/login">https://web.telegram.org/#/login</a><br>电报MTproxy一键脚本(逗比):<br>wget -N –no-check-certificate <a href="https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/mtproxy.sh">https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/mtproxy.sh</a> &amp;&amp; chmod +x mtproxy.sh &amp;&amp; bash mtproxy.sh<br>管理脚本：<br>./mtproxy.sh<br>请勿违反国家法律法规，否则后果自负！<br>使用一键脚本并不会害了你，并且会让你节省大量的时间，工具从来都是为了更快的解决问题。</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>中介者设计模式</title>
    <url>/2020/12/24/%E4%B8%AD%E4%BB%8B%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="中介者设计模式-Mediator-Pattern"><a href="#中介者设计模式-Mediator-Pattern" class="headerlink" title="中介者设计模式(Mediator Pattern)"></a>中介者设计模式(Mediator Pattern)</h4><p><strong>描述：</strong> 中介者设计模式是用来降低多个对象和类之间通信的复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，代码易于维护。中介模式属于行为型模式</p>
<p><strong>核心思想：</strong> 对象与对象之间存在大量的关联关系，这样势必会导致系统结构变的很复杂，同时若一个对象发生变化，我们也需要跟踪与之相关联的对象，同时做出相应的处理</p>
<p><strong>使用场景：</strong> </p>
<ul>
<li>系统中对对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以服用改对象</li>
<li>想通过一个中间类来封装多个类中的行为，而不像生成太多的子类</li>
</ul>
<p><strong>中介者设计模式的优点：</strong></p>
<ul>
<li>降低了类的复杂度将一对多转化为一对一</li>
<li>各个类之间解耦</li>
<li>符合迪米特法则</li>
</ul>
<p><strong>中介者设计模式的缺点：</strong></p>
<ul>
<li>中介者会变得庞大， 变得复杂难以维护</li>
</ul>
<p><strong>示例：</strong> </p>
<ul>
<li>抽象中介者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(String message, Colleague colleague)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>中介者具体实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">implements</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConcreteColleague1 colleague1;</span><br><span class="line">    <span class="keyword">private</span> ConcreteColleague2 colleague2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColleague1</span><span class="params">(ConcreteColleague1 colleague1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.colleague1 = colleague1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColleague2</span><span class="params">(ConcreteColleague2 colleague2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.colleague2 = colleague2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message, Colleague colleague)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (colleague == colleague1) &#123;</span><br><span class="line">            colleague2.notify(message);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            colleague1.notify(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>抽象出用户对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象同事类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Colleague</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>用户的实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague1</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleague1</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        mediator.send(message, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;同事1得到消息：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague2</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleague2</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        mediator.send(message, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;同事1得到消息：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       ConcreteMediator mediator = <span class="keyword">new</span> ConcreteMediator();</span><br><span class="line"></span><br><span class="line">       ConcreteColleague1 colleague1 = <span class="keyword">new</span> ConcreteColleague1(mediator);</span><br><span class="line">       ConcreteColleague2 colleague2 = <span class="keyword">new</span> ConcreteColleague2(mediator);</span><br><span class="line"></span><br><span class="line">       mediator.setColleague1(colleague1);</span><br><span class="line">       mediator.setColleague2(colleague2);</span><br><span class="line"></span><br><span class="line">       colleague1.send(<span class="string">&quot;Nice to meet u.&quot;</span>);</span><br><span class="line">       colleague2.send(<span class="string">&quot;Nice to meet u too.&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>享元设计模式</title>
    <url>/2020/12/21/%E4%BA%AB%E5%85%83%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="享元设计模式-Flyweight-Pattern"><a href="#享元设计模式-Flyweight-Pattern" class="headerlink" title="享元设计模式(Flyweight Pattern)"></a>享元设计模式(Flyweight Pattern)</h4><p><strong>描述：</strong> 享元设计模式主要用于减少对象的创建，以减少内存的占用提高性能这种类型的设计模式属于结构型模式，它减少了对象的数量从而改善应用所需的对象结构的方式</p>
<p><strong>核心思想：</strong> 主要的思想和池化技术的概念类似。当我们取对象时如果有就返回，没有就创建。</p>
<p><strong>使用场景：</strong> </p>
<ul>
<li>系统有大量的相似对象</li>
<li>有缓冲池的场景</li>
</ul>
<p><strong>享元设计模式的优点：</strong></p>
<ul>
<li>降低内存的消耗，提高使用率</li>
</ul>
<p><strong>享元设计模式的缺点：</strong></p>
<ul>
<li>提高了系统的复杂度，需要分理处外部状态和内部的状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。</li>
</ul>
<p><strong>示例：</strong></p>
<ul>
<li>抽象享元对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">borrow</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>享元对象的实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateBook</span> <span class="keyword">implements</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CreateBook</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">borrow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;借出一本书 书名是：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>享元工厂</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Llibrary</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Book&gt; books;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Llibrary llibrary = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Llibrary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        books = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用单例 图书馆必须是一个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Llibrary <span class="title">getLlibrary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (llibrary == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Llibrary.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (llibrary == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    llibrary = <span class="keyword">new</span> Llibrary();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> llibrary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//此处借助于map 将享元对象存入map </span></span><br><span class="line">    <span class="comment">//传进来一个书的名字 此时如果有就直接返回这本书 如果没有就  添加一本书进来</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">libToBorrow</span><span class="params">(String bookName)</span> </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (books.containsKey(bookName)) &#123;</span><br><span class="line">            book = books.get(bookName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            book = <span class="keyword">new</span> CreateBook(bookName);</span><br><span class="line">            books.put(bookName, book);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBookSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> books.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Book&gt; books = <span class="keyword">new</span> ArrayList&lt;Book&gt;();</span><br><span class="line">    <span class="keyword">static</span> Llibrary llibrary = Llibrary.getLlibrary();</span><br><span class="line">   <span class="comment">//调用book工厂 返回book对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">studentBorrow</span><span class="params">(String bookName)</span> </span>&#123;</span><br><span class="line">        books.add(llibrary.libToBorrow(bookName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        studentBorrow(<span class="string">&quot;java编程思想&quot;</span>);</span><br><span class="line">        studentBorrow(<span class="string">&quot;java核心卷一&quot;</span>);</span><br><span class="line">        studentBorrow(<span class="string">&quot;java核心卷二&quot;</span>);</span><br><span class="line"></span><br><span class="line">        studentBorrow(<span class="string">&quot;java核心卷一&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Book book : books) &#123;</span><br><span class="line">            book.borrow();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>代理设计模式</title>
    <url>/2020/12/22/%E4%BB%A3%E7%90%86%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="代理设计模式-Proxy-Pattern"><a href="#代理设计模式-Proxy-Pattern" class="headerlink" title="代理设计模式(Proxy Pattern)"></a>代理设计模式(Proxy Pattern)</h4><p><strong>描述：</strong> 代理设计模式就是一个对象代表另外一个对象的功能， 也就是指客户端并不直接调用实际的对象，而是通过中间的代理对象来间接的调用实际对象,  这种设计设计模式属于结构模式。</p>
<p><strong>核心思想：</strong> 为对象提供一种以代理对象控制这个对象的访问</p>
<p><strong>使用场景：</strong> 想访问一个类时做一些额外的操作，比如添加日志等</p>
<p><strong>代理设计模式的优点：</strong> </p>
<ul>
<li>职责清晰</li>
<li>高扩展</li>
</ul>
<p><strong>代理设计模式的缺点：</strong></p>
<ul>
<li>由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。</li>
<li>实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</li>
</ul>
<p><strong>示例：</strong></p>
<ul>
<li>创建一个接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建实现接口的类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealImage</span> <span class="keyword">implements</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> String fileName;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">RealImage</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">      loadFromDisk(fileName);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Displaying &quot;</span> + fileName);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadFromDisk</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Loading &quot;</span> + fileName);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>代理类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyImage</span> <span class="keyword">implements</span> <span class="title">Image</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> RealImage realImage;</span><br><span class="line">   <span class="keyword">private</span> String fileName;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ProxyImage</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(realImage == <span class="keyword">null</span>)&#123;</span><br><span class="line">         realImage = <span class="keyword">new</span> RealImage(fileName);</span><br><span class="line">      &#125;</span><br><span class="line">      realImage.display();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyPatternDemo</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Image image = <span class="keyword">new</span> ProxyImage(<span class="string">&quot;test_10mb.jpg&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 图像将从磁盘加载</span></span><br><span class="line">      image.display(); </span><br><span class="line">      System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">      <span class="comment">// 图像不需要从磁盘加载</span></span><br><span class="line">      image.display();  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>使用jacob实现word转pdf</title>
    <url>/2021/01/01/%E4%BD%BF%E7%94%A8jacob%E5%AE%9E%E7%8E%B0word%E8%BD%ACpdf/</url>
    <content><![CDATA[<h4 id="使用jacob实现word转pdf-WPS版"><a href="#使用jacob实现word转pdf-WPS版" class="headerlink" title="使用jacob实现word转pdf WPS版"></a>使用jacob实现word转pdf WPS版</h4><p><strong>准备：</strong></p>
<ul>
<li>java用到的jar包：jacob-1.18</li>
<li>jacob-1.18-x64.dll、jacob-1.18-x86.dll</li>
</ul>
<p><strong>根据您的操作系统的需要将jacob-1.18-x64.dll或jacob-1.18-x86.dll放置你的jdk/jre的bin目录下</strong></p>
<p><strong>在你的项目中引入jacob-1.18 jar</strong></p>
<p><strong>本下载压缩包内包含jacob-1.18和jacob-1.18-x64.dll、jacob-1.18-x86.dll</strong></p>
<p><a href="http://sourceforge.net/projects/jacob-project/"><strong>下载：官网</strong></a></p>
<p><strong>补充：</strong></p>
<ul>
<li><p>需要安装wps </p>
</li>
<li><p>jacob不得低于1.18</p>
</li>
<li><p>jdk1.8</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yzw;</span><br><span class="line"><span class="keyword">import</span> com.jacob.activeX.ActiveXComponent;</span><br><span class="line"><span class="keyword">import</span> com.jacob.com.Dispatch;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yzw</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1111</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> wdDoNotSaveChanges = <span class="number">0</span>;<span class="comment">// 不保存待定的更改。</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> wdFormatPDF = <span class="number">17</span>;<span class="comment">// PDF 格式</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toPDF</span><span class="params">(String filename, String toFilename)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;启动Word&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        ActiveXComponent app = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            app = <span class="keyword">new</span> ActiveXComponent(<span class="string">&quot;KWPS.Application&quot;</span>);</span><br><span class="line">            app.setProperty(<span class="string">&quot;Visible&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            Dispatch docs = app.getProperty(<span class="string">&quot;Documents&quot;</span>).toDispatch();</span><br><span class="line">            System.out.println(<span class="string">&quot;打开文档&quot;</span> + filename);</span><br><span class="line">            Dispatch doc = Dispatch.call(docs,<span class="comment">//</span></span><br><span class="line">                    <span class="string">&quot;Open&quot;</span>, <span class="comment">//</span></span><br><span class="line">                    filename,<span class="comment">// FileName</span></span><br><span class="line">                    <span class="keyword">false</span>,<span class="comment">// ConfirmConversions</span></span><br><span class="line">                    <span class="keyword">true</span> <span class="comment">// ReadOnly</span></span><br><span class="line">            ).toDispatch();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;转换文档到PDF&quot;</span> + toFilename);</span><br><span class="line">            File tofile = <span class="keyword">new</span> File(toFilename);</span><br><span class="line">            <span class="keyword">if</span> (tofile.exists()) &#123;</span><br><span class="line">                tofile.delete();</span><br><span class="line">            &#125;</span><br><span class="line">            Dispatch.call(doc,<span class="comment">//</span></span><br><span class="line">                    <span class="string">&quot;SaveAs&quot;</span>, <span class="comment">//</span></span><br><span class="line">                    toFilename, <span class="comment">// FileName</span></span><br><span class="line">                    wdFormatPDF);</span><br><span class="line"></span><br><span class="line">            Dispatch.call(doc, <span class="string">&quot;Close&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;转换完成..用时：&quot;</span> + (end - start) + <span class="string">&quot;ms.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;========Error:文档转换失败：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (app != <span class="keyword">null</span>)</span><br><span class="line">                app.invoke(<span class="string">&quot;Quit&quot;</span>, wdDoNotSaveChanges);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String wordFile =<span class="string">&quot;C:\\Users\\27184\\Desktop\\项目\\新建文件夹\\CG20120719.docx&quot;</span>;</span><br><span class="line">        String pdfFile = <span class="string">&quot;C:\\Users\\27184\\Desktop\\项目\\新建文件夹\\成功.pdf&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Test1111 test1111 = <span class="keyword">new</span> Test1111();</span><br><span class="line">        Long  startTime = System.currentTimeMillis();</span><br><span class="line">        test1111.toPDF(wordFile, pdfFile);</span><br><span class="line">        Long  endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;office转换pdf耗时：&quot;</span>+ (endTime - startTime) + <span class="string">&quot;毫秒。&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;Office 转 PDF成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
      <tags>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title>单例设计模式</title>
    <url>/2020/12/07/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="单例设计模式-（Singleton）"><a href="#单例设计模式-（Singleton）" class="headerlink" title="单例设计模式 （Singleton）"></a>单例设计模式 （Singleton）</h4><p><strong>描述：</strong> 一个类有且仅有一个实例的类</p>
<p><strong>特点：</strong> 单例类只有一个实例，单例必须自己创建自己的唯一实例，必须给其他的访问对象提供自己的试列 。这样的好处就是避免了内存的频繁的创建和销毁实例。</p>
<p><strong>饿汉式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/*饿汉式</span></span><br><span class="line"><span class="comment">类加载到内存之后就一个实例 ， jvm保证线程的安全</span></span><br><span class="line"><span class="comment">缺点就是不管用到与否 都会在内存中产生一个实列*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="comment">//构造器私有，不能被外界随便调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span>  <span class="title">Test</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>  <span class="keyword">final</span>  Test t = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供访问接口 只能是  类名.的方式调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Test <span class="title">getTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>懒汉式</strong>(线程不安全)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/*懒汉式 </span></span><br><span class="line"><span class="comment">    线程不安全*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Test t = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器私有，不能被外界随便调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供访问接口 只能是  类名.的方式调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">getTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//在这里有可能发生线程不安全 假如t1执行到了这，此时cpu被另外的一个线程t2抢走 就会发生在内存中会有两个实例的存在</span></span><br><span class="line">            t = <span class="keyword">new</span> Test();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>懒汉式/双重检查机制</strong>(线程安全的 DCL)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/*懒汉式</span></span><br><span class="line"><span class="comment">    线程安全*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span>  <span class="keyword">static</span> Test t = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//注意 此处的 volatile  用来防止指令重排序的</span></span><br><span class="line">    <span class="comment">//当我们创建一个对象的时候 分为3步完成 1.在内存开辟空间  2.调用构造函数初始化成员变量  3.调用对象的&lt;init&gt; 指向内存空间</span></span><br><span class="line">    <span class="comment">//在cpu指令的优化下 此时可以看到  2和3 没有  逻辑上的顺序 所以此时有可能 1 3 2顺序执行  就在此时cpu指令执行到了 1 3         // 有一个线程抢走cpu 执行下方的第一个if代码 此时t 已经 !=null 但是成员变量并未初始化 所以报错</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造器私有，不能被外界随便调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供访问接口 只能是  类名.的方式调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">getTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;  <span class="comment">//此处的判断是为了考虑到运行的效率，假如此时有100个线程，如果在这里不加判断的情况就是100个线程都                           // 会在这里抢锁，消耗资源。  </span></span><br><span class="line">                          <span class="comment">// 加上锁之后 当一个线程执行完之后 t ！= null 所以就不用抢占资源 ，直接return</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Test.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(t== <span class="keyword">null</span>)&#123;</span><br><span class="line">                    t = <span class="keyword">new</span> Test();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>静态内部类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/*静态内部类</span></span><br><span class="line"><span class="comment">  * jvm帮我们保证线程安全</span></span><br><span class="line"><span class="comment">  *jvm帮我们保证单例</span></span><br><span class="line"><span class="comment">  *外部类加载时 内部类不会加载（懒加载模式）</span></span><br><span class="line"><span class="comment">  * */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">//构造器私有，不能被外界随便调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>    <span class="class"><span class="keyword">class</span> <span class="title">Test1</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span>  <span class="keyword">final</span> <span class="keyword">static</span>   Test t1 = <span class="keyword">new</span> Test();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提供访问接口 只能是  类名.的方式调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">getTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  Test1.t1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="基于枚举单列模式-推荐使用"><a href="#基于枚举单列模式-推荐使用" class="headerlink" title="基于枚举单列模式(推荐使用)"></a>基于枚举单列模式(推荐使用)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span>  <span class="title">Test</span> </span>&#123;</span><br><span class="line">    TEST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p> 注意: <strong>其中只有枚举方式的单例不会被破坏，其他都能够使用反射或者序列化的方式破坏单例</strong> </p>
<p><strong>实例: 使用反射破坏单例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        <span class="comment">//通过静态方法获取单例</span></span><br><span class="line">        Test test = Test.getTest();</span><br><span class="line">        <span class="comment">//获取Singleton的无参构造器</span></span><br><span class="line">        Constructor&lt;Test&gt; constructor = Test.class.getDeclaredConstructor();</span><br><span class="line">        <span class="comment">//因为构造器是私有的，需要设置权限</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//使用构造器创建对象</span></span><br><span class="line">        Test t1 = constructor.newInstance();</span><br><span class="line">        <span class="comment">//比较是否相等，答案是false</span></span><br><span class="line">        System.out.println(test.equals(t1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>避免反射破坏</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="comment">//构造器私有，不能被外界随便调用</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>  <span class="keyword">final</span>  Test t = <span class="keyword">new</span> Test();</span><br><span class="line">    <span class="function"><span class="keyword">private</span>  <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;请使用getSingleton()方法获取单例对象&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供访问接口 只能是  类名.的方式调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Test <span class="title">getTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用序列化破坏（须实现序列化接口  Serializable）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Singleton instance = Singleton.getInstance();</span><br><span class="line">       <span class="keyword">byte</span>[] serialize = SerializationUtils.serialize(instance);</span><br><span class="line">       Singleton newInstance = SerializationUtils.deserialize(serialize);</span><br><span class="line">       System.out.println(instance == newInstance);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><strong>避免反序列化破坏  就是不实现反序列化接口</strong></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>原型设计模式</title>
    <url>/2020/12/18/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="原型设计模式-Prototype-Pattern"><a href="#原型设计模式-Prototype-Pattern" class="headerlink" title="原型设计模式(Prototype Pattern)"></a>原型设计模式(Prototype Pattern)</h4><p><strong>描述：</strong> 它是用来创建重复对象的，首先创建一个实例然后通过这个实例拷贝创建新的实例</p>
<p><strong>核心思想：</strong> 使用克隆的方式进行对象的创建</p>
<p><strong>使用场景：</strong> </p>
<ul>
<li><p>一个复杂的对象，包含多种数据和结构，层次较深时，适用与原型模式（当需要创建一个与复杂对象部分数据相同的对象）</p>
</li>
<li><p> 当复杂对象需要独立于系统运行，而不破坏本系统中的结构</p>
</li>
<li><p>一个对象多个修改者的场景。</p>
</li>
</ul>
<p><strong>原型设计模式的优点：</strong> </p>
<ul>
<li>性能提高。 </li>
<li>逃避构造函数的约束。</li>
</ul>
<p><strong>原型设计模式的缺点：</strong></p>
<ul>
<li>引用含有循环引用如何处理</li>
<li>必须实现 Cloneable 接口。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clone = <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">teacher</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//老师有学生 的属性</span></span><br><span class="line">    <span class="keyword">private</span> student stu;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clone = <span class="keyword">super</span>.clone();</span><br><span class="line">            student clone1 = (student) <span class="keyword">this</span>.getStu().clone();</span><br><span class="line">            <span class="keyword">this</span>.setStu(clone1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        teacher tea = <span class="keyword">new</span> teacher();</span><br><span class="line">        tea.setName(<span class="string">&quot;老师&quot;</span>);</span><br><span class="line">        student student = <span class="keyword">new</span> student();</span><br><span class="line">        student.setAge(<span class="number">33</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;学生&quot;</span>);</span><br><span class="line">        tea.setAge(<span class="number">56</span>);</span><br><span class="line">        tea.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        tea.setStu(student);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        teacher clone = (teacher) tea.clone();</span><br><span class="line">        clone.setAge(<span class="number">78</span>);</span><br><span class="line">        clone.setName(<span class="string">&quot;克隆老师&quot;</span>);</span><br><span class="line">        clone.getStu().setAge(<span class="number">99</span>);</span><br><span class="line">        clone.getStu().setName(<span class="string">&quot;小学生&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(tea);</span><br><span class="line">        System.out.println(clone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>输出结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">teacher(name=老师, age=<span class="number">56</span>, sex=男, stu=student(name=学生, age=<span class="number">33</span>))</span><br><span class="line">teacher(name=克隆老师, age=<span class="number">78</span>, sex=男, stu=student(name=小学生, age=<span class="number">99</span>))</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>命令设计模式</title>
    <url>/2020/12/22/%E5%91%BD%E4%BB%A4%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="命令设计模式-Command-Pattern"><a href="#命令设计模式-Command-Pattern" class="headerlink" title="命令设计模式(Command Pattern)"></a>命令设计模式(Command Pattern)</h4><p><strong>描述：</strong> 命令设计模式是一种数据驱动的设计模式，它属于行为模式，请求以命令的方式包裹在对象中，并传递给调用对象，调用对象寻找可以处理改命令的合适对象，并把该命令传递给相应的对象，该对象执行命令。</p>
<p><strong>核心思想：</strong> 将一个情求封装为一个对象，从而可以使用不同的请求对客户进行参数化</p>
<p><strong>使用场景：</strong> 认为是命令的地方可以使用命令设计模式</p>
<p><strong>命令设计模式的优点：</strong> </p>
<ul>
<li>降低系统的耦合</li>
<li>新的命令可以很容易的添加到系统中去</li>
</ul>
<p><strong>命令设计模式是缺点：</strong></p>
<ul>
<li>会导致某些系统过多的具体命名的类，不符合依赖倒置原则</li>
</ul>
<p><strong>示例：</strong></p>
<ul>
<li>抽象命令接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//命令接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="comment">//执行任务</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建一个请求类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> quantity = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Stock [ Name: &quot;</span> + name +</span><br><span class="line">                <span class="string">&quot;  Quantity: &quot;</span> + quantity + <span class="string">&quot; ] bought&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Stock [ Name: &quot;</span> + name +</span><br><span class="line">                <span class="string">&quot;  Quantity: &quot;</span> + quantity + <span class="string">&quot; ] sold&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现命令的接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyStock</span> <span class="keyword">implements</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stock abcStock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BuyStock</span><span class="params">(Stock abcStock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.abcStock = abcStock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        abcStock.buy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SellStock</span> <span class="keyword">implements</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stock abcStock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SellStock</span><span class="params">(Stock abcStock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.abcStock = abcStock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        abcStock.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>创建命令调用类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Broker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orderList = <span class="keyword">new</span> ArrayList&lt;Order&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeOrder</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        orderList.add(order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">placeOrders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Order order : orderList) &#123;</span><br><span class="line">            order.execute();</span><br><span class="line">        &#125;</span><br><span class="line">        orderList.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stock abcStock = <span class="keyword">new</span> Stock();</span><br><span class="line"></span><br><span class="line">        BuyStock buyStockOrder = <span class="keyword">new</span> BuyStock(abcStock);</span><br><span class="line">        SellStock sellStockOrder = <span class="keyword">new</span> SellStock(abcStock);</span><br><span class="line"></span><br><span class="line">        Broker broker = <span class="keyword">new</span> Broker();</span><br><span class="line">        broker.takeOrder(buyStockOrder);</span><br><span class="line">        broker.takeOrder(sellStockOrder);</span><br><span class="line"></span><br><span class="line">        broker.placeOrders();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>备忘录设计模式</title>
    <url>/2020/12/24/%E5%A4%87%E5%BF%98%E5%BD%95%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="备忘录设计模式-Memento-Pattern"><a href="#备忘录设计模式-Memento-Pattern" class="headerlink" title="备忘录设计模式(Memento Pattern)"></a>备忘录设计模式(Memento Pattern)</h4><p><strong>描述：</strong> 备忘录设计模式是行为型设计模式之一，该设计模式用于保存对象当前的状态，并且在之后可以再次恢复到此状态，以便在适当的时候恢复此状态</p>
<p><strong>核心思想：</strong> 在不破坏封装的前提， 保存一个对象在某一个时刻的状态或者部分状态</p>
<p><strong>使用场景：</strong> </p>
<ul>
<li>需要保存恢复数据的相关状态场景</li>
<li>提供一个可回滚的操作</li>
<li>可以使用于快照功能</li>
</ul>
<p><strong>备忘录设计模式的优点</strong></p>
<ul>
<li>给用户提供了一种可以恢复状态的机制，可以使用户比较方便的回滚到某个历史状态</li>
<li>实现了历史的封装，使用户不用关心状态保存的细节</li>
</ul>
<p><strong>备忘录设计模式的缺点：</strong></p>
<ul>
<li>消耗资源，如果类的成员过多会占用比较大的资源，每一次保存都会消耗一定的内存</li>
</ul>
<p><strong>示例：</strong> </p>
<ul>
<li>备忘录</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> menoy;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; fruits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//窄接口，访问部分信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMenoy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menoy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//宽接口，本包之内皆可访问</span></span><br><span class="line">    Memento(<span class="keyword">int</span> menoy) &#123;</span><br><span class="line">        <span class="keyword">this</span>.menoy = menoy;</span><br><span class="line">        fruits = <span class="keyword">new</span> ArrayList();<span class="comment">//每次调用的时候重新生成，很重要</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//宽接口，本包之内皆可访问</span></span><br><span class="line">    <span class="function">List <span class="title">getFruits</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (List) fruits.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//宽接口，本包之内皆可访问</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addFruits</span><span class="params">(String fruit)</span> </span>&#123;</span><br><span class="line">        fruits.add(fruit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Menoy：&quot;</span> + menoy + <span class="string">&quot; ,Fruits:&quot;</span> + fruits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>原对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gamer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> menoy;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; fruits;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMenoy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menoy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Gamer</span><span class="params">(<span class="keyword">int</span> menoy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menoy = menoy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Memento m = <span class="keyword">new</span> Memento(menoy);</span><br><span class="line">        fruits.stream().filter(x -&gt; x.startsWith(<span class="string">&quot;好吃&quot;</span>)).forEach(x -&gt; &#123;</span><br><span class="line">            m.addFruits(x);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menoy = memento.getMenoy();</span><br><span class="line">        <span class="keyword">this</span>.fruits = memento.getFruits();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>客户端使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Gamer gamer = <span class="keyword">new</span> Gamer(<span class="number">100</span>);</span><br><span class="line">        Memento memento = <span class="keyword">null</span>;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;好吃的苹果&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;梨&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;好吃的橘子&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line">        gamer.setFruits(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;我是原本的&quot;</span> + gamer);</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = scanner.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                memento = gamer.createMemento();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">                gamer.restoreMemento(memento);</span><br><span class="line">                System.out.println(<span class="string">&quot;我是回退的:&quot;</span> + gamer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>外观设计模式</title>
    <url>/2020/12/21/%E5%A4%96%E8%A7%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="外观设计模式-Facade-pattern"><a href="#外观设计模式-Facade-pattern" class="headerlink" title="外观设计模式(Facade pattern)"></a>外观设计模式(Facade pattern)</h4><p><strong>描述：</strong> 外观设计模式就是隐藏系统的复杂性，向客户端提供一个客户端可以访问系统的接口，这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂度</p>
<p><strong>核心思想：</strong> 封装系统的复杂度，对外提供简单的接口</p>
<p><strong>使用场景：</strong> </p>
<ul>
<li>为复杂的模块或者子系统提供外界访问的接口</li>
<li>子系统相对的独立</li>
</ul>
<p><strong>外观设计模式的优点：</strong></p>
<ul>
<li>减少系统相互依赖</li>
<li>提高灵活性</li>
<li>提高安全性</li>
</ul>
<p><strong>外观设计模式的缺点：</strong> </p>
<ul>
<li>不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</li>
</ul>
<p><strong>示例：</strong></p>
<ul>
<li>接口类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Rectangle::draw()&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Square::draw()&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Circle::draw()&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>外观类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeMaker</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Shape circle;</span><br><span class="line">   <span class="keyword">private</span> Shape rectangle;</span><br><span class="line">   <span class="keyword">private</span> Shape square;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ShapeMaker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      circle = <span class="keyword">new</span> Circle();</span><br><span class="line">      rectangle = <span class="keyword">new</span> Rectangle();</span><br><span class="line">      square = <span class="keyword">new</span> Square();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">()</span></span>&#123;</span><br><span class="line">      circle.draw();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawRectangle</span><span class="params">()</span></span>&#123;</span><br><span class="line">      rectangle.draw();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawSquare</span><span class="params">()</span></span>&#123;</span><br><span class="line">      square.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FacadePatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      ShapeMaker shapeMaker = <span class="keyword">new</span> ShapeMaker();</span><br><span class="line"> </span><br><span class="line">      shapeMaker.drawCircle();</span><br><span class="line">      shapeMaker.drawRectangle();</span><br><span class="line">      shapeMaker.drawSquare();      </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>享元设计模式</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>守护线程与用户线程</title>
    <url>/2021/06/05/%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="守护线程与用户线程"><a href="#守护线程与用户线程" class="headerlink" title="守护线程与用户线程"></a>守护线程与用户线程</h2><p>　　用户线程：我们平常创建的普通线程。</p>
<p>　　守护线程：用来服务于用户线程；不需要上层逻辑介入</p>
<p>　　java线程分为守护线程和非守护线程，当java jvm检测主线程或其他子线程执行完之后，守护线程也会马上停止执行，我们可以使用Thread.setDaemon(ture或false)来设置一个线程是守护线程还是非守护线程，默认为false，可以通过Thread.isDaemon()方法查询该线程是否是守护线程</p>
<p>1：我们将用案例来告诉你守护线程和非守护线程的区别和用法，代码如下，先设置其为守护线程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class DeamonThread &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;&quot;DeamonThread::print&quot;是java1.8调用静态方法</span><br><span class="line">        Thread thread &#x3D; new Thread(DeamonThread::print);</span><br><span class="line">        thread.setDaemon(true);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(&quot;退出Main方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void print() &#123;</span><br><span class="line">        int counter &#x3D; 1;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                System.out.println(&quot;Counter:&quot; + counter++);</span><br><span class="line">                Thread.sleep(2000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>print()方法里面是一个while死循环，以上代码输出结果如下，只输出一次便退出了while(true)循环。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">退出Main方法&#96;&#96;Counter:1:</span><br></pre></td></tr></table></figure>

<p>2：如果我们将daemon设置为非守护线程，代码如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thread.setDaemon(false);</span><br></pre></td></tr></table></figure>

<p>这时候就不会退出while(true)循环了，会一直执行下去，结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">退出Main方法&#96;&#96;Counter:1&#96;&#96;Counter:2&#96;&#96;Counter:3&#96;&#96;.......</span><br></pre></td></tr></table></figure>

<p>总结：非守护线程其实就是守护线程的氧气，如果氧气没了，守护线程也会跟着死掉。</p>
<p>当线程只剩下守护线程的时候,JVM就会退出；补充一点如果还有其他的任意一个用户线程还在，JVM就不会退出。</p>
<h2 id="使用它需要注意些什么？"><a href="#使用它需要注意些什么？" class="headerlink" title="使用它需要注意些什么？"></a>使用它需要注意些什么？</h2><ol>
<li>thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。</li>
<li>在Daemon线程中产生的新线程也是Daemon的。</li>
<li>守护线程不能用于去访问固有资源，比如读写操作或者计算逻辑。因为它会在任何时候甚至在一个操作的中间发生中断。</li>
<li>Java自带的多线程框架，比如ExecutorService，会将守护线程转换为用户线程，所以如果要使用后台线程就不能用Java的线程池。</li>
</ol>
<h2 id="意义及应用场景"><a href="#意义及应用场景" class="headerlink" title="意义及应用场景"></a>意义及应用场景</h2><p>　　当主线程结束时，结束其余的子线程（守护线程）自动关闭，就免去了还要继续关闭子线程的麻烦。如：Java垃圾回收线程就是一个典型的守护线程；内存资源或者线程的管理，但是非守护线程也可以。</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java基础知识</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂设计模式</title>
    <url>/2020/12/10/%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="工厂设计模式-Factory-Pattern"><a href="#工厂设计模式-Factory-Pattern" class="headerlink" title="工厂设计模式(Factory Pattern)"></a>工厂设计模式(Factory Pattern)</h4><p><strong>描述：</strong> 工厂设计模式是用来生产对象的，在java中万般皆对象，如果创建的时候使用new 关键字会出现耦合严重，如果我们的对象名称换了那么所有出现此对象的地方都要进行修改。维护起来会十分的麻烦，所以就会使用工厂设计模式。</p>
<p><strong>工厂设计模式的种类：</strong></p>
<ul>
<li>简单工厂(Simple Factory Pattern)</li>
<li>工厂方法(Factory Method)</li>
<li>抽象工厂(Abstract Factory)</li>
</ul>
<h5 id="简单工厂设计模式-Simple-Factory-Pattern-静态工厂方法"><a href="#简单工厂设计模式-Simple-Factory-Pattern-静态工厂方法" class="headerlink" title="简单工厂设计模式(Simple Factory Pattern) /静态工厂方法"></a>简单工厂设计模式(Simple Factory Pattern) /静态工厂方法</h5><p><strong>示例：</strong></p>
<ul>
<li>电脑的抽象类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">interface</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">     <span class="function">String <span class="title">getRAM</span><span class="params">()</span></span>;<span class="comment">//内存</span></span><br><span class="line">     <span class="function">String <span class="title">getCPU</span><span class="params">()</span></span>;<span class="comment">//cpu</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>联想电脑厂家</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lianxiang</span>  <span class="keyword">implements</span>  <span class="title">Computer</span></span>&#123;</span><br><span class="line">    String ram;</span><br><span class="line">    String cpu;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">Lianxiang</span><span class="params">(String ram,String cpu)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu=cpu;</span><br><span class="line">        <span class="keyword">this</span>.ram=ram;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRAM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;联想的cpu是&quot;</span>+cpu;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;联想的ram是&quot;</span>+ram;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>华为电脑厂家</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Huawei</span> <span class="keyword">implements</span>   <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    String ram;</span><br><span class="line">    String cpu;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">Huawei</span><span class="params">(String ram,String cpu)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu=cpu;</span><br><span class="line">        <span class="keyword">this</span>.ram=ram;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRAM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;华为的cpu是&quot;</span>+cpu;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;华为的ram是&quot;</span>+ram;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>电脑工厂生产电脑对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> Computer <span class="title">getComputer</span><span class="params">(String type,String cpu,String ram)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;Huawei&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> Huawei(ram,cpu);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;Lianxiang&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> Lianxiang(ram,cpu);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端的调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Computer computer = ComputerFactory.getComputer(<span class="string">&quot;Huawei&quot;</span>, <span class="string">&quot;32G&quot;</span>, <span class="string">&quot;Inter&quot;</span>);</span><br><span class="line">        System.out.println(computer.getCPU()+computer.getRAM());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优点：</strong> 上下解耦， 如联想的命名改变，则客户端是不需要知道的</p>
<p><strong>缺点：</strong> 违反开闭原则，当我要增加一种品牌的电脑时休要修改工厂类，因此它只适用于产品对象较少的需求。</p>
<p><strong>附图：</strong></p>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82UML.png" alt="简单工厂设计模式UML"></p>
<h5 id="工厂方法设计模式-Factory-Method"><a href="#工厂方法设计模式-Factory-Method" class="headerlink" title="工厂方法设计模式(Factory Method)"></a>工厂方法设计模式(Factory Method)</h5><p><strong>描述：</strong> 主要用来创建单个产品的</p>
<p><strong>示例：</strong></p>
<ul>
<li>电脑的抽象类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">interface</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">     <span class="function">String <span class="title">getRAM</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function">String <span class="title">getCPU</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>电脑工厂的抽象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ComputerFactory</span> </span>&#123;</span><br><span class="line">     <span class="function">Computer <span class="title">getComputer</span><span class="params">( String cpu, String ram)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>华为电脑厂家</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Huawei</span> <span class="keyword">implements</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    String ram;</span><br><span class="line">    String cpu;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">Huawei</span><span class="params">(String ram,String cpu)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu=cpu;</span><br><span class="line">        <span class="keyword">this</span>.ram=ram;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRAM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;华为的cpu是&quot;</span>+cpu;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;华为的ram是&quot;</span>+ram;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li> 电脑工厂生产华为电脑厂家</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaweiFactory</span> <span class="keyword">implements</span>  <span class="title">ComputerFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">getComputer</span><span class="params">(String cpu, String ram)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Huawei(ram , cpu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端的调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HuaweiFactory huaweiFactory = <span class="keyword">new</span> HuaweiFactory();</span><br><span class="line">        Computer inter = huaweiFactory.getComputer(<span class="string">&quot;inter&quot;</span>, <span class="string">&quot;32G&quot;</span>);</span><br><span class="line">        System.out.println(inter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优点：</strong> 符合开闭原则 ， 上下解耦 。 如果要增加一个电脑工厂不用修改任何代码，直接实现Computer 和 ComputerFactory 即可</p>
<p><strong>缺点：</strong> 如果电脑的厂家很多的话会造成类的爆炸式增长，</p>
<p><strong>附图：</strong></p>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82UML.png" alt="工厂方法设计模式UML"></p>
<h5 id="抽象工厂设计模式-Abstract-Factory"><a href="#抽象工厂设计模式-Abstract-Factory" class="headerlink" title="抽象工厂设计模式(Abstract Factory)"></a>抽象工厂设计模式(Abstract Factory)</h5><p><strong>描述：</strong> 抽象工厂设计模式主要是用来创建 一系列的产品 </p>
<p><strong>应用场景：</strong> 当我们的一系列的产品簇趋向于稳定的时候，生产厂家可以变动，也就是华为只生产电脑和手机，不在扩展其他业务的时候使用它，而生产厂家可以有多个，不只华为一家 </p>
<p><strong>示例：</strong></p>
<ul>
<li>各种类型电脑的抽象类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DianNaoFactory</span> </span>&#123;</span><br><span class="line"><span class="comment">//各种系列的电脑</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hdiannao</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ldiannao</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">qdiannao</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">xdiannao</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>各种手机的抽象类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ShowJiFactory</span> </span>&#123;</span><br><span class="line">   <span class="comment">//各种系列的手机</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">p9shouji</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">p3shouji</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">p4shouji</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">p8shouji</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>华为厂家造电脑</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaweiDiaNao</span> <span class="keyword">implements</span>  <span class="title">DianNaoFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdiannao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;h系类的电脑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ldiannao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;l系类的电脑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">qdiannao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;q系类的电脑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xdiannao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;x系类的电脑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>华为厂家造手机</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaweiShouJi</span> <span class="keyword">implements</span> <span class="title">ShowJiFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">p9shouji</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;p9系类的手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">p3shouji</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;p3系类的手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">p4shouji</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;p4系类的手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">p8shouji</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;p8系类的手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>电子产品类的 抽象接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JiadainFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//电脑的生产者</span></span><br><span class="line">    <span class="function">DianNaoFactory   <span class="title">dianNaoFactory</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//手机的生产者</span></span><br><span class="line">    <span class="function">ShowJiFactory   <span class="title">showJiFactory</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>华为生产电子产品</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Huawei</span> <span class="keyword">implements</span>  <span class="title">JiadainFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DianNaoFactory <span class="title">dianNaoFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HuaweiDiaNao() ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShowJiFactory <span class="title">showJiFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HuaweiShouJi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端的调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JiadainFactory jiadain = <span class="keyword">new</span> Huawei();</span><br><span class="line">             jiadain.dianNaoFactory().hdiannao();</span><br><span class="line">             jiadain.showJiFactory().p3shouji();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优点：</strong> 具体的产品代码隔离，无需关注创建的细节，将一个系列的产品在一起创建。也就是我们增加生产厂家的时候是很容易的。</p>
<p><strong>缺点：</strong> 显而易见，当我们要怎加一个产平簇的时候是很麻烦的，我们要修改生产厂家的接口，违反开闭原则。</p>
<p><strong>附图：</strong></p>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82UML.png" alt="抽象工厂设计模式UML"></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的批处理命令</title>
    <url>/2020/12/05/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%89%B9%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="常用的批处理命令"><a href="#常用的批处理命令" class="headerlink" title="常用的批处理命令"></a>常用的批处理命令</h2><h4 id="1-启动jar"><a href="#1-启动jar" class="headerlink" title="1.启动jar"></a>1.启动jar</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start javaw -jar oes.jar</span><br><span class="line"></span><br><span class="line">echo ------------启动成功!--------------------</span><br><span class="line">pause</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<h4 id="2-停止服务-杀死进程"><a href="#2-停止服务-杀死进程" class="headerlink" title="2. 停止服务 杀死进程"></a>2. 停止服务 杀死进程</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off &amp; setlocal EnableDelayedExpansion</span><br><span class="line"></span><br><span class="line">set obj[0]&#x3D;9111</span><br><span class="line"></span><br><span class="line">set port&#x3D;0</span><br><span class="line">set pid&#x3D;0</span><br><span class="line"></span><br><span class="line">for &#x2F;f &quot;usebackq delims&#x3D;&#x3D; tokens&#x3D;1-2&quot; %%a in (&#96;set obj&#96;) do (</span><br><span class="line">    set port&#x3D;%%b</span><br><span class="line">    for &#x2F;f &quot;tokens&#x3D;5&quot; %%m in (&#39;netstat -aon ^| findstr &quot;:%%b&quot;&#39;) do (</span><br><span class="line">        set pid&#x3D;%%m</span><br><span class="line">    )</span><br><span class="line">    if &quot;!pid!&quot;&#x3D;&#x3D;&quot;0&quot; (</span><br><span class="line">        echo 端口号【!port!】没有占用</span><br><span class="line">    ) else (</span><br><span class="line">        echo 端口号【!port!】相关进程以杀死</span><br><span class="line">        taskkill &#x2F;f &#x2F;pid !pid!</span><br><span class="line">    )</span><br><span class="line">    set pid&#x3D;0</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<h4 id="3-部署hexo"><a href="#3-部署hexo" class="headerlink" title="3.部署hexo"></a>3.部署hexo</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off &amp; setlocal EnableDelayedExpansion</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D:</span><br><span class="line">cd D:\hexo</span><br><span class="line"></span><br><span class="line">echo.  </span><br><span class="line">echo.     </span><br><span class="line">echo.            </span><br><span class="line">echo ************************************ 美好的一天从敲代码开始 ********************************************************</span><br><span class="line">:s</span><br><span class="line">echo.    </span><br><span class="line">echo.     </span><br><span class="line">set &#x2F;p operation&#x3D;请输入你要的操作 n 代表你要新建一个markdown文件 d 代表你要部署项目到服务 :</span><br><span class="line">if &quot;%operation%&quot; &#x3D;&#x3D; &quot;n&quot; (</span><br><span class="line">echo.    </span><br><span class="line">echo.</span><br><span class="line">set &#x2F;p name&#x3D;请输入你要创建的文件名称:</span><br><span class="line">echo.    </span><br><span class="line">echo.</span><br><span class="line">echo 文件名称:!name!</span><br><span class="line">echo.    </span><br><span class="line">echo.</span><br><span class="line">echo 请稍候......</span><br><span class="line">goto n</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if &quot;%operation%&quot; &#x3D;&#x3D; &quot;d&quot; (</span><br><span class="line">goto d</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if &quot;%operation%&quot; NEQ  &quot;n&quot;  ( </span><br><span class="line">if &quot;%operation%&quot; NEQ  &quot;d&quot; (</span><br><span class="line">if &quot;%operation%&quot; &#x3D;&#x3D;  &quot;&quot; (</span><br><span class="line">echo 输入错误，请重新输入 &amp; pause</span><br><span class="line">goto s</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">:n</span><br><span class="line">echo.    </span><br><span class="line">echo.   </span><br><span class="line">hexo new  !name! &amp;  start D:\App\app\Typora\Typora.exe   &quot;D:\hexo\source\_posts\%name%.md&quot;  </span><br><span class="line"></span><br><span class="line">:d</span><br><span class="line">echo.    </span><br><span class="line">echo.   </span><br><span class="line">hexo clean | hexo g &amp; gulp | hexo d </span><br><span class="line">echo.</span><br><span class="line">echo 部署完成</span><br><span class="line">echo.</span><br><span class="line">pause</span><br><span class="line">goto s</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>建造者设计模式</title>
    <url>/2020/12/08/%E5%BB%BA%E9%80%A0%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="建造者设计模式-（BuilderPattern）"><a href="#建造者设计模式-（BuilderPattern）" class="headerlink" title="建造者设计模式 （BuilderPattern）"></a>建造者设计模式 （BuilderPattern）</h4><p><strong>描述：</strong> 首先建造者设计模式是用来构建复杂的对象的，它主要强调的是当对于一个复杂对象的构建，比如当一个类的构造函数的参数超过4个的时候，且都是可变参数时侯考虑使用建造者设计模式。</p>
<p><strong>核心思想:</strong>  当你的一个类需要很多的参数来构建时就可以把这些参数提取出来放在另一个类中进行构建</p>
<p><strong>建造者设计模式的优点：</strong></p>
<ul>
<li>封装性</li>
<li>独立 ， 易于扩展</li>
<li>便于控制细节风险，对建造过程逐步细化</li>
</ul>
<p><strong>建造者设计模式的使用场景：</strong></p>
<p>-　相同的方法，不同的执行顺序产生不同的结果<br>-　多个零件或者部件，可以配置到多个对象中产生不同的效果<br>-　产品类中调用的顺序不同会产生不同的结果</p>
<p><strong>示例:</strong></p>
<ul>
<li>构建 制茶模型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TeaModel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">caiZhai</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">weiTiao</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">hunGan</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">nianRou</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">faJiao</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">ganZao</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">baoCun</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourse</span><span class="params">(ArrayList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildTea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.forEach(x -&gt; &#123;</span><br><span class="line">            <span class="keyword">switch</span> (x) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;采摘&quot;</span>:</span><br><span class="line">                    <span class="keyword">this</span>.caiZhai();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;萎调&quot;</span>:</span><br><span class="line">                    <span class="keyword">this</span>.weiTiao();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;烘干&quot;</span>:</span><br><span class="line">                    <span class="keyword">this</span>.hunGan();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;保存&quot;</span>:</span><br><span class="line">                    <span class="keyword">this</span>.baoCun();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;干燥&quot;</span>:</span><br><span class="line">                    <span class="keyword">this</span>.ganZao();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;发酵&quot;</span>:</span><br><span class="line">                    <span class="keyword">this</span>.faJiao();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;揉捻&quot;</span>:</span><br><span class="line">                    <span class="keyword">this</span>.nianRou();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;未知的操作&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>红茶实现模型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackTeaModel</span> <span class="keyword">extends</span> <span class="title">TeaModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">caiZhai</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;红茶：采摘&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">weiTiao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;红茶：萎调&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hunGan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;红茶：烘干&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nianRou</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;红茶：揉捻&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">faJiao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;红茶：发酵&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ganZao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;红茶：干燥&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">baoCun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;红茶： 保存&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>抽象制茶的建造者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractTeaBuild</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置调制茶的顺序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setCourse</span><span class="params">(ArrayList&lt;String&gt; list)</span></span>;</span><br><span class="line">     </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取茶叶</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> TeaModel <span class="title">getTea</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>具体茶叶的建造者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackTeaBuilder</span> <span class="keyword">extends</span> <span class="title">AbstractTeaBuild</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 红茶的构建者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TeaModel tm = <span class="keyword">new</span> BlackTeaModel();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourse</span><span class="params">(ArrayList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        tm.setCourse(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TeaModel <span class="title">getTea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调制茶叶</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeaMakeDirector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AbstractTeaBuild ab = <span class="keyword">new</span> BlackTeaBuilder();</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//制作红茶 红茶制作工序 ：采摘 → 萎调 → 揉捻 → 发酵 → 干燥</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BlackTeaModel <span class="title">getBlackTea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.clear();</span><br><span class="line">        list.add(<span class="string">&quot;采摘&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;萎调&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;揉捻&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;发酵&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;干燥&quot;</span>);</span><br><span class="line">        ab.setCourse(list);</span><br><span class="line">        <span class="keyword">return</span> (BlackTeaModel) ab.getTea();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>需求来了 要三个红茶</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="comment">//来三杯绿茶</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TeaMakeDirector teaMakeDirector = <span class="keyword">new</span> TeaMakeDirector();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++)&#123;</span><br><span class="line">            teaMakeDirector.getBlackTea().buildTea();</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+i+ <span class="string">&quot;杯红茶已好&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结:</strong></p>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/%E5%BB%BA%E9%80%A0%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fuml.jpg" alt="建造者设计模式UML"></p>
<p><strong>product就是最终要生成的对象  例如:(BlackTeaModel)</strong></p>
<p><strong>Builde就是建造者的抽象基类  例如:( AbstractTeaBuild )</strong> </p>
<p><strong>ConcreteBuilde实现 Builde  例如:( BlackTeaBuilder)</strong> </p>
<p><strong>Director: 决定如何构建最终产品的算法. 其会包含一个负责组装的方法(getBlackTea) 调用这个方法就相当于组装好了一个产品  例如(TeaMakeDirector)</strong></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>桥接设计模式</title>
    <url>/2020/12/20/%E6%A1%A5%E6%8E%A5%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="桥接设计模式-Bridge-Pattern"><a href="#桥接设计模式-Bridge-Pattern" class="headerlink" title="桥接设计模式(Bridge Pattern)"></a>桥接设计模式(Bridge Pattern)</h4><p><strong>描述：</strong> 桥接设计模式是用于把抽象化于实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型设计模式，它通过提供抽象化和实现化之间的桥接结构来实现二者的解耦。</p>
<p><strong>核心思想：</strong> 将抽象部分与实现部分分离，使它们可以独立的变化</p>
<p><strong>使用场景：</strong> </p>
<ul>
<li>如果一个系统需要在构建的抽象和具体角色化之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系通过桥接模式可以使它们在抽象层建立一个关联关系。</li>
<li>对于那些不希望使用继承或者因为多层次导致导致的系统类的个数急剧增加的系统，桥接模式尤为适用</li>
<li>一个类存在两个独立变化的维度，且这两个类都需要进行扩展。</li>
</ul>
<p><strong>桥接设计模式的优点：</strong></p>
<ul>
<li> 抽象和实现的分离。 </li>
<li>优秀的扩展能力。 </li>
<li>实现细节对客户透明。</li>
</ul>
<p><strong>桥接设计模式的缺点：</strong></p>
<ul>
<li>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</li>
</ul>
<p><strong>示例：</strong></p>
<ul>
<li>目标接口。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建实现了 <em>DrawAPI</em> 接口的实体桥接实现类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedCircle</span> <span class="keyword">implements</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Drawing Circle[ color: red, radius: &quot;</span></span><br><span class="line">         + radius +<span class="string">&quot;, x: &quot;</span> +x+<span class="string">&quot;, &quot;</span>+ y +<span class="string">&quot;]&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenCircle</span> <span class="keyword">implements</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Drawing Circle[ color: green, radius: &quot;</span></span><br><span class="line">         + radius +<span class="string">&quot;, x: &quot;</span> +x+<span class="string">&quot;, &quot;</span>+ y +<span class="string">&quot;]&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>抽象桥接接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="keyword">protected</span> DrawAPI drawAPI;</span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="title">Shape</span><span class="params">(DrawAPI drawAPI)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.drawAPI = drawAPI;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现桥接接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> x, y, radius;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> radius, DrawAPI drawAPI)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(drawAPI);</span><br><span class="line">      <span class="keyword">this</span>.x = x;  </span><br><span class="line">      <span class="keyword">this</span>.y = y;  </span><br><span class="line">      <span class="keyword">this</span>.radius = radius;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      drawAPI.drawCircle(radius,x,y);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BridgePatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Shape redCircle = <span class="keyword">new</span> Circle(<span class="number">100</span>,<span class="number">100</span>, <span class="number">10</span>, <span class="keyword">new</span> RedCircle());</span><br><span class="line">      Shape greenCircle = <span class="keyword">new</span> Circle(<span class="number">100</span>,<span class="number">100</span>, <span class="number">10</span>, <span class="keyword">new</span> GreenCircle());</span><br><span class="line"> </span><br><span class="line">      redCircle.draw();</span><br><span class="line">      greenCircle.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>模板设计模式</title>
    <url>/2021/01/07/%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="模板设计模式-Template-Pattern"><a href="#模板设计模式-Template-Pattern" class="headerlink" title="模板设计模式(Template Pattern)"></a>模板设计模式(Template Pattern)</h4><p><strong>描述：</strong> 定义一个操作中的算法骨架，而将具体的步骤延迟到子类当中。模板方法子类不改变一个算法的结构即可重新定义算法的实现</p>
<p><strong>核心思想：</strong> 在父类中定义算法的执行步骤顺序，由子类来具体实现，但不能改变执行顺序</p>
<p><strong>使用场景：</strong>  </p>
<ul>
<li>有多个子类共有的方法，且逻辑相同。 </li>
<li>重要的、复杂的方法，可以考虑作为模板方法。</li>
</ul>
<p><strong>模板设计模式的优点：</strong></p>
<ul>
<li>封装不变部分，扩展可变部分。</li>
<li>提取公共代码，便于维护。 </li>
<li>行为由父类控制，子类实现。</li>
</ul>
<p><strong>模板设计模式的缺点</strong></p>
<ul>
<li>每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大</li>
</ul>
<p><strong>示例：</strong></p>
<ul>
<li>抽象出一个模板对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模板</span></span><br><span class="line"> <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//初始化游戏</span></span><br><span class="line">        initialize();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始游戏</span></span><br><span class="line">        startPlay();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//结束游戏</span></span><br><span class="line">        endPlay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>不同对象的实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Cricket</span> <span class="keyword">implements</span>  <span class="title">Game</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cricket  初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cricket  开始&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cricket  退出结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Football</span> <span class="keyword">implements</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Football 初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Football 开始&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Football 退出结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Game game = <span class="keyword">new</span> Cricket();</span><br><span class="line">        game.play();</span><br><span class="line">        System.out.println();</span><br><span class="line">        game = <span class="keyword">new</span> Football();</span><br><span class="line">        game.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>状态设计模式</title>
    <url>/2020/12/25/%E7%8A%B6%E6%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="状态设计模式-State-Pattern"><a href="#状态设计模式-State-Pattern" class="headerlink" title="状态设计模式(State Pattern)"></a>状态设计模式(State Pattern)</h4><p><strong>描述：</strong> 在状态设计模式中类的行为是基于状态改变的，这种类型的模式属于行为设计模式。在状态上设计模式中我们创建表示各种状态和一个行为随这状态对象改变而改变</p>
<p><strong>核心思想：</strong> 允许对象在内部状态发生改变时改变它的行为，对象看起来好像改变了它的类</p>
<p><strong>使用场景：</strong></p>
<ul>
<li>行为随状态的改变而改变的场景</li>
<li>条件，分支语句的代替者</li>
</ul>
<p><strong>状态设计模式的优点：</strong></p>
<ul>
<li>封装了转换规则。 </li>
<li> 枚举可能的状态，在枚举状态之前需要确定状态种类。 </li>
<li>将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 </li>
<li>允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 </li>
<li>可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。</li>
</ul>
<p><strong>状态设计模式的缺点：</strong></p>
<ul>
<li>状态模式的使用必然会增加系统类和对象的个数。 </li>
<li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 </li>
<li>状态模式对”开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。</li>
</ul>
<p><strong>示例：</strong></p>
<p><strong>需求：</strong></p>
<p>我们考虑设计一个金库警报系统，这个系统会根据白天晚上做出不同的响应。</p>
<p>有一个金库<br> 金库与警报中心相连<br> 金库里有警铃和电话<br> 金库里有时钟</p>
<p>金库只能在白天使用<br> 白天使用金库，会在警报中心留下记录<br> 晚上使用金库，会向警报中心发送紧急事态通知</p>
<p>警铃白天晚上都能用<br> 使用警铃，会向警报中心发送紧急事态通知</p>
<p>电话都可以使用<br> 白天使用电话，会呼叫警报中心<br> 晚上使用电话，会呼叫警报中心的留言电话</p>
<p>基本就是以上的需求逻辑。</p>
<p><strong>分析：</strong></p>
<p>状态模式会发现，这些不同的行为，主要依赖于两个状态，就是白天和晚上。所以状态模式会抽象出这两种状态，每个状态就会有自己的行为实现，比如白天这个状态会实现自己的使用金库的方法，通话的方法，晚上的类也会实现自己的行为逻辑，最后我们只要取得状态对象的委托调用他们的方法就行了，不管他们具体是怎么实现的。</p>
<ul>
<li>抽象状态接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doClock</span><span class="params">(Context context, <span class="keyword">int</span> hour)</span></span>;    <span class="comment">// 设置时间</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doUse</span><span class="params">(Context context)</span></span>;                <span class="comment">// 使用金库</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doAlarm</span><span class="params">(Context context)</span></span>;              <span class="comment">// 按下警铃</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doPhone</span><span class="params">(Context context)</span></span>;              <span class="comment">// 正常通话</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>实现状态接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NightState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> NightState singleton = <span class="keyword">new</span> NightState();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NightState</span><span class="params">()</span> </span>&#123;                              <span class="comment">// 构造函数的可见性是private</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> State <span class="title">getInstance</span><span class="params">()</span> </span>&#123;                 <span class="comment">// 获取唯一实例</span></span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doClock</span><span class="params">(Context context, <span class="keyword">int</span> hour)</span> </span>&#123;    <span class="comment">// 设置时间</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">9</span> &lt;= hour &amp;&amp; hour &lt; <span class="number">17</span>) &#123;</span><br><span class="line">            context.changeState(DayState.getInstance());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doUse</span><span class="params">(Context context)</span> </span>&#123;                <span class="comment">// 使用金库</span></span><br><span class="line">        context.callSecurityCenter(<span class="string">&quot;紧急：晚上使用金库！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAlarm</span><span class="params">(Context context)</span> </span>&#123;              <span class="comment">// 按下警铃</span></span><br><span class="line">        context.callSecurityCenter(<span class="string">&quot;按下警铃(晚上)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPhone</span><span class="params">(Context context)</span> </span>&#123;              <span class="comment">// 正常通话</span></span><br><span class="line">        context.recordLog(<span class="string">&quot;晚上的通话录音&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;                          <span class="comment">// 显示表示类的文字</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[晚上]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DayState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DayState singleton = <span class="keyword">new</span> DayState();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DayState</span><span class="params">()</span> </span>&#123;                                <span class="comment">// 构造函数的可见性是private</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> State <span class="title">getInstance</span><span class="params">()</span> </span>&#123;                 <span class="comment">// 获取唯一实例</span></span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doClock</span><span class="params">(Context context, <span class="keyword">int</span> hour)</span> </span>&#123;    <span class="comment">// 设置时间</span></span><br><span class="line">        <span class="keyword">if</span> (hour &lt; <span class="number">9</span> || <span class="number">17</span> &lt;= hour) &#123;</span><br><span class="line">            context.changeState(NightState.getInstance());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doUse</span><span class="params">(Context context)</span> </span>&#123;                <span class="comment">// 使用金库</span></span><br><span class="line">        context.recordLog(<span class="string">&quot;使用金库(白天)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAlarm</span><span class="params">(Context context)</span> </span>&#123;              <span class="comment">// 按下警铃</span></span><br><span class="line">        context.callSecurityCenter(<span class="string">&quot;按下警铃(白天)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPhone</span><span class="params">(Context context)</span> </span>&#123;              <span class="comment">// 正常通话</span></span><br><span class="line">        context.callSecurityCenter(<span class="string">&quot;正常通话(白天)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;                          <span class="comment">// 显示表示类的文字</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[白天]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>抽象 出上下文 和 白天晚上要干的事情</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setClock</span><span class="params">(<span class="keyword">int</span> hour)</span></span>;                <span class="comment">// 设置时间</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changeState</span><span class="params">(State state)</span></span>;          <span class="comment">// 改变状态</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">callSecurityCenter</span><span class="params">(String msg)</span></span>;    <span class="comment">// 联系警报中心</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordLog</span><span class="params">(String msg)</span></span>;             <span class="comment">// 在警报中心留下记录</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现抽象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SafeFrame</span> <span class="keyword">implements</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> State state = DayState.getInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置时间</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClock</span><span class="params">(<span class="keyword">int</span> hour)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        state.doClock(<span class="keyword">this</span>, hour);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(Integer e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="number">1</span>) &#123;           <span class="comment">// 金库使用按钮</span></span><br><span class="line">            state.doUse(<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e == <span class="number">2</span>) &#123;  <span class="comment">// 按下警铃按钮</span></span><br><span class="line">            state.doAlarm(<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e == <span class="number">3</span>) &#123;  <span class="comment">// 正常通话按钮</span></span><br><span class="line">            state.doPhone(<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e == <span class="number">4</span>) &#123;   <span class="comment">// 结束按钮</span></span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改变状态</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeState</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        System.out.println(<span class="string">&quot;从&quot;</span> + <span class="keyword">this</span>.state + <span class="string">&quot;状態变为了&quot;</span> + state + <span class="string">&quot;状态。&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 联系警报中心</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callSecurityCenter</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;call! &quot;</span> + msg + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在警报中心留下记录</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recordLog</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;record ... &quot;</span> + msg + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SafeFrame frame = <span class="keyword">new</span> SafeFrame();</span><br><span class="line">        frame.setClock(<span class="number">18</span>);</span><br><span class="line">        frame.actionPerformed(<span class="number">1</span>);</span><br><span class="line">        frame.actionPerformed(<span class="number">2</span>);</span><br><span class="line">        frame.actionPerformed(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>策略者设计模式</title>
    <url>/2020/12/08/%E7%AD%96%E7%95%A5%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="策略者设计模式-StrategyPattern"><a href="#策略者设计模式-StrategyPattern" class="headerlink" title="策略者设计模式 (StrategyPattern)"></a>策略者设计模式 (StrategyPattern)</h4><p><strong>描述：</strong>  策略者解决的是在多种算法相似的情况下，使用if….else…ss等所带来的的复杂代码。解决的思路是，将这些算法的代码封装成一个一个的类，实现统一接口。</p>
<p><strong>核心思想：</strong> 策略设计模式就是 实现一种策略 展示不同的结果</p>
<p><strong>使用场景：</strong> 有多种动物需要对它们进行排序，但每种动物的排序规则都不一样 此时我们就会写很多的if() 判断语句  此时就可以使用策略者设计模式</p>
<p><strong>策略者设计模式的优点：</strong></p>
<ul>
<li>算法可以自由的切换</li>
<li>减少多重判断的使用</li>
<li>扩展性好</li>
</ul>
<p><strong>策略者设计模式的缺点：</strong></p>
<ul>
<li>策略类都会暴露在外，客户端都要知道每个策略算法的区别</li>
<li>如果系统中的的算法种类很多的话 策略类会爆炸式增长，不便于维护</li>
</ul>
<p><strong>示例：</strong></p>
<ul>
<li>猫的对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">Cat</span><span class="params">(Integer age,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li> 抽象算法规则</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(T o1, T o2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>猫的算法规则实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatSort</span> <span class="keyword">implements</span>  <span class="title">Comparator</span>&lt;<span class="title">Cat</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Cat o1, Cat o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o1.getName().compareTo(o2.getName())&gt;<span class="number">0</span>)  <span class="keyword">return</span>  <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>  <span class="keyword">if</span>(o1.getName().compareTo(o2.getName())==<span class="number">0</span>)&#123;</span><br><span class="line">             <span class="keyword">if</span>(o1.getAge().compareTo(o2.getAge())&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">             <span class="keyword">else</span>  <span class="keyword">if</span>(o1.getAge().compareTo(o2.getAge())&lt;<span class="number">0</span>) <span class="keyword">return</span>  -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>统一的算法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(T[] arr, Comparator&lt;T&gt; comparator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            T temp = arr[i];</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">for</span> (; j &gt; <span class="number">0</span> &amp;&amp; comparator.compare(arr[j - <span class="number">1</span>], temp) &gt; <span class="number">0</span>; ) &#123;</span><br><span class="line">                arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j != i) &#123;</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端的调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    test&lt;Cat&gt; cattest = <span class="keyword">new</span> test&lt;Cat&gt;();</span><br><span class="line">    Cat[] cat = &#123;<span class="keyword">new</span> Cat(<span class="number">2</span>, <span class="string">&quot;a&quot;</span>), <span class="keyword">new</span> Cat(<span class="number">3</span>, <span class="string">&quot;d&quot;</span>), <span class="keyword">new</span> Cat(<span class="number">4</span>, <span class="string">&quot;b&quot;</span>), <span class="keyword">new</span> Cat(<span class="number">6</span>, <span class="string">&quot;a&quot;</span>), <span class="keyword">new</span> Cat(<span class="number">3</span>, <span class="string">&quot;c&quot;</span>)&#125;;</span><br><span class="line">    cattest.insertSort(cat, <span class="keyword">new</span> CatSort());</span><br><span class="line">    System.out.println(Arrays.toString(cat));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<p>此处的主要思想就是使用的向上转型的思想，比如我以上的方法想要在加几个猫的排序规则，那么此时我只需要实现排序规则的接口就可以了，不需要改动其他的代码，主要就是我的排序算法insertSort（）使用是父类的Comparator接收的参数，只要实现了它，是它的子类，那么你就可以自由任意切换各种算法。</p>
<p><strong>附图：</strong></p>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/%E7%AD%96%E7%95%A5%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FUml.png" alt="策略者设计模式UML"></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>组合设计模式</title>
    <url>/2020/12/20/%E7%BB%84%E5%90%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="组合设计模式-Composite-Pattern"><a href="#组合设计模式-Composite-Pattern" class="headerlink" title="组合设计模式(Composite Pattern)"></a>组合设计模式(Composite Pattern)</h4><p><strong>描述：</strong> 组合设计模式又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表时部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象的树形结构</p>
<p><strong>核心思想：</strong> 将对象组合成树形结构以表示“部分—整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用一致性。</p>
<p><strong>使用场景：</strong></p>
<ul>
<li>您想表示的部分-整体层次结构</li>
<li>您希望用户忽略组合对象与单个对象的不同，用户将统一的使用组合结构中的所有对象</li>
</ul>
<p><strong>组合设计模式的优点：</strong> </p>
<ul>
<li>高层模块表用简单</li>
<li>节点自由增加</li>
</ul>
<p><strong>组合设计模式的缺点：</strong></p>
<ul>
<li>在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。</li>
</ul>
<p><strong>示例：</strong></p>
<ul>
<li>创建一个对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String dept;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> salary;</span><br><span class="line">   <span class="keyword">private</span> List&lt;Employee&gt; subordinates;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//构造函数</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name,String dept, <span class="keyword">int</span> sal)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.dept = dept;</span><br><span class="line">      <span class="keyword">this</span>.salary = sal;</span><br><span class="line">      subordinates = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Employee e)</span> </span>&#123;</span><br><span class="line">      subordinates.add(e);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Employee e)</span> </span>&#123;</span><br><span class="line">      subordinates.remove(e);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getSubordinates</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> subordinates;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="string">&quot;Employee :[ Name : &quot;</span>+ name </span><br><span class="line">      +<span class="string">&quot;, dept : &quot;</span>+ dept + <span class="string">&quot;, salary :&quot;</span></span><br><span class="line">      + salary+<span class="string">&quot; ]&quot;</span>);</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositePatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Employee CEO = <span class="keyword">new</span> Employee(<span class="string">&quot;John&quot;</span>,<span class="string">&quot;CEO&quot;</span>, <span class="number">30000</span>);</span><br><span class="line"> </span><br><span class="line">      Employee headSales = <span class="keyword">new</span> Employee(<span class="string">&quot;Robert&quot;</span>,<span class="string">&quot;Head Sales&quot;</span>, <span class="number">20000</span>);</span><br><span class="line"> </span><br><span class="line">      Employee headMarketing = <span class="keyword">new</span> Employee(<span class="string">&quot;Michel&quot;</span>,<span class="string">&quot;Head Marketing&quot;</span>, <span class="number">20000</span>);</span><br><span class="line"> </span><br><span class="line">      Employee clerk1 = <span class="keyword">new</span> Employee(<span class="string">&quot;Laura&quot;</span>,<span class="string">&quot;Marketing&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">      Employee clerk2 = <span class="keyword">new</span> Employee(<span class="string">&quot;Bob&quot;</span>,<span class="string">&quot;Marketing&quot;</span>, <span class="number">10000</span>);</span><br><span class="line"> </span><br><span class="line">      Employee salesExecutive1 = <span class="keyword">new</span> Employee(<span class="string">&quot;Richard&quot;</span>,<span class="string">&quot;Sales&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">      Employee salesExecutive2 = <span class="keyword">new</span> Employee(<span class="string">&quot;Rob&quot;</span>,<span class="string">&quot;Sales&quot;</span>, <span class="number">10000</span>);</span><br><span class="line"> </span><br><span class="line">      CEO.add(headSales);</span><br><span class="line">      CEO.add(headMarketing);</span><br><span class="line"> </span><br><span class="line">      headSales.add(salesExecutive1);</span><br><span class="line">      headSales.add(salesExecutive2);</span><br><span class="line"> </span><br><span class="line">      headMarketing.add(clerk1);</span><br><span class="line">      headMarketing.add(clerk2);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//打印该组织的所有员工</span></span><br><span class="line">      System.out.println(CEO); </span><br><span class="line">      <span class="keyword">for</span> (Employee headEmployee : CEO.getSubordinates()) &#123;</span><br><span class="line">         System.out.println(headEmployee);</span><br><span class="line">         <span class="keyword">for</span> (Employee employee : headEmployee.getSubordinates()) &#123;</span><br><span class="line">            System.out.println(employee);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;        </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存的过期策略</title>
    <url>/2021/04/14/%E7%BC%93%E5%AD%98%E7%9A%84%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<h3 id="缓存的过期策略LFU-FIFO-LRU"><a href="#缓存的过期策略LFU-FIFO-LRU" class="headerlink" title="缓存的过期策略LFU,FIFO,LRU"></a>缓存的过期策略LFU,FIFO,LRU</h3><ul>
<li><strong>FIFO（First In First out）：先见先出，淘汰最先近来的页面，新进来的页面最迟被淘汰，完全符合队列。</strong></li>
</ul>
<p>按照“先进先出（First In，First Out）”的原理淘汰数据，正好符合队列的特性，数据结构上使用队列Queue来实现。<br> 新访问的数据插入FIFO队列尾部，数据在FIFO队列中顺序移动；<br> 淘汰FIFO队列头部的数据；</p>
<ul>
<li><strong>LRU（Least recently used）:最近最少使用，淘汰最近不使用的页面</strong></li>
</ul>
<p>（Least recently used，最近最少使用）<a href="http://lib.csdn.net/base/datastructure">算法</a>根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。<br>最常见的实现是使用一个链表保存缓存数据 ,<br>  新数据插入到链表头部；<br> 每当缓存命中（即缓存数据被访问），则将数据移到链表头部；<br> 当链表满的时候，将链表尾部的数据丢弃。</p>
<ul>
<li><strong>LFU（Least frequently used）: 最近使用次数最少， 淘汰使用次数最少的页面</strong></li>
</ul>
<p>（Least Frequently Used）算法根据数据的历史访问频率来淘汰数据，其核心思想是“如果数据过去被访问多次，那么将来被访问的频率也更高”。<br>LFU的每个数据块都有一个引用计数，所有数据块按照引用计数排序，具有相同引用计数的数据块则按照时间排序。</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>缓存</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>网络OSI七层模型理解</title>
    <url>/2021/03/21/%E7%BD%91%E7%BB%9COSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="网络OSI七层模型"><a href="#网络OSI七层模型" class="headerlink" title="网络OSI七层模型"></a>网络OSI七层模型</h3><p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/data/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9Cosi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B.png" alt="网络osi七层模型"></p>
<ul>
<li>应用层<br>网络服务与最终用户的一个接口。<br>协议有：HTTP FTP TFTP SMTP SNMP DNS TELNET HTTPS POP3 DHCP</li>
<li>表示层<br>数据的表示、安全、压缩。（在五层模型里面已经合并到了应用层）<br>格式有，JPEG、ASCll、EBCDIC、加密格式等 [2]</li>
<li>会话层<br>建立、管理、终止会话。（在五层模型里面已经合并到了应用层）<br>对应主机进程，指本地主机与远程主机正在进行的会话</li>
<li>传输层<br>定义传输数据的协议端口号，以及流控和差错校验。<br>协议有：TCP UDP，数据包一旦离开网卡即进入网络传输层</li>
<li>网络层<br>进行逻辑地址寻址，实现不同网络之间的路径选择。<br>协议有：ICMP IGMP IP（IPV4 IPV6）</li>
<li>数据链路层<br>建立逻辑连接、进行硬件地址寻址、差错校验 [3]  等功能。（由底层网络定义协议）<br>将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正。</li>
<li>物理层<br>建立、维护、断开物理连接。（由底层网络定义协议）</li>
</ul>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰器设计模式</title>
    <url>/2020/12/13/%E8%A3%85%E9%A5%B0%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="装饰器设计模式-Decorator-Pattern"><a href="#装饰器设计模式-Decorator-Pattern" class="headerlink" title="装饰器设计模式(Decorator Pattern)"></a>装饰器设计模式(Decorator Pattern)</h4><p><strong>描述：</strong> 装饰器设计模式就是给对象动态的添加职责，行为的，它是用来代替继承的。相比于继承它更显得灵活。</p>
<p><strong>核心思想：</strong> 一般情况下当我们要扩展一个类的时候会使用继承，但这不是很安全，随着功能的增加子类会爆炸式的增长。</p>
<p><strong>装饰器设计模式的优点：</strong> 装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能</p>
<p><strong>装饰器设计模式的缺点：</strong> 多层装饰比较复杂。</p>
<p><strong>装饰器设计模式的使用场景：</strong>  </p>
<ul>
<li>扩展一个类的功能。 </li>
<li>动态增加功能，动态撤销</li>
</ul>
<p><strong>示例:</strong></p>
<ul>
<li>动物的抽象接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 一个吃的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>  <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>猫实现动物接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span>  <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wo是猫，在吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>装饰器的抽象类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CatDecoractor</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Animal animal;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">CatDecoractor</span><span class="params">(Animal animal)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.animal=animal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        animal.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li> 现在给猫扩展一个喝水的方法  </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatDecoractorImpl</span>  <span class="keyword">extends</span>  <span class="title">CatDecoractor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  Animal animal;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CatDecoractorImpl</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(animal);</span><br><span class="line">        <span class="keyword">this</span>.animal=animal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        animal.eat();</span><br><span class="line">        drinking(animal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">drinking</span><span class="params">(Animal animal)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃完之后在喝水&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">        CatDecoractorImpl catDecoractor = <span class="keyword">new</span> CatDecoractorImpl(cat);</span><br><span class="line">        catDecoractor.eat();</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>附图：</strong></p>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/%E8%A3%85%E9%A5%B0%E5%99%A8%E7%B1%BB%E5%9B%BE.png" alt="装饰器设计模式UML"></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者设计模式</title>
    <url>/2020/12/14/%E8%A7%82%E5%AF%9F%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="观察者设计模式-Observer-Pattern"><a href="#观察者设计模式-Observer-Pattern" class="headerlink" title="观察者设计模式(Observer Pattern)"></a>观察者设计模式(Observer Pattern)</h4><p><strong>描述：</strong> 当对象存在一对多的关系时，使用观察者设计模式。比如一个对象被修改时，则会通知依赖他的对象。观察者设计模式属于行为行设计模式</p>
<p><strong>核心思想：</strong> 当一个对象发生变化时通知其他依赖它的对象</p>
<p><strong>使用场景：</strong> </p>
<ul>
<li><p>一个对象改变一个或多个对象也发生变化，而不知道有多少对象发生变化，降低对象之间的耦合度。</p>
</li>
<li><p>一个对象必须通知其他的对象，而不知道这些对象都有谁</p>
</li>
<li><p>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制</p>
</li>
<li><p>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。</p>
</li>
</ul>
<p><strong>观察者设计模式优点：</strong> </p>
<ul>
<li>观察者和被观察者时抽象解耦的</li>
<li>建立一套触发机制</li>
</ul>
<p><strong>观察者设计模式缺点：</strong></p>
<ul>
<li>如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。</li>
<li>如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。</li>
<li>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</li>
</ul>
<p><strong>注意事项：</strong></p>
<ul>
<li>JAVA 中已经有了对观察者模式的支持类</li>
<li>避免循环引用</li>
<li>如果顺序执行，某一观察者会导致系统卡壳，一般采用异步的方式</li>
</ul>
<p><strong>示例：</strong></p>
<p>现有一个需求，有一个天气预报系统，获取天气对象，三个字段，温度 ， 湿度， 气压，当它们的数值发生变化时通知到布告板展现出来 </p>
<ul>
<li>抽象出主题接口对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主题（发布者、被观察者）</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注册一个观察者进来</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一个观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通知其他观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>抽象观察者的对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;   </span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>抽象布告对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DisplayElement</span> </span>&#123;    <span class="comment">// 更换布告</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>被观察者的具体实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList observers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;<span class="comment">//温度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;<span class="comment">//湿度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;<span class="comment">//气压</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        observers = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册观察者     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        observers.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = observers.indexOf(o);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            observers.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知各个观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; observers.size(); i++) &#123;</span><br><span class="line">            Observer observer = (Observer) observers.get(i);</span><br><span class="line">            observer.update(temperature, humidity, pressure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measurementsChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurements</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        measurementsChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>显示当前天气的公告牌CurrentConditionsDisplay</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前温度为：&quot;</span> + <span class="keyword">this</span>.temperature + <span class="string">&quot;℃&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前湿度为：&quot;</span> + <span class="keyword">this</span>.humidity);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前气压为：&quot;</span> + <span class="keyword">this</span>.pressure);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>只显示温度和湿度的公告牌</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Current</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前温度为：&quot;</span> + <span class="keyword">this</span>.temperature + <span class="string">&quot;℃&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前湿度为：&quot;</span> + <span class="keyword">this</span>.humidity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line">    weatherData.registerObserver(<span class="keyword">new</span> CurrentConditionsDisplay());</span><br><span class="line">    weatherData.registerObserver(<span class="keyword">new</span> Current());</span><br><span class="line">    weatherData.setMeasurements(<span class="number">80</span>, <span class="number">65</span>, <span class="number">30.4f</span>);</span><br><span class="line">    weatherData.setMeasurements(<span class="number">82</span>, <span class="number">70</span>, <span class="number">29.2f</span>);</span><br><span class="line">    weatherData.setMeasurements(<span class="number">78</span>, <span class="number">90</span>, <span class="number">29.2f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>附图：</strong></p>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/%E8%A7%82%E5%AF%9F%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FUML.png" alt="观察者设计模式UML"></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>解释器设计模式</title>
    <url>/2020/12/25/%E8%A7%A3%E9%87%8A%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="解释器设计模式-Interpreter-Pattern"><a href="#解释器设计模式-Interpreter-Pattern" class="headerlink" title="解释器设计模式(Interpreter Pattern)"></a>解释器设计模式(Interpreter Pattern)</h4><p><strong>描述：</strong> 解释器设计模式就是提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。</p>
<p><strong>核心思想：</strong> 对于一些固定语法构建一个解释 语法 的解释器</p>
<p><strong>使用场景：</strong></p>
<ul>
<li>可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。</li>
<li> 一些重复出现的问题可以用一种简单的语言来进行表达。 </li>
<li>一个简单语法需要解释的场景。</li>
</ul>
<p><strong>解释器设计模式的优点：</strong></p>
<ul>
<li>可扩展性比较好，灵活。 </li>
<li> 增加了新的解释表达式的方式。</li>
<li>易于实现简单文法。</li>
</ul>
<p><strong>解释器设计模式的缺点：</strong></p>
<ul>
<li>可利用场景比较少。 </li>
<li>对于复杂的文法比较难维护。 </li>
<li>解释器模式会引起类膨胀。 </li>
<li>解释器模式采用递归调用方法。</li>
</ul>
<p><strong>示例：</strong></p>
<ul>
<li>抽象出  表达式接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interpreter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>相加表达式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">AddInterpreter</span> <span class="keyword">implements</span> <span class="title">Interpreter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Interpreter firstExpression, secondExpression;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddInterpreter</span> <span class="params">(Interpreter firstExpression, Interpreter secondExpression)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstExpression = firstExpression;</span><br><span class="line">        <span class="keyword">this</span>.secondExpression = secondExpression;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstExpression.interpret() + <span class="keyword">this</span>.secondExpression.interpret();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;+&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>相乘表达式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiInterpreter</span> <span class="keyword">implements</span> <span class="title">Interpreter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Interpreter firstExpression, secondExpression;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MultiInterpreter</span><span class="params">(Interpreter firstExpression, Interpreter secondExpression)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstExpression = firstExpression;</span><br><span class="line">        <span class="keyword">this</span>.secondExpression = secondExpression;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstExpression.interpret() * <span class="keyword">this</span>.secondExpression.interpret();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;*&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>数值表达式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">NumberInterpreter</span> <span class="keyword">implements</span> <span class="title">Interpreter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumberInterpreter</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumberInterpreter</span><span class="params">(String number)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = Integer.parseInt(number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>格式化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpressionParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Interpreter&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">parse</span> <span class="params">(String expression)</span> </span>&#123;</span><br><span class="line">        String[] itemArray = expression.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String symbol : itemArray) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!OperatorUtil.isOperator(symbol)) &#123;</span><br><span class="line">                Interpreter numberExpression = <span class="keyword">new</span> NumberInterpreter(symbol);</span><br><span class="line">                stack.push(numberExpression);</span><br><span class="line">                System.out.println(String.format(<span class="string">&quot;入栈： %d&quot;</span>, numberExpression.interpret()));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//是运算符可以计算</span></span><br><span class="line">                Interpreter firstExpression = stack.pop();</span><br><span class="line">                Interpreter secondExpression = stack.pop();</span><br><span class="line">                System.out.println(String.format(<span class="string">&quot;出栈：%d 和 %d&quot;</span>, firstExpression.interpret(),</span><br><span class="line">                        secondExpression.interpret()));</span><br><span class="line">                Interpreter operator = OperatorUtil.getExpression(firstExpression, secondExpression, symbol);</span><br><span class="line">                System.out.println(String.format(<span class="string">&quot;应用运算符: %s&quot;</span>, operator));</span><br><span class="line">                <span class="keyword">int</span> result = operator.interpret();</span><br><span class="line">                NumberInterpreter numberInterpreter = <span class="keyword">new</span> NumberInterpreter(result);</span><br><span class="line">                stack.push(numberInterpreter);</span><br><span class="line">                System.out.println(String.format(<span class="string">&quot;阶段结果入栈: %d&quot;</span>, result));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop().interpret();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>工具类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lass OperatorUtil &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isOperator</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (symbol.equals(<span class="string">&quot;+&quot;</span>) || symbol.equals(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Interpreter <span class="title">getExpression</span><span class="params">(Interpreter first,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            Interpreter second,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            String symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (symbol) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> AddInterpreter(first, second);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> MultiInterpreter(first, second);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String input = <span class="string">&quot;6 100 11 + *&quot;</span>;</span><br><span class="line">        ExpressionParser parser = <span class="keyword">new</span> ExpressionParser();</span><br><span class="line">        <span class="keyword">int</span> result = parser.parse(input);</span><br><span class="line">        System.out.println(<span class="string">&quot;解释器运算结果：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>访问者设计模式</title>
    <url>/2021/01/07/%E8%AE%BF%E9%97%AE%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="访问者设计模式-Vistor-Pattern"><a href="#访问者设计模式-Vistor-Pattern" class="headerlink" title="访问者设计模式(Vistor Pattern)"></a>访问者设计模式(Vistor Pattern)</h4><p><strong>描述：</strong></p>
<p><strong>核心思想：</strong></p>
<p><strong>使用场景：</strong></p>
<p><strong>访问者设计模式的优点：</strong></p>
<p><strong>访问者设计模式的缺点：</strong></p>
<p><strong>示例：</strong></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>责任链设计模式</title>
    <url>/2020/12/14/%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="责任链设计模式-Chain-of-Responsibility-Pattern"><a href="#责任链设计模式-Chain-of-Responsibility-Pattern" class="headerlink" title="责任链设计模式(Chain of Responsibility Pattern)"></a>责任链设计模式(Chain of Responsibility Pattern)</h4><p><strong>描述：</strong> 责任链设计模式属于行为型模式，在这种模式中通常每个接收者都包含对另一个接收者的调用。</p>
<p>从而形成链式调用</p>
<p><strong>核心思想：</strong> 避免请求发送者于接收者耦合在一起，让多个都有可能接收请求，将这些对象链接成一条链，并且沿着这条链传递请求。直到对象处理完为止。</p>
<p><strong>使用场景：</strong> </p>
<ul>
<li>有多个对象可以处理同一个请求，具体那个对象处理改请求由运行时决定</li>
<li>在不明确指定接收者的情况下，向多个对象中的一个对象提交一个请求</li>
<li>可动态的指定一组对象处理请求</li>
</ul>
<p><strong>责任链设计模式的优点：</strong></p>
<ul>
<li>降低耦合度。它将请求的发送者和接收者解耦。 </li>
<li>简化了对象。使得对象不需要知道链的结构。 </li>
<li>增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 </li>
<li>增加新的请求处理类很方便。</li>
</ul>
<p><strong>责任链设计模式的缺点：</strong></p>
<ul>
<li>不能保证请求一定被接收。</li>
<li>系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 </li>
<li>可能不容易观察运行时的特征，有碍于除错。</li>
</ul>
<p><strong>示例：</strong></p>
<p><strong>现在有需求有一个字符串需要对它进行处理， 替换敏感字符， 特殊符号进行特殊的处理</strong></p>
<ul>
<li>定义一个字符串</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Msg</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String msg;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Msg&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;msg=&#x27;&quot;</span> + msg + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>字符串处理的抽象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Msg m)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>做一个链式调用的类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterChain</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">    List&lt;Filter&gt; filters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterChain <span class="title">add</span><span class="params">(Filter f)</span></span>&#123;</span><br><span class="line">        filters.add(f);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doFilter</span><span class="params">(Msg m)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Filter f : filters)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!f.doFilter(m)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>特殊符号进行特殊的处理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTMLFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doFilter</span><span class="params">(Msg m)</span> </span>&#123;</span><br><span class="line">        String r = m.getMsg();</span><br><span class="line">        <span class="keyword">if</span>(r == <span class="keyword">null</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        r = r.replace(<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">        r = r.replace(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">        m.setMsg(r);</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>敏感字符进行处理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SensitiveFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doFilter</span><span class="params">(Msg msg)</span> </span>&#123;</span><br><span class="line">        String r = msg.getMsg();</span><br><span class="line">        <span class="keyword">if</span>(r == <span class="keyword">null</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理msg，对敏感词进行替换</span></span><br><span class="line">        r = r.replaceAll(<span class="string">&quot;996&quot;</span>,<span class="string">&quot;955&quot;</span>);</span><br><span class="line">        msg.setMsg(r);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Msg msg = <span class="keyword">new</span> Msg();</span><br><span class="line">        msg.setMsg(<span class="string">&quot;大家好,&lt;我是智翁&gt;,欢迎访问 www.yaozw.top,大家都是996&quot;</span>);</span><br><span class="line">        FilterChain filterChain = <span class="keyword">new</span> FilterChain();</span><br><span class="line">        filterChain.add(<span class="keyword">new</span> HTMLFilter()).add(<span class="keyword">new</span> SensitiveFilter());</span><br><span class="line">        <span class="keyword">boolean</span> ss = filterChain.doFilter(msg);</span><br><span class="line">        System.out.println(msg.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<p><strong>封装需要进行变化的地方，在现在的实例中，我们需要封装的是字符串的处理逻辑。我们可以将这个逻辑抽象出来，并对其进行封装。</strong></p>
<p><strong>附图：</strong></p>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/%E8%B4%A3%E4%BB%BB%E9%93%BEUML.png" alt="责任链设计模式"></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器设计模式</title>
    <url>/2020/12/23/%E8%BF%AD%E4%BB%A3%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="迭代器设计模式-Iterator-Pattern"><a href="#迭代器设计模式-Iterator-Pattern" class="headerlink" title="迭代器设计模式(Iterator Pattern)"></a>迭代器设计模式(Iterator Pattern)</h4><p><strong>描述：</strong> 提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。</p>
<p><strong>核心思想：</strong> 使用不同的方式来遍历整个整合对象。 </p>
<p><strong>使用场景：</strong></p>
<ul>
<li>访问聚合对象的内容而无需暴露他的内部表示</li>
<li>需要为聚合对象提供多种访问方式</li>
<li>为便利不同的聚合结构提供一个统一的接口</li>
</ul>
<p><strong>迭代器设计模式的优点：</strong></p>
<ul>
<li>支持一不同的方式遍历一个聚合对象</li>
<li>迭代器简化了聚合类</li>
<li>在同一个聚合上可以有多个遍历</li>
<li>在迭代器设计模式中怎加新的聚合类和迭代类都很方便，无需修改源代码 , 符合开闭原则</li>
</ul>
<p><strong>迭代器设计模式的缺点：</strong></p>
<ul>
<li>由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</li>
</ul>
<p><strong>示例：</strong></p>
<ul>
<li>定义迭代器接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">E  <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现迭代器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    E[] e;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyIterator</span><span class="params">(E[] e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.e = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; e.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.hasNext())&#123;</span><br><span class="line">            <span class="keyword">return</span> e[index++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] str = &#123;<span class="string">&quot;nn&quot;</span>, <span class="string">&quot;jj&quot;</span>, <span class="string">&quot;PP&quot;</span>&#125;;</span><br><span class="line">        MyIterator nameRepository = <span class="keyword">new</span> MyIterator(str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (nameRepository.hasNext()) &#123;</span><br><span class="line">            System.out.println(nameRepository.next());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>适配器设计模式</title>
    <url>/2020/12/19/%E9%80%82%E9%85%8D%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="适配器设计模式-adapter-pattern"><a href="#适配器设计模式-adapter-pattern" class="headerlink" title="适配器设计模式(adapter pattern)"></a>适配器设计模式(adapter pattern)</h4><p><strong>描述：</strong> 适配器设计模式主要用于接口的转化或者将接口不兼容的类对象组合在一起形成对外统一的接口，是一种结构性模式其本质是一种中间件，适用于类和对象。</p>
<p><strong>核心思想：</strong> 对现有的接口进行转化以符合新的需求</p>
<p><strong>使用场景：</strong> </p>
<ul>
<li>想用一个已经存在的类，但其接口不符合需求；</li>
<li>想创建一个可以复用的类，该类可以与其他不相关的类协同工作；</li>
<li>想使用一些已经存在的子类，但是不能对每一个都进行子类化以匹配它们的接口（仅适用于对象Adapter）。对象适配器可以适配他的父类接口。</li>
</ul>
<p><strong>适配器设计模式的优点：</strong> </p>
<ul>
<li>提高了类的复用；</li>
<li>组合若干关联对象形成对外提供统一服务的接口；</li>
<li>扩展性、灵活性好。</li>
</ul>
<p><strong>适配器设计模式的缺点：</strong></p>
<ul>
<li>过多使用适配模式容易造成代码功能和逻辑意义的混淆。</li>
<li>部分语言对继承的限制，可能至多只能适配一个适配者类，而且目标类必须是抽象类。</li>
</ul>
<p><strong>适配器设计模式的分类：</strong></p>
<ul>
<li>类适配器</li>
<li>对象适配器</li>
<li>接口适配器</li>
</ul>
<p><strong>示例：</strong></p>
<h5 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h5><ul>
<li> 定义目标接口类：Target</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li> 被适配的类：Adaptee</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">adapteeRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;adapteeRequest method of Adaptee! &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>适配类Adapter，实现Target的接口request，同时继承Adaptee的实现adapteeRequest</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">super</span>.adapteeRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">        Target target = <span class="keyword">new</span> Adapter();</span><br><span class="line">        target.request(); <span class="comment">// result: adapteeRequest method of Adaptee! </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h5><ul>
<li>对象适配器和类适配器的主要区别就是<strong>类适配器的适配器类是继承被适配的类，对象适配器的适配器类是依赖被适配的类</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适配器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Adaptee adaptee;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(Adaptee adaptee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adaptee = adaptee;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        adaptee.operation1();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;operation2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Adaptee adaptee = <span class="keyword">new</span> Adaptee();</span><br><span class="line">        Adapter adapter = <span class="keyword">new</span> Adapter(adaptee);</span><br><span class="line">        Client client = <span class="keyword">new</span> Client();</span><br><span class="line">        client.use(adapter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">(Target target)</span></span>&#123;</span><br><span class="line">        target.operation1();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="接口适配器"><a href="#接口适配器" class="headerlink" title="接口适配器"></a>接口适配器</h5><ul>
<li><p><strong>核心思路：</strong>当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可<strong>有选择地</strong>覆盖父类的某些方法来实现需求</p>
</li>
<li><p><strong>使用场景：</strong> 适用于一个接口不想使用其所有的方法的情况。</p>
</li>
<li><p> 定义目标接口类：Target</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interface4</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>定义一个适配的中间抽象类 默认实现目标接口 以便它的子类有选择的实现</li>
</ul>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsAdapter</span> <span class="keyword">implements</span> <span class="title">Interface4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//默认实现</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		AbsAdapter absAdapter = <span class="keyword">new</span> AbsAdapter() &#123;</span><br><span class="line">			<span class="comment">//只需要去覆盖我们 有需要地使用 接口方法</span></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">				System.out.println(<span class="string">&quot;使用了m1的方法&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		</span><br><span class="line">		absAdapter.m1();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象的七大设计原则</title>
    <url>/2020/12/07/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%83%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h3 id="七大设计原则"><a href="#七大设计原则" class="headerlink" title="七大设计原则"></a>七大设计原则</h3><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">英文名称</th>
<th align="center">简称</th>
</tr>
</thead>
<tbody><tr>
<td align="center">单一职责原则</td>
<td align="center">Single Responsibility Principle</td>
<td align="center">SRP</td>
</tr>
<tr>
<td align="center">里氏替换原则</td>
<td align="center">Liskov Substitution Principle</td>
<td align="center">LSP</td>
</tr>
<tr>
<td align="center">依赖倒置原则</td>
<td align="center">Dependence Inversion Principle</td>
<td align="center">DIP</td>
</tr>
<tr>
<td align="center">开闭原则</td>
<td align="center">OPen Closed Priciple</td>
<td align="center">OCP</td>
</tr>
<tr>
<td align="center">接口隔离原则</td>
<td align="center">Interface Segregation Principle</td>
<td align="center">ISP</td>
</tr>
<tr>
<td align="center">迪米特法则</td>
<td align="center">Law of Demete</td>
<td align="center">LOD</td>
</tr>
<tr>
<td align="center">组合/聚合复用原则</td>
<td align="center">Composite/Aggregate Reuse Principle</td>
<td align="center">CRP</td>
</tr>
</tbody></table>
<h4 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1. 单一职责原则"></a>1. 单一职责原则</h4><p>​    <strong>描述：</strong> 一个方法只干一件事，一个类只干一件事，甚至一个模块专注于一件事。</p>
<p>​    <strong>特点：</strong> 一个类 一个方法被修改的机率很大，如果一个方法或者类中有好几个功能相互关联，修改一个功能会带来其他功能的变动， 因此在实现的过程中一个类或者一个方法因该只专注于做好一件事情，降低功能之间的关联。<strong>（高内聚，低耦合）</strong></p>
<h4 id="2-里氏替换原则"><a href="#2-里氏替换原则" class="headerlink" title="2.里氏替换原则"></a>2.里氏替换原则</h4><p>​    <strong>描述：</strong> 任何父类出现的地方都可以透明的替换为子类。</p>
<p>​    <strong>特点：</strong> 在继承的过程中子类可以扩展其特有的方法属性，但尽量不要重写父类的方法，继承给程序的设计带来了变利，但也带来的弊端，降低了类的可移值性，增加了对象间的耦合性，如果一个类被另外的一个类继承，那么此时修改父类必然要考虑到所有的子类会出现的故障。因此在使用继承的过程中必遵守里氏替换原则。<strong>（用来检验继承的正确性，约束继承在使用上的泛滥）</strong></p>
<h4 id="3-依赖倒置原则"><a href="#3-依赖倒置原则" class="headerlink" title="3. 依赖倒置原则"></a>3. 依赖倒置原则</h4><p>​     <strong>描述：</strong> 依赖于抽象， 抽象不能依赖于细节，细节应该依赖于抽象 ，高层模块不能依赖低层模块，二者都应该依赖抽象。</p>
<p>​     <strong>特点：</strong> 主要是针对接口编程， 而不是针对实现编程。通过抽象来搭建框架， 建立类和类之间的联系，<strong>减少类之间的耦合性，提高框架的扩展性，同时以便于框架的维护性</strong></p>
<h4 id="4-开闭原则"><a href="#4-开闭原则" class="headerlink" title="4. 开闭原则"></a>4. 开闭原则</h4><p>​      <strong>描述：</strong> 对于扩展开放， 修改关闭</p>
<p>​      <strong>特点：</strong> 当需要一个新功能的时候我们应改首先想到的是 在这个旧的功能上扩展一个新的功能出来，而不是修改原有的旧功，如果修改原有的旧功能这样做的风险很大，可能会导致系统的瘫痪。<strong>增强了程序的扩展性，同时也降低了程序的维护性</strong></p>
<h4 id="5-接口隔离原则"><a href="#5-接口隔离原则" class="headerlink" title="5. 接口隔离原则"></a>5. 接口隔离原则</h4><p>​        <strong>描述：</strong> 客户端的接口是分散的多个接口，而不是一个总的接口</p>
<p>​        **特点:  **  实现类不应该依赖于它不需要的接口，不要建立一个庞大且臃肿的接口，接口该改按照不同的功能或者业务尽可能的建立多个接口。注意也不能太过于的细化，这样会使设计复杂化。好处就是  <strong>避免一个接口中出现不同职责的方法，符合高内聚，低耦合的思想。</strong></p>
<h4 id="6-迪米特法则"><a href="#6-迪米特法则" class="headerlink" title="6.  迪米特法则"></a>6.  迪米特法则</h4><p>​         <strong>描述：</strong> 一个对象尽可能的少接触其他的对象，只和需要接触的对象进行接触</p>
<p>​         <strong>特点：</strong>  使用迪米特法则可以使类与类 之间的耦合降低，减少类与类之间的关联程度，让类与类之间的协作更加直接，提高了类的复用性。</p>
<h4 id="7-组合-聚合复用原则"><a href="#7-组合-聚合复用原则" class="headerlink" title="7.   组合/聚合复用原则"></a>7.   组合/聚合复用原则</h4><p>​          <strong>描述：</strong> 组合或者聚合优于继承</p>
<p>​         <strong>特点：</strong> 在类的构建过程中优先考虑组合或者聚合，继承的时候父类暴露给子类的信息太多，或导致如果需要修改父类，必然要考虑到子类，这也可以提高类的复用性。</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>七大设计原则</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql锁机制</title>
    <url>/2020/11/24/mysql%E9%94%81%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h3 id="1、MySQL锁的基本介绍"><a href="#1、MySQL锁的基本介绍" class="headerlink" title="1、MySQL锁的基本介绍"></a>1、MySQL锁的基本介绍</h3><p>​        <strong>锁是计算机协调多个进程或线程并发访问某一资源的机制。</strong>在数据库中，除传统的 计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一 个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p>
<p>​        相对其他数据库而言，MySQL的锁机制比较简单，其最 显著的特点是不同的<strong>存储引擎</strong>支持不同的锁机制。比如，MyISAM和MEMORY存储引擎采用的是表级锁（table-level locking）；InnoDB存储引擎既支持行级锁（row-level locking），也支持表级锁，但默认情况下是采用行级锁。 </p>
<p>​        <strong>表级锁：</strong>开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。<br>​        <strong>行级锁：</strong>开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。  </p>
<p>​        从上述特点可见，很难笼统地说哪种锁更好，只能就具体应用的特点来说哪种锁更合适！仅从锁的角度 来说：表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有 并发查询的应用，如一些在线事务处理（OLTP）系统。 </p>
<h3 id="2、MyISAM表锁"><a href="#2、MyISAM表锁" class="headerlink" title="2、MyISAM表锁"></a>2、MyISAM表锁</h3><p>MySQL的表级锁有两种模式：<strong>表共享读锁（Table Read Lock）</strong>和<strong>表独占写锁（Table Write Lock）</strong>。  </p>
<p>对MyISAM表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求；对 MyISAM表的写操作，则会阻塞其他用户对同一表的读和写操作；MyISAM表的读操作与写操作之间，以及写操作之间是串行的！ </p>
<p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`mylock`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`NAME`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=MyISAM <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`mylock`</span> (<span class="string">`id`</span>, <span class="string">`NAME`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`mylock`</span> (<span class="string">`id`</span>, <span class="string">`NAME`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`mylock`</span> (<span class="string">`id`</span>, <span class="string">`NAME`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`mylock`</span> (<span class="string">`id`</span>, <span class="string">`NAME`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;d&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>MyISAM写锁阻塞读的案例：</strong></p>
<p>​        当一个线程获得对一个表的写锁之后，只有持有锁的线程可以对表进行更新操作。其他线程的读写操作都会等待，直到锁释放为止。</p>
<table>
<thead>
<tr>
<th>session1</th>
<th align="center">session2</th>
</tr>
</thead>
<tbody><tr>
<td>获取表的write锁定<br />lock table mylock write;</td>
<td align="center"></td>
</tr>
<tr>
<td>当前session对表的查询，插入，更新操作都可以执行<br />select * from mylock;<br />insert into mylock values(5,’e’);</td>
<td align="center">当前session对表的查询会被阻塞<br />select * from mylock；</td>
</tr>
<tr>
<td>释放锁：<br />unlock tables；</td>
<td align="center">当前session能够立刻执行，并返回对应结果</td>
</tr>
</tbody></table>
<p><strong>MyISAM读阻塞写的案例：</strong></p>
<p>​        一个session使用lock table给表加读锁，这个session可以锁定表中的记录，但更新和访问其他表都会提示错误，同时，另一个session可以查询表中的记录，但更新就会出现锁等待。</p>
<table>
<thead>
<tr>
<th align="center">session1</th>
<th align="center">session2</th>
</tr>
</thead>
<tbody><tr>
<td align="center">获得表的read锁定<br />lock table mylock read;</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">当前session可以查询该表记录：<br />select * from mylock;</td>
<td align="center">当前session可以查询该表记录：<br />select * from mylock;</td>
</tr>
<tr>
<td align="center">当前session不能查询没有锁定的表<br />select * from person<br />Table ‘person’ was not locked with LOCK TABLES</td>
<td align="center">当前session可以查询或者更新未锁定的表<br />select * from mylock<br />insert into person values(1,’zhangsan’);</td>
</tr>
<tr>
<td align="center">当前session插入或者更新表会提示错误<br />insert into mylock values(6,’f’)<br />Table ‘mylock’ was locked with a READ lock and can’t be updated<br />update mylock set name=’aa’ where id = 1;<br />Table ‘mylock’ was locked with a READ lock and can’t be updated</td>
<td align="center">当前session插入数据会等待获得锁<br />insert into mylock values(6,’f’);</td>
</tr>
<tr>
<td align="center">释放锁<br />unlock tables;</td>
<td align="center">获得锁，更新成功</td>
</tr>
</tbody></table>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p><strong>MyISAM在执行查询语句之前，会自动给涉及的所有表加读锁，在执行更新操作前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此用户一般不需要使用命令来显式加锁，上例中的加锁时为了演示效果。</strong></p>
<p><strong>MyISAM的并发插入问题</strong></p>
<p>MyISAM表的读和写是串行的，这是就总体而言的，在一定条件下，MyISAM也支持查询和插入操作的并发执行</p>
<table>
<thead>
<tr>
<th align="center">session1</th>
<th align="center">session2</th>
</tr>
</thead>
<tbody><tr>
<td align="center">获取表的read local锁定<br />lock table mylock read local</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">当前session不能对表进行更新或者插入操作<br />insert into mylock values(6,’f’)<br />Table ‘mylock’ was locked with a READ lock and can’t be updated<br />update mylock set name=’aa’ where id = 1;<br />Table ‘mylock’ was locked with a READ lock and can’t be updated</td>
<td align="center">其他session可以查询该表的记录<br />select* from mylock</td>
</tr>
<tr>
<td align="center">当前session不能查询没有锁定的表<br />select * from person<br />Table ‘person’ was not locked with LOCK TABLES</td>
<td align="center">其他session可以进行插入操作，但是更新会阻塞<br />update mylock set name = ‘aa’ where id = 1;</td>
</tr>
<tr>
<td align="center">当前session不能访问其他session插入的记录；</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">释放锁资源：unlock tables</td>
<td align="center">当前session获取锁，更新操作完成</td>
</tr>
<tr>
<td align="center">当前session可以查看其他session插入的记录</td>
<td align="center"></td>
</tr>
</tbody></table>
<p> 可以通过检查table_locks_waited和table_locks_immediate状态变量来分析系统上的表锁定争夺： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show status like &#x27;table%&#x27;;</span><br><span class="line">+<span class="comment">-----------------------+-------+</span></span><br><span class="line">| Variable_name         | Value |</span><br><span class="line">+<span class="comment">-----------------------+-------+</span></span><br><span class="line">| Table_locks_immediate | 352   |</span><br><span class="line">| Table_locks_waited    | 2     |</span><br><span class="line">+<span class="comment">-----------------------+-------+</span></span><br><span class="line"><span class="comment">--如果Table_locks_waited的值比较高，则说明存在着较严重的表级锁争用情况。</span></span><br></pre></td></tr></table></figure>

<p><strong>InnoDB锁</strong></p>
<p><strong>1、事务及其ACID属性</strong></p>
<p>事务是由一组SQL语句组成的逻辑处理单元，事务具有4属性，通常称为事务的ACID属性。</p>
<p>原子性（Actomicity）：事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。<br>一致性（Consistent）：在事务开始和完成时，数据都必须保持一致状态。<br>隔离性（Isolation）：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行。<br>持久性（Durable）：事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。</p>
<p><strong>2、并发事务带来的问题</strong></p>
<p>相对于串行处理来说，并发事务处理能大大增加数据库资源的利用率，提高数据库系统的事务吞吐量，从而可以支持更多用户的并发操作，但与此同时，会带来一下问题：</p>
<p><strong>脏读</strong>： 一个事务正在对一条记录做修改，在这个事务并提交前，这条记录的数据就处于不一致状态；这时，另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些“脏”的数据，并据此做进一步的处理，就会产生未提交的数据依赖关系。这种现象被形象地叫做“脏读” </p>
<p><strong>不可重复读</strong>：一个事务在读取某些数据已经发生了改变、或某些记录已经被删除了！这种现象叫做“不可重复读”。 </p>
<p><strong>幻读</strong>： 一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读” </p>
<p>上述出现的问题都是数据库读一致性的问题，可以通过事务的隔离机制来进行保证。</p>
<p>数据库的事务隔离越严格，并发副作用就越小，但付出的代价也就越大，因为事务隔离本质上就是使事务在一定程度上串行化，需要根据具体的业务需求来决定使用哪种隔离级别</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">脏读</th>
<th align="center">不可重复读</th>
<th align="center">幻读</th>
</tr>
</thead>
<tbody><tr>
<td align="center">read uncommitted</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">read committed</td>
<td align="center"></td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">repeatable read</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">serializable</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p> 可以通过检查InnoDB_row_lock状态变量来分析系统上的行锁的争夺情况： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show status like &#x27;innodb_row_lock%&#x27;;</span><br><span class="line">+<span class="comment">-------------------------------+-------+</span></span><br><span class="line">| Variable_name                 | Value |</span><br><span class="line">+<span class="comment">-------------------------------+-------+</span></span><br><span class="line">| Innodb_row_lock_current_waits | 0     |</span><br><span class="line">| Innodb_row_lock_time          | 18702 |</span><br><span class="line">| Innodb_row_lock_time_avg      | 18702 |</span><br><span class="line">| Innodb_row_lock_time_max      | 18702 |</span><br><span class="line">| Innodb_row_lock_waits         | 1     |</span><br><span class="line">+<span class="comment">-------------------------------+-------+</span></span><br><span class="line"><span class="comment">--如果发现锁争用比较严重，如InnoDB_row_lock_waits和InnoDB_row_lock_time_avg的值比较高</span></span><br></pre></td></tr></table></figure>

<p><strong>3、InnoDB的行锁模式及加锁方法</strong></p>
<p>​        <strong>共享锁（s）</strong>：又称读锁。允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。这保证了其他事务可以读A，但在T释放A上的S锁之前不能对A做任何修改。<br>​        <strong>排他锁（x）</strong>：又称写锁。允许获取排他锁的事务更新数据，阻止其他事务取得相同的数据集共享读锁和排他写锁。若事务T对数据对象A加上X锁，事务T可以读A也可以修改A，其他事务不能再对A加任何锁，直到T释放A上的锁。</p>
<p>​        mysql InnoDB引擎默认的修改数据语句：<strong>update,delete,insert都会自动给涉及到的数据加上排他锁，select语句默认不会加任何锁类型</strong>，如果加排他锁可以使用select …for update语句，加共享锁可以使用select … lock in share mode语句。<strong>所以加过排他锁的数据行在其他事务种是不能修改数据的，也不能通过for update和lock in share mode锁的方式查询数据，但可以直接通过select …from…查询数据，因为普通查询没有任何锁机制。</strong> </p>
<p><strong>InnoDB行锁实现方式</strong></p>
<p>​        InnoDB行锁是通过给<strong>索引</strong>上的索引项加锁来实现的，这一点MySQL与Oracle不同，后者是通过在数据块中对相应数据行加锁来实现的。InnoDB这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB才使用行级锁，<strong>否则，InnoDB将使用表锁！</strong>  </p>
<p>1、在不通过索引条件查询的时候，innodb使用的是表锁而不是行锁</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_no_index(<span class="keyword">id</span> <span class="built_in">int</span>,<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>)) <span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tab_no_index <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;2&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;3&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;4&#x27;</span>);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">session1</th>
<th align="center">session2</th>
</tr>
</thead>
<tbody><tr>
<td align="center">set autocommit=0<br />select * from tab_no_index where id = 1;</td>
<td align="center">set autocommit=0<br />select * from tab_no_index where id =2</td>
</tr>
<tr>
<td align="center">select * from tab_no_index where id = 1 for update</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">select * from tab_no_index where id = 2 for update;</td>
</tr>
</tbody></table>
<p>session1只给一行加了排他锁，但是session2在请求其他行的排他锁的时候，会出现锁等待。原因是在没有索引的情况下，innodb只能使用表锁。</p>
<p>2、创建带索引的表进行条件查询，innodb使用的是行锁</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_with_index(<span class="keyword">id</span> <span class="built_in">int</span>,<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>)) <span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tab_with_index <span class="keyword">add</span> <span class="keyword">index</span> <span class="keyword">id</span>(<span class="keyword">id</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tab_with_index <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;2&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;3&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;4&#x27;</span>);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">session1</th>
<th align="center">session2</th>
</tr>
</thead>
<tbody><tr>
<td align="center">set autocommit=0<br />select * from tab_with_indexwhere id = 1;</td>
<td align="center">set autocommit=0<br />select * from tab_with_indexwhere id =2</td>
</tr>
<tr>
<td align="center">select * from tab_with_indexwhere id = 1 for update</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">select * from tab_with_indexwhere id = 2 for update;</td>
</tr>
</tbody></table>
<p>3、由于mysql的行锁是针对索引加的锁，不是针对记录加的锁，所以虽然是访问不同行的记录，但是如果是使用相同的索引键，是会出现冲突的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tab_with_index <span class="keyword">drop</span> <span class="keyword">index</span> <span class="keyword">id</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tab_with_index  <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;4&#x27;</span>);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">session1</th>
<th align="center">session2</th>
</tr>
</thead>
<tbody><tr>
<td align="center">set autocommit=0</td>
<td align="center">set autocommit=0</td>
</tr>
<tr>
<td align="center">select * from tab_with_index where id = 1 and name=’1’ for update</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">select * from tab_with_index where id = 1 and name=’4’ for update<br />虽然session2访问的是和session1不同的记录，但是因为使用了相同的索引，所以需要等待锁</td>
</tr>
</tbody></table>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>对于MyISAM的表锁，主要讨论了以下几点：</strong><br>（1）共享读锁（S）之间是兼容的，但共享读锁（S）与排他写锁（X）之间，以及排他写锁（X）之间是互斥的，也就是说读和写是串行的。<br>（2）在一定条件下，MyISAM允许查询和插入并发执行，我们可以利用这一点来解决应用中对同一表查询和插入的锁争用问题。<br>（3）MyISAM默认的锁调度机制是写优先，这并不一定适合所有应用，用户可以通过设置LOW_PRIORITY_UPDATES参数，或在INSERT、UPDATE、DELETE语句中指定LOW_PRIORITY选项来调节读写锁的争用。<br>（4）由于表锁的锁定粒度大，读写之间又是串行的，因此，如果更新操作较多，MyISAM表可能会出现严重的锁等待，可以考虑采用InnoDB表来减少锁冲突。</p>
<p><strong>对于InnoDB表，本文主要讨论了以下几项内容：</strong><br>（1）InnoDB的行锁是基于索引实现的，如果不通过索引访问数据，InnoDB会使用表锁。<br>（2）在不同的隔离级别下，InnoDB的锁机制和一致性读策略不同。</p>
<p>在了解InnoDB锁特性后，用户可以通过设计和SQL调整等措施减少锁冲突和死锁，包括：</p>
<ul>
<li>尽量使用较低的隔离级别； 精心设计索引，并尽量使用索引访问数据，使加锁更精确，从而减少锁冲突的机会；</li>
<li>选择合理的事务大小，小事务发生锁冲突的几率也更小；</li>
<li>给记录集显式加锁时，最好一次性请求足够级别的锁。比如要修改数据的话，最好直接申请排他锁，而不是先申请共享锁，修改时再请求排他锁，这样容易产生死锁；</li>
<li>不同的程序访问一组表时，应尽量约定以相同的顺序访问各表，对一个表而言，尽可能以固定的顺序存取表中的行。这样可以大大减少死锁的机会；</li>
<li>尽量用相等条件访问数据，这样可以避免间隙锁对并发插入的影响； 不要申请超过实际需要的锁级别；除非必须，查询时不要显示加锁；</li>
<li>对于一些特定的事务，可以使用表锁来提高处理速度或减少死锁的可能。</li>
</ul>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2021/04/07/redis/</url>
    <content><![CDATA[<ul>
<li><h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a><a href="http://www.redis.cn/">redis</a></h1><h2 id="redis介绍"><a href="#redis介绍" class="headerlink" title="redis介绍"></a>redis介绍</h2><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p>
<h2 id="redis常用的数据类型"><a href="#redis常用的数据类型" class="headerlink" title="redis常用的数据类型"></a><a href="http://www.redis.cn/topics/data-types.html">redis常用的数据类型</a></h2><div class="markmap-container" style="height:300px;" ><svg class="markmap-svg">{"t":"heading","d":1,"v":"redis常用的数据类型","c":[{"t":"heading","d":2,"v":"String","c":[{"t":"heading","d":3,"v":"字符串"},{"t":"heading","d":3,"v":"数值"},{"t":"heading","d":3,"v":"bitmap"}]},{"t":"heading","d":2,"v":"set"},{"t":"heading","d":2,"v":"hash"},{"t":"heading","d":2,"v":"sorted_set"},{"t":"heading","d":2,"v":"list"}]}</svg></div>

<h3 id="1-String"><a href="#1-String" class="headerlink" title="1. String"></a><strong><a href="http://www.redis.cn/topics/data-types-intro.html#strings">1. String</a></strong></h3><ul>
<li><strong><a href="http://www.redis.cn/topics/data-types-intro.html#strings">字符串</a></strong> <ul>
<li><a href="http://www.redis.cn/commands.html#string">1.常用的命令</a><br>set<br>get<br>append<br>strlen<br>type 查看vlue的类型 </li>
<li>2.正负向索引<br>setrange<br>getrange</li>
<li><a href="http://www.redis.cn/commands/object.html">3.object</a></li>
</ul>
</li>
<li><strong><a href="http://www.redis.cn/topics/data-types-intro.html#strings">数值</a></strong><ul>
<li>1.常用命令<br>   INCR 命令将字符串值解析成整型，将其加一，最后将结果保存为新的字符串值<br>   INCRBY   n   对一个k 加 n<br>   DECR  减一<br>   DECRBY n  减n<br>   GETSET命令，行如其名：它为key设置新值并且返回原值      </li>
<li>2.命令说明<br>INCR是原子操作意味着什么呢？就是说即使多个客户端对同一个key发出INCR命令，也决不会导致竞争的情况。例如如下情况永远不可能发生：『客户端1和客户端2同时读出“10”，他们俩都对其加到11，然后将新值设置为11』。最终的值一定是12，read-increment-set操作完成时，其他客户端不会在同一时间执行任何命令。<br>对字符串，另一个的令人感兴趣的操作是GETSET命令，行如其名：他为key设置新值并且返回原值。这有什么用处呢？例如：你的系统每当有新用户访问时就用INCR命令操作一个Redis key。你希望每小时对这个信息收集一次。你就可以GETSET这个key并给其赋值0并读取原值。<br>为减少等待时间，也可以一次存储或获取多个key对应的值，使用MSET和MGET命令:<br>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。</li>
<li>3.使用场景<pre><code>抢购，秒杀，详情页，点赞，评论
规避并发下，
对数据库的事务操作
完全由redis内存操作代替
</code></pre>
</li>
</ul>
</li>
<li><strong><a href="http://www.redis.cn/commands.html">bitmap</a></strong><ul>
<li>1.常用命令<br>setbit<br>bitcount<br>bitpos<br>bitop</li>
<li><a href="http://www.redis.cn/commands/bitcount.html">2.使用场景1</a><br>1,有用户系统，统计用户登录天数，<br>setbit sean 1 1<br>setbit sean 7 1<br>setbit sean 364 1<br>STRLEN sean<br>BITCOUNT sean -2 -1<br> 01   02  03  04<br>sean    0    1   0   1   010101<br>json    0    1   0   1   011111<br>每用户46B *  用户数 10000000  =460 000 000</li>
<li><a href="https://blog.getspool.com/2011/11/29/fast-easy-realtime-metrics-using-redis-bitmaps/">3.使用场景2</a><br>618做活动：送礼物<br>大库备货多少礼物<br>假设京东有2E用户<br>僵尸用户<br>冷热用户/忠诚用户<br>活跃用户统计！1号<del>3号 都有哪些用户进行了登录<br>比如说 1号</del>3号  连续登录要     去重<br>setbit 20190101   1  1<br>setbit 20190102   1  1<br>setbit 20190102   7  1<br>bitop  or   destkey 20190101  20190102<br>BITCOUNT  destkey  0 -1</li>
</ul>
</li>
</ul>
<h3 id="2-set"><a href="#2-set" class="headerlink" title="2. set"></a><strong><a href="http://www.redis.cn/topics/data-types-intro.html#sets">2. set</a></strong></h3><ul>
<li><p><a href="http://www.redis.cn/commands.html#set">1.常用命令</a></p>
</li>
<li><p>2.set介绍<br>Redis Set 是 String 的无序排列。SADD 指令把新的元素添加到 set 中。对 set 也可做一些其他的操作，比如测试一个给定的元素是否存在，对不同 set 取交集，并集或差，等等。</p>
</li>
<li><p><a href="http://www.redis.cn/commands/srandmember.html">3.set中的随机事件</a></p>
<p>SRANDMEMBER  key  count </p>
</li>
<li><p>3.使用场景<br>Sets 适合用于表示对象间的关系。 例如，我们可以轻易使用 set 来表示标记。<br>一个简单的建模方式是，对每一个希望标记的对象使用 set。这个 set 包含和对象相关联的标签的 ID。<br>假设我们想要给新闻打上标签。 假设新闻 ID 1000 被打上了 1,2,5 和 77 四个标签，我们可以使用一个 set 把 tag ID 和新闻条目关联起来：</p>
</li>
</ul>
<h3 id="3-hash"><a href="#3-hash" class="headerlink" title="3. hash"></a><strong><a href="http://www.redis.cn/topics/data-types-intro.html#hashes">3. hash</a></strong></h3></li>
<li><p><a href="http://www.redis.cn/commands.html#hash">1.常用命令</a></p>
</li>
<li><p>hash介绍<br>Hash 便于表示 objects，实际上，你可以放入一个 hash 的域数量实际上没有限制（除了可用内存以外）。所以，你可以在你的应用中以不同的方式使用 hash。<br>HMSET 指令设置 hash 中的多个域，而 HGET 取回单个域。HMGET 和 HGET 类似，但返回一系列值：</p>
</li>
<li><p>使用场景<br>场景：点赞，收藏，详情页</p>
</li>
</ul>
<h3 id="4-sorted-set"><a href="#4-sorted-set" class="headerlink" title="4.sorted_set"></a><strong><a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets">4.sorted_set</a></strong></h3><ul>
<li><a href="http://www.redis.cn/commands.html#sorted_set">1.常用命令</a></li>
<li>sorted_set介绍<br>Redis排序集—<br>排序集是一种数据类型，类似于集合和哈希之间的混合。像集合一样，排序集合由唯一的，非重复的字符串元素组成，因此从某种意义上说，排序集合也是一个集合。<br>但是，虽然不对集合内的元素进行排序，但是排序后的集合中的每个元素都与一个称为得分的浮点值相关联 （这就是为什么该类型也类似于哈希的原因，因为每个元素都映射到一个值）。<br>此外，已排序集合中的元素是按顺序进行的（因此，它们不是应请求而排序的，顺序是用于表示已排序集合的数据结构的特殊性）。它们按照以下规则排序：<br>如果A和B是两个具有不同分数的元素，那么如果A.score是&gt; B.score，则A&gt;B。<br> 如果A和B的得分完全相同，那么如果A字符串在字典上大于B字符串，则A&gt;B。A和B字符串不能相等，因为排序集仅具有唯一元素。<br> 它的底层核心实现的机制是<a href="https://www.cnblogs.com/wlphp/p/11774171.html">跳跃表</a></li>
<li>功能<br>集合操作<br>并集，交集<br>权重/聚合指令</li>
</ul>
<h3 id="5-list"><a href="#5-list" class="headerlink" title="5.list"></a><strong><a href="http://www.redis.cn/topics/data-types-intro.html#lists">5.list</a></strong></h3><ul>
<li><a href="http://www.redis.cn/commands.html#list">1.常用命令</a></li>
<li>list介绍<br>Lists: 按插入顺序排序的字符串元素的集合。他们基本上就是链表（linked lists）<br>Redis lists基于Linked Lists实现。这意味着即使在一个list中有数百万个元素，在头部或尾部添加一个元素的操作，其时间复杂度也是常数级别的。用LPUSH 命令在十个元素的list头部添加新元素，和在千万元素list头部添加新元素的速度相同。<br>那么，坏消息是什么？在数组实现的list中利用索引访问元素的速度极快，而同样的操作在linked list实现的list上没有那么快。<br>Redis Lists用linked list实现的原因是：对于数据库系统来说，至关重要的特性是：能非常快的在很大的列表上添加元素。另一个重要因素是，正如你将要看到的：Redis lists能在常数时间取得常数长度。</li>
<li>功能<br>栈 同向命令<br>队列 反向命令<br>数组<br>阻塞，单播队列 FIFO</li>
</ul>
<h3 id="6-streams"><a href="#6-streams" class="headerlink" title="6.streams"></a><strong><a href="http://www.redis.cn/topics/streams-intro.html">6.streams</a></strong></h3><ul>
<li>streams介绍<br>Stream是Redis 5.0版本引入的一个新的数据类型，它以更抽象的方式模拟日志数据结构，但日志仍然是完整的：就像一个日志文件，通常实现为以只附加模式打开的文件，Redis流主要是一个仅附加数据结构。至少从概念上来讲，因为Redis流是一种在内存表示的抽象数据类型，他们实现了更加强大的操作，以此来克服日志文件本身的限制。<br> Stream是Redis的数据类型中最复杂的，尽管数据类型本身非常简单，它实现了额外的非强制性的特性：提供了一组允许消费者以阻塞的方式等待生产者向Stream中发送的新消息，此外还有一个名为消费者组的概念。<br>消费者组最早是由名为Kafka（TM）的流行消息系统引入的。Redis用完全不同的术语重新实现了一个相似的概念，但目标是相同的：允许一组客户端相互配合来消费同一个Stream的不同部分的消息。</li>
</ul>
<h2 id="redis的发布-订阅"><a href="#redis的发布-订阅" class="headerlink" title="redis的发布/订阅"></a><a href="http://www.redis.cn/topics/pubsub.html">redis的发布/订阅</a></h2><ul>
<li><p>Pub/Sub<br>订阅，取消订阅和发布实现了发布/订阅消息范式(引自wikipedia)，发送者（发布者）不是计划发送消息给特定的接收者（订阅者）。而是发布的消息分到不同的频道，不需要知道什么样的订阅者订阅。订阅者对一个或多个频道感兴趣，只需接收感兴趣的消息，不需要知道什么样的发布者发布的。这种发布者和订阅者的解耦合可以带来更大的扩展性和更加动态的网络拓扑。<br>为了订阅foo和bar，客户端发出一个订阅的频道名称:<br><em><strong>SUBSCRIBE foo bar</strong></em><br>其他客户端发到这些频道的消息将会被推送到所有订阅的客户端。<br>客户端订阅到一个或多个频道不必发出命令，尽管他能订阅和取消订阅其他频道。订阅和取消订阅的响应被封装在发送的消息中，以便客户端只需要读一个连续的消息流，其中第一个元素表示消息类型。</p>
<p><em><strong>PUBLISH foo Hello</strong></em></p>
</li>
</ul>
<h2 id="redis的内存淘汰策略"><a href="#redis的内存淘汰策略" class="headerlink" title="redis的内存淘汰策略"></a><a href="http://www.redis.cn/topics/lru-cache.html">redis的内存淘汰策略</a></h2><p>LRU是Redis唯一支持的回收方法。本页面包括一些常规话题，Redis的<code>maxmemory</code>指令用于将可用内存限制成一个固定大小，还包括了Redis使用的LRU算法，这个实际上只是近似的LRU。</p>
<ul>
<li>回收策略<br>当maxmemory限制达到的时候Redis会使用的行为由 Redis的maxmemory-policy配置指令来进行配置。<br>以下的策略是可用的:<ul>
<li><strong>noeviction</strong>:当内存不足以容纳新写入数据时，新写入操作会报错（大部分的写入指令，但DEL和几个例外）</li>
<li><strong>allkeys-lru</strong>: 尝试回收最少使用的键（LRU），使得新添加的数据有空间存放。</li>
<li><strong>volatile-lru</strong>: 尝试回收最少使用的键（LRU），但仅限于在过期集合的键,使得新添加的数据有空间存放。</li>
<li><strong>allkeys-random</strong>: 回收随机的键使得新添加的数据有空间存放。</li>
<li><strong>volatile-random</strong>: 回收随机的键使得新添加的数据有空间存放，但仅限于在过期集合的键。</li>
<li><strong>volatile-ttl</strong>: 回收在过期集合的键，并且优先回收存活时间（TTL）较短的键,使得新添加的数据有空间存放。</li>
</ul>
</li>
</ul>
<p>如果没有键满足回收的前提条件的话，策略<strong>volatile-lru</strong>, <strong>volatile-random</strong>以及<strong>volatile-ttl</strong>就和noeviction 差不多了。</p>
<p>选择正确的回收策略是非常重要的，这取决于你的应用的访问模式，不过你可以在运行时进行相关的策略调整，并且监控缓存命中率和没命中的次数，通过RedisINFO命令输出以便调优。</p>
<p>一般的经验规则:</p>
<ul>
<li>使用<strong>allkeys-lru</strong>策略：当你希望你的请求符合一个幂定律分布，也就是说，你希望部分的子集元素将比其它其它元素被访问的更多。如果你不确定选择什么，这是个很好的选择。.</li>
<li>使用<strong>allkeys-random</strong>：如果你是循环访问，所有的键被连续的扫描，或者你希望请求分布正常（所有元素被访问的概率都差不多）。</li>
<li>使用<strong>volatile-ttl</strong>：如果你想要通过创建缓存对象时设置TTL值，来决定哪些对象应该被过期。</li>
</ul>
<p><strong>allkeys-lru</strong> 和 <strong>volatile-random</strong>策略对于当你想要单一的实例实现缓存及持久化一些键时很有用。不过一般运行两个实例是解决这个问题的更好方法。</p>
<p>   为了键设置过期时间也是需要消耗内存的，所以使用<strong>allkeys-lru</strong>这种策略更加高效，因为没有必要为键取设置过期时间当内存有压力时。</p>
<h2 id="redis的过期策略"><a href="#redis的过期策略" class="headerlink" title="redis的过期策略"></a>redis的过期策略</h2><ul>
<li><p><strong>过期策略通常有以下三种：</strong></p>
<ul>
<li><p>定时过期：每个设置过期时间的key都需要创建一个定时器，到过期时间就会立即清除。该策略可以立即清除过期的数据，对内存很友好；但是会占用大量的CPU资源去处理过期的数据，从而影响缓存的响应时间和吞吐量。</p>
</li>
<li><p>惰性过期：只有当访问一个key时，才会判断该key是否已过期，过期则清除。该策略可以最大化地节省CPU资源，却对内存非常不友好。极端情况可能出现大量的过期key没有再次被访问，从而不会被清除，占用大量内存。</p>
</li>
<li><p>定期过期：定期删除指的是Redis默认每隔100ms就随机抽取一些设置了过期时间的key，检测这些key是否过期，如果过期了就将其删掉。该策略是前两者的一个折中方案。通过调整定时扫描的时间间隔和每次扫描的限定耗时，可以在不同情况下使得CPU和内存资源达到最优的平衡效果。<br>(expires字典会保存所有设置了过期时间的key的过期时间数据，其中，key是指向键空间中的某个键的指针，value是该键的毫秒精度的UNIX时间戳表示的过期时间。键空间是指该Redis集群中保存的所有键。)<br><strong>Redis中同时使用了惰性过期和定期过期两种过期策略</strong></p>
</li>
</ul>
</li>
</ul>
<h2 id="持久化如何处理过期"><a href="#持久化如何处理过期" class="headerlink" title="持久化如何处理过期"></a>持久化如何处理过期</h2><ul>
<li><p>RDB<br>从内存数据库持久化数据到RDB文件：持久化key之前，会检查是否过期，过期的key不进入RDB文件 从RDB文件恢复数据到内存数据库：数据载入数据库之前，会对key先进行过期检查，如果过期，不导入数据库（主库情况）。</p>
</li>
<li><p>AOF<br>从内存数据库持久化数据到AOF文件：当key过期后，还没有被删除，此时进行执行持久化操作（该key是不会进入aof文件的，因为没有发生修改命令）<br>当key过期后，在发生删除操作时，程序会向aof文件追加一条del命令（在将来的以aof文件恢复数据的时候该过期的键就会被删掉）<br>AOF重写：重写时，会先判断key是否过期，已过期的key不会重写到aof文件</p>
</li>
</ul>
<h2 id="redis的事务"><a href="#redis的事务" class="headerlink" title="redis的事务"></a><a href="http://www.redis.cn/topics/transactions.html">redis的事务</a></h2><p>   <a href="http://www.redis.cn/commands/multi.html">MULTI</a> 、 <a href="http://www.redis.cn/commands/exec.html">EXEC</a> 、 <a href="http://www.redis.cn/commands/discard.html">DISCARD</a> 和 <a href="http://www.redis.cn/commands/watch.html">WATCH</a> 是 Redis 事务相关的命令。事务可以一次执行多个命令， 并且带有以下两个重要的保证：</p>
<ul>
<li>事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li>
<li>事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。</li>
</ul>
<p>   <a href="http://www.redis.cn/commands/exec.html">EXEC</a> 命令负责触发并执行事务中的所有命令：</p>
<ul>
<li>如果客户端在使用 <a href="http://www.redis.cn/commands/multi.html">MULTI</a> 开启了一个事务之后，却因为断线而没有成功执行 <a href="http://www.redis.cn/commands/exec.html">EXEC</a> ，那么事务中的所有命令都不会被执行。</li>
<li>另一方面，如果客户端成功在开启事务之后执行 <a href="http://www.redis.cn/commands/exec.html">EXEC</a> ，那么事务中的所有命令都会被执行。</li>
</ul>
<p>   当使用 AOF 方式做持久化的时候， Redis 会使用单个 write(2) 命令将事务写入到磁盘中。</p>
<p>   然而，如果 Redis 服务器因为某些原因被管理员杀死，或者遇上某种硬件故障，那么可能只有部分事务命令会被成功写入到磁盘中。</p>
<p>   如果 Redis 在重新启动时发现 AOF 文件出了这样的问题，那么它会退出，并汇报一个错误。</p>
<p>   使用<code>redis-check-aof</code>程序可以修复这一问题：它会移除 AOF 文件中不完整事务的信息，确保服务器可以顺利启动。</p>
<p>   从 2.2 版本开始，Redis 还可以通过乐观锁（optimistic lock）实现 CAS （check-and-set）操作。</p>
<ul>
<li><a href="https://blog.csdn.net/Evankaka/article/details/70570200">Redis分布式锁—-乐观锁的实现</a><br><a href="https://blog.csdn.net/Evankaka/article/details/70570200">https://blog.csdn.net/Evankaka/article/details/70570200</a></li>
</ul>
<h2 id="redis的缓存穿透-缓存雪崩-缓存穿透-和-缓存预热，缓存降级"><a href="#redis的缓存穿透-缓存雪崩-缓存穿透-和-缓存预热，缓存降级" class="headerlink" title="redis的缓存穿透/缓存雪崩/缓存穿透 和 缓存预热，缓存降级"></a>redis的缓存穿透/缓存雪崩/缓存穿透 和 缓存预热，缓存降级</h2><ul>
<li>缓存穿透<br>1.什么是缓存穿透<br>   缓存穿透是指用户请求的数据在缓存中不存在即没有命中，同时在数据库中也不存在，导致    用户每次请求该数据都要去数据库中查询一遍。如果有恶意攻击者不断请求系统中不存在的数    据，会导致短时间大量请求落在数据库上，造成数据库压力过大，甚至导致数据库承受不住而宕    机崩溃。<br>2.问题分析<br>   缓存穿透的关键在于在Redis中查不到key值，它和缓存击穿的根本区别在于传进来的key    在Redis中是不存在的。假如有黑客传进大量的不存在的key，那么大量的请求打在数据库上是    很致命的问题，所以在日常开发中要对参数做好校验，一些非法的参数，不可能存在的key就直    接返回错误提示。<br>3.解决办法<br>   (1)将无效的key存放进Redis中,当出现Redis查不到数据，数据库也查不到数据的情况，我们就把这个key保存到Redis中，设置value=”null”，并设置其过期时间极短，后面再出现查询这个key的请求的时候，直接返回null，就不需要再查询数据库了。但这种处理方式是有问题的，假如传进来的这个不存在的Key值每次都是随机的，那存进Redis也没有意义。<br>   (2)使用布隆过滤器,如果布隆过滤器判定某个 key 不存在布隆过滤器中，那么就一定不存在，如果判定某个key存在，那么很大可能是存在(存在一定的误判率)。于是我们可以在缓存之前再加一个布隆过滤器，将数据库中的所有key都存储在布隆过滤器中，在查询Redis前先去布隆过滤器查询 key 是否存在，如果不存在就直接返回，不让其访问数据库，从而避免了对底层存储系统的查询压力。<br>4.注<br>   针对一些恶意攻击，攻击带过来的大量key是随机，那么我们采用第一种方案就会缓存大量    不存在key的数据。那么这种方案就不合适了，我们可以先对使用布隆过滤器方案进行过滤掉这    些key。所以，针对这种key异常多、请求重复率比较低的数据，优先使用第二种方案直接过滤    掉。而对于空数据的key有限的，重复率比较高的，则可优先采用第一种方式进行缓存。</li>
<li>缓存击穿<br>1.什么是缓存击穿<br>   缓存击穿跟缓存雪崩有点类似，缓存雪崩是大规模的key失效，而缓存击穿是某个热点的       key失效，大并发集中对其进行请求，就会造成大量请求读缓存没读到数据，从而导致高并发     访问数据库，引起数据库压力剧增。这种现象就叫做缓存击穿。<br>2.问题分析<br>  关键在于某个热点的key失效了，导致大并发集中打在数据库上。所以要从两个方面解        决,第一是否可以考虑热点key不设置过期时间,第二是否可以考虑降低打在数据库上的请求量。<br>3.解决方案<br>  (1)热点数据缓存永远不过期<br>  (2)把过期时间存在key对应的value里，如果发现要过期了，通过一个后台的异步线程进行         缓存的构建<br>  (1)在缓存失效后，通过互斥锁或者队列来控制读数据写缓存的线程数量，比如某个key只允         许一个线程查询数据和写缓存，其他线程等待。这种方式会阻塞其他的线程，此时系统的         吞吐量会下降</li>
<li>缓存雪崩<br>1.什么是缓存雪崩<br>  如果缓在某一个时刻出现大规模的key失效，那么就会导致大量的请求打在了数据库上面，导    致数据库压力巨大，如果在高并发的情况下，可能瞬间就会导致数据库宕机。这时候如果运维马    上又重启数据库，马上又会有新的流量把数据库打死。这就是缓存雪崩。<br>2.问题分析<br>  造成缓存雪崩的关键在于同一时间的大规模的key失效，为什么会出现这个问题，主要有两种    可能：第一种是Redis宕机，第二种可能就是采用了相同的过期时间。搞清楚原因之后，那么有    什么解决方案呢？<br>3.解决方案<br> (1)事前：<br>   ① 均匀过期：设置不同的过期时间，让缓存失效的时间尽量均匀，避免相同的过期时间导致       缓存雪崩，造成大量数据库的访问。<br>   ② 分级缓存：第一级缓存失效的基础上，访问二级缓存，每一级缓存的失效时间都不同。<br>   ③ 热点数据缓存永远不过期。<br> (2)事中<br>   ① 互斥锁：在缓存失效后，通过互斥锁或者队列来控制读数据写缓存的线程数量，比如某个       key只允许一个线程查询数据和写缓存，其他线程等待。这种方式会阻塞其他的线程，此时       系统的吞吐量会下降<br>   ② 使用熔断机制，限流降级。当流量达到一定的阈值，直接返回“系统拥挤”之类的提示，       防止过多的请求打在数据库上将数据库击垮，至少能保证一部分用户是可以正常使用，其他       用户多刷新几次也能得到结果。<br> (3)事后<br>   ① 开启Redis持久化机制，尽快恢复缓存数据，一旦重启，就能从磁盘上自动加载数据恢复       内存中的数据。</li>
<li>缓存预热<br>1.什么是缓存预热<br>   缓存预热是指系统上线后，提前将相关的缓存数据加载到缓存系统。避免在用户请求的时      候，先查询数据库，然后再将数据缓存的问题，用户直接查询事先被预热的缓存数据。<br>   如果不进行预热，那么Redis初始状态数据为空，系统上线初期，对于高并发的流量，都会    访问到数据库中， 对数据库造成流量的压力。<br>2.缓存预热解决方案<br>  (1)数据量不大的时候，工程启动的时候进行加载缓存动作；<br>  (2)数据量大的时候，设置一个定时任务脚本，进行缓存的刷新；<br>  (3)数据量太大的时候，优先保证热点数据进行提前加载到缓存。</li>
<li>缓存降级<br>缓存降级是指缓存失效或缓存服务器挂掉的情况下，不去访问数据库，直接返回默认数据或访问服务的内存数据。降级一般是有损的操作，所以尽量减少降级对于业务的影响程度。<br>在项目实战中通常会将部分热点数据缓存到服务的内存中，这样一旦缓存出现异常，可以直接使用服务的内存数据，从而避免数据库遭受巨大压力。</li>
</ul>
<h2 id="redis中的持久化"><a href="#redis中的持久化" class="headerlink" title="redis中的持久化"></a><a href="http://www.redis.cn/topics/persistence.html">redis中的持久化</a></h2><ul>
<li>  <strong>rdb</strong></li>
<li>  <strong>aof</strong></li>
</ul>
<h2 id="redis的集群"><a href="#redis的集群" class="headerlink" title="redis的集群"></a>redis的集群</h2><ul>
<li><strong><a href="http://www.redis.cn/topics/replication.html">主存复制</a></strong></li>
</ul>
<pre class="mermaid">graph TD
A[Mater] --> B[Slave]
    A --> C[Slave]
    A --> D[Slave]
    D --> E[Slave]
    D --> F[Slave]</pre>

<p>1.全量同步<br>         Redis全量复制一般发生在Slave初始化阶段，这时Slave需要将Master上的所有数据都 复制一份。具体步骤如下：<br>        -从服务器连接主服务器，发送SYNC命令；<br>        -主服务器接收到SYNC命名后，开始执行BGSAVE命令生成RDB文件并使用缓冲区记录此后执行的所有写命令；<br>        -主服务器BGSAVE执行完后，向所有从服务器发送快照文件，并在发送期间继续记录被执行的写命令；<br>        -从服务器收到快照文件后丢弃所有旧数据，载入收到的快照；<br>        -主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令；<br>        -从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令</p>
<p>2.增量同步<br>         -Redis增量复制是指Slave初始化后开始正常工作时主服务器发生的写操作同步到从服务器的过程。<br>         -增量复制的过程主要是主服务器每执行一个写命令就会向从服务器发送相同的写命令，从服务器接收并执行收到的写命令。<br>3.Redis主从同步策略<br>         -主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。当然，如果有需要，slave 在任何时候都可以发起全量同步。redis 策略是，无论如何，首先会尝试进行增量  同步，如不成功，要求从机进行全量同步。<br>4.<a href="https://www.cnblogs.com/daofaziran/p/10978628.html">详细文档</a></p>
<ul>
<li><a href="http://www.redis.cn/topics/sentinel.html"><strong>Redis哨兵模式(Sentinel)</strong></a></li>
</ul>
<p>​         Redis 的 Sentinel 系统用于管理多个 Redis 服务器（instance）， 该系统执行以下三个任务：<br>​         -<strong>监控（Monitoring</strong>）： Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。<br>​         -<strong>提醒（Notification）</strong>： 当被监控的某个 Redis 服务器出现问题时,Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。<br>​         -<strong>自动故障迁移（Automatic failover）</strong>： 当一个主服务器不能正常工作时， Sentinel 会开始一次自动故障迁移操作， 它会将失效主服务器的其中一个从服务器升级为新的主服务器， 并让失效主服务器的其他从服务器改为复制新的主服务器； 当客户端试图连接失效的主服务器时， 集群也会向客户端返回新主服务器的地址， 使得集群可以使用新主服务器代替失效服务器。<br>Redis Sentinel 是一个分布式系统， 你可以在一个架构中运行多个 Sentinel 进程（progress）， 这些进程使用流言协议（gossip protocols)来接收关于主服务器是否下线的信息， 并使用投票协议（agreement protocols）来决定是否执行自动故障迁移， 以及选择哪个从服务器作为新的主服务器。<br>虽然 Redis Sentinel 释出为一个单独的可执行文件 redis-sentinel ， 但实际上它只是一个运行在特殊模式下的 Redis 服务器， 你可以在启动一个普通 Redis 服务器时通过给定 –sentinel 选项来启动 Redis Sentinel 。</p>
<ul>
<li><a href="http://www.redis.cn/topics/cluster-tutorial.html"><strong>分区</strong></a><br>有许多分区标准。假如我们有4个Redis实例<strong>R0</strong>, <strong>R1</strong>, <strong>R2</strong>, <strong>R3</strong>,有一批用户数据<code>user:1</code>, <code>user:2</code>, … ,那么有很多存储方案可以选择。从另一方面说，有很多<em>different systems to map</em>方案可以决定用户映射到哪个Redis实例。<br>一种最简单的方法就是<strong>范围分区</strong>,就是将不同范围的对象映射到不同Redis实例。比如说，用户ID从0到10000的都被存储到<strong>R0</strong>,用户ID从10001到20000被存储到<strong>R1</strong>,依此类推。<br>这是一种可行方案并且很多人已经在使用。但是这种方案也有缺点，你需要建一张表存储数据到redis实例的映射关系。这张表需要非常谨慎地维护并且需要为每一类对象建立映射关系，所以redis范围分区通常并不像你想象的那样运行，比另外一种分区方案效率要低很多。<br>另一种可选的范围分区方案是<strong>散列分区</strong>，这种方案要求更低，不需要key必须是<code>object_name:&lt;id&gt;</code>的形式，如此简单：<br>​         -使用散列函数 (如 <code>crc32</code> )将键名称转换为一个数字。例：键<code>foobar</code>, 使用<code>crc32(foobar)</code>函数将产生散列值<code>93024922</code>。<br>​         -对转换后的散列值进行取模，以产生一个0到3的数字，以便可以使这个key映射到4个Redis实例当中的一个。<code>93024922 % 4</code> 等于 <code>2</code>, 所以 <code>foobar</code> 会被存储到第2个Redis实例。 <strong>R2</strong> <em>注意: 对一个数字进行取模，在大多数编程语言中是使用运算符%</em><br>还有很多分区方法，上面只是给出了两个简单示例。有一种比较高级的散列分区方法叫<strong>一致性哈希</strong>，并且有一些客户端和代理（proxies)已经实现.<br><strong>分区的优势</strong><br>​       1.通过利用多台计算机内存的和值，允许我们构造更大的数据库。<br>​        2.通过多核和多台计算机，允许我们扩展计算能力；通过多台计算机和网络适配器，允许我们扩展网络带宽。<br> <strong>分区的不足</strong><br> 1.涉及多个key的操作通常是不被支持的。举例来说，当两个set映射到不同的redis实例上<br> 时，你就不能对这两个set执行交集操作。<br> 2.涉及多个key的redis事务不能使用。<br> 3.当使用分区时，数据处理较为复杂，比如你需要处理多个rdb/aof文件，并且从多个实例<br> 和主机备份持久化文件。<br> 4.增加或删除容量也比较复杂。redis集群大多数支持在运行时增加、删除节点的透明数据<br> 平衡的能力，但是类似于客户端分区、代理等其他系统则不支持这项特性。然而，一种叫做presharding的技术对此是有帮助的。<br><strong>支持redis自动分区的工具</strong><br>   -<a href="https://github.com/joyieldInc/predixy/blob/master/README_CN.md">predix</a><br>   -<a href="https://github.com/twitter/twemproxy">twemprox</a><br>   <a href="https://www.jianshu.com/p/dfd28d3b545f">predix和twemprox性能对比记录</a><br> 综合以上推荐使用predixy，支持的redis的比较全面。</li>
</ul>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap源码详解</title>
    <url>/2021/06/05/HashMap%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> java.util.concurrent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">ConcurrentMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7249069246763182397L</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//容器最大长度</span></span><br><span class="line">     <span class="comment">//  1. int的最大的值是2的31次方-1，所以容量无法到达2的31次方，</span></span><br><span class="line">     <span class="comment">//  2. 需要让容量满足2的幂次，所以设置为2的30次方 </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//初始值   </span></span><br><span class="line">     <span class="comment">// 1. 方便数据迁移</span></span><br><span class="line">     <span class="comment">//  2. 方便进行计算对应的位置</span></span><br><span class="line">     <span class="comment">//3. 概率统计</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//数组最大长度</span></span><br><span class="line">    <span class="comment">// 由于Array是jvm直接操作的，所以会在头部存储一些头部信息，所以此处需要-8</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//默认的并发数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CONCURRENCY_LEVEL = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 加载因子  </span></span><br><span class="line">     <span class="comment">//当前数组的长度是0.75倍的时候进行扩容  即当数组长度是16  16*0.75=12 即在12的时候进行扩容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line">      <span class="comment">// 泊松分布</span></span><br><span class="line">     <span class="comment">//当链表长度&gt;=8的时候转红黑树</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line">     <span class="comment">// 泊松分布</span></span><br><span class="line">    <span class="comment">//红黑树转链表</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//最小</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Minimum number of rebinnings per transfer step. Ranges are</span></span><br><span class="line"><span class="comment">     * subdivided to allow multiple resizer threads.  This value</span></span><br><span class="line"><span class="comment">     * serves as a lower bound to avoid resizers encountering</span></span><br><span class="line"><span class="comment">     * excessive memory contention.  The value should be at least</span></span><br><span class="line"><span class="comment">     * DEFAULT_CAPACITY.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TRANSFER_STRIDE = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The number of bits used for generation stamp in sizeCtl.</span></span><br><span class="line"><span class="comment">     * Must be at least 6 for 32bit arrays.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> RESIZE_STAMP_BITS = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The maximum number of threads that can help resize.</span></span><br><span class="line"><span class="comment">     * Must fit in 32 - RESIZE_STAMP_BITS bits.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RESIZERS = (<span class="number">1</span> &lt;&lt; (<span class="number">32</span> - RESIZE_STAMP_BITS)) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bit shift for recording size stamp in sizeCtl.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESIZE_STAMP_SHIFT = <span class="number">32</span> - RESIZE_STAMP_BITS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Encodings for Node hash fields. See above for explanation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVED     = -<span class="number">1</span>; <span class="comment">// hash for forwarding nodes</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEBIN   = -<span class="number">2</span>; <span class="comment">// hash for roots of trees</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESERVED  = -<span class="number">3</span>; <span class="comment">// hash for transient reservations</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_BITS = <span class="number">0x7fffffff</span>; <span class="comment">// usable bits of normal node hash</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Number of CPUS, to place bounds on some sizings */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NCPU = Runtime.getRuntime().availableProcessors();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** For serialization compatibility. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectStreamField[] serialPersistentFields = &#123;</span><br><span class="line">        <span class="keyword">new</span> ObjectStreamField(<span class="string">&quot;segments&quot;</span>, Segment[].class),</span><br><span class="line">        <span class="keyword">new</span> ObjectStreamField(<span class="string">&quot;segmentMask&quot;</span>, Integer.TYPE),</span><br><span class="line">        <span class="keyword">new</span> ObjectStreamField(<span class="string">&quot;segmentShift&quot;</span>, Integer.TYPE)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Nodes -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Key-value entry.  This class is never exported out as a</span></span><br><span class="line"><span class="comment">     * user-mutable Map.Entry (i.e., one supporting setValue; see</span></span><br><span class="line"><span class="comment">     * MapEntry below), but can be used for read-only traversals used</span></span><br><span class="line"><span class="comment">     * in bulk tasks.  Subclasses of Node with a negative hash field</span></span><br><span class="line"><span class="comment">     * are special, and contain null keys and values (but are never</span></span><br><span class="line"><span class="comment">     * exported).  Otherwise, keys and vals are never null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        <span class="keyword">volatile</span> V val;</span><br><span class="line">        <span class="keyword">volatile</span> Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>       </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>     </span>&#123; <span class="keyword">return</span> val; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span>   </span>&#123; <span class="keyword">return</span> key.hashCode() ^ val.hashCode(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + val; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            Object k, v, u; Map.Entry&lt;?,?&gt; e;</span><br><span class="line">            <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Map.Entry) &amp;&amp;</span><br><span class="line">                    (k = (e = (Map.Entry&lt;?,?&gt;)o).getKey()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                    (v = e.getValue()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                    (k == key || k.equals(key)) &amp;&amp;</span><br><span class="line">                    (v == (u = val) || v.equals(u)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Virtualized support for map.get(); overridden in subclasses.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; e = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">if</span> (k != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    K ek;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                        ((ek = e.key) == k || (ek != <span class="keyword">null</span> &amp;&amp; k.equals(ek))))</span><br><span class="line">                        <span class="keyword">return</span> e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Static utilities -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spreads (XORs) higher bits of hash to lower and also forces top</span></span><br><span class="line"><span class="comment">     * bit to 0. Because the table uses power-of-two masking, sets of</span></span><br><span class="line"><span class="comment">     * hashes that vary only in bits above the current mask will</span></span><br><span class="line"><span class="comment">     * always collide. (Among known examples are sets of Float keys</span></span><br><span class="line"><span class="comment">     * holding consecutive whole numbers in small tables.)  So we</span></span><br><span class="line"><span class="comment">     * apply a transform that spreads the impact of higher bits</span></span><br><span class="line"><span class="comment">     * downward. There is a tradeoff between speed, utility, and</span></span><br><span class="line"><span class="comment">     * quality of bit-spreading. Because many common sets of hashes</span></span><br><span class="line"><span class="comment">     * are already reasonably distributed (so don&#x27;t benefit from</span></span><br><span class="line"><span class="comment">     * spreading), and because we use trees to handle large sets of</span></span><br><span class="line"><span class="comment">     * collisions in bins, we just XOR some shifted bits in the</span></span><br><span class="line"><span class="comment">     * cheapest possible way to reduce systematic lossage, as well as</span></span><br><span class="line"><span class="comment">     * to incorporate impact of the highest bits that would otherwise</span></span><br><span class="line"><span class="comment">     * never be used in index calculations because of table bounds.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">spread</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (h ^ (h &gt;&gt;&gt; <span class="number">16</span>)) &amp; HASH_BITS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a power of two table size for the given desired capacity.</span></span><br><span class="line"><span class="comment">     * See Hackers Delight, sec 3.2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = c - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns x&#x27;s Class if it is of the form &quot;class C implements</span></span><br><span class="line"><span class="comment">     * Comparable&lt;C&gt;&quot;, else null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> Class&lt;?&gt; comparableClassFor(Object x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> Comparable) &#123;</span><br><span class="line">            Class&lt;?&gt; c; Type[] ts, as; Type t; ParameterizedType p;</span><br><span class="line">            <span class="keyword">if</span> ((c = x.getClass()) == String.class) <span class="comment">// bypass checks</span></span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            <span class="keyword">if</span> ((ts = c.getGenericInterfaces()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ts.length; ++i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (((t = ts[i]) <span class="keyword">instanceof</span> ParameterizedType) &amp;&amp;</span><br><span class="line">                        ((p = (ParameterizedType)t).getRawType() ==</span><br><span class="line">                         Comparable.class) &amp;&amp;</span><br><span class="line">                        (as = p.getActualTypeArguments()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                        as.length == <span class="number">1</span> &amp;&amp; as[<span class="number">0</span>] == c) <span class="comment">// type arg is c</span></span><br><span class="line">                        <span class="keyword">return</span> c;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns k.compareTo(x) if x matches kc (k&#x27;s screened comparable</span></span><br><span class="line"><span class="comment">     * class), else 0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span> <span class="comment">// for cast to Comparable</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareComparables</span><span class="params">(Class&lt;?&gt; kc, Object k, Object x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (x == <span class="keyword">null</span> || x.getClass() != kc ? <span class="number">0</span> :</span><br><span class="line">                ((Comparable)k).compareTo(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Table element access -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Volatile access methods are used for table elements as well as</span></span><br><span class="line"><span class="comment">     * elements of in-progress next table while resizing.  All uses of</span></span><br><span class="line"><span class="comment">     * the tab arguments must be null checked by callers.  All callers</span></span><br><span class="line"><span class="comment">     * also paranoically precheck that tab&#x27;s length is not zero (or an</span></span><br><span class="line"><span class="comment">     * equivalent check), thus ensuring that any index argument taking</span></span><br><span class="line"><span class="comment">     * the form of a hash value anded with (length - 1) is a valid</span></span><br><span class="line"><span class="comment">     * index.  Note that, to be correct wrt arbitrary concurrency</span></span><br><span class="line"><span class="comment">     * errors by users, these checks must operate on local variables,</span></span><br><span class="line"><span class="comment">     * which accounts for some odd-looking inline assignments below.</span></span><br><span class="line"><span class="comment">     * Note that calls to setTabAt always occur within locked regions,</span></span><br><span class="line"><span class="comment">     * and so in principle require only release ordering, not</span></span><br><span class="line"><span class="comment">     * full volatile semantics, but are currently coded as volatile</span></span><br><span class="line"><span class="comment">     * writes to be conservative.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function">Node&lt;K,V&gt; <span class="title">tabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">casTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> U.compareAndSwapObject(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function"><span class="keyword">void</span> <span class="title">setTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i, Node&lt;K,V&gt; v)</span> </span>&#123;</span><br><span class="line">        U.putObjectVolatile(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Fields -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The array of bins. Lazily initialized upon first insertion.</span></span><br><span class="line"><span class="comment">     * Size is always a power of two. Accessed directly by iterators.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The next table to use; non-null only while resizing.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Base counter value, used mainly when there is no contention,</span></span><br><span class="line"><span class="comment">     * but also as a fallback during table initialization</span></span><br><span class="line"><span class="comment">     * races. Updated via CAS.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">long</span> baseCount;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// -1 初始化</span></span><br><span class="line">    <span class="comment">// -n 扩容</span></span><br><span class="line">    <span class="comment">// 正数  代表当前数组扩容的阈值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> sizeCtl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The next table index (plus one) to split while resizing.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> transferIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spinlock (locked via CAS) used when resizing and/or creating CounterCells.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> cellsBusy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Table of counter cells. When non-null, size is a power of 2.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> CounterCell[] counterCells;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// views</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> KeySetView&lt;K,V&gt; keySet;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> ValuesView&lt;K,V&gt; values;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> EntrySetView&lt;K,V&gt; entrySet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Public operations -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new, empty map with the default initial table size (16).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new, empty map with an initial table size</span></span><br><span class="line"><span class="comment">     * accommodating the specified number of elements without the need</span></span><br><span class="line"><span class="comment">     * to dynamically resize.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initialCapacity The implementation performs internal</span></span><br><span class="line"><span class="comment">     * sizing to accommodate this many elements.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity of</span></span><br><span class="line"><span class="comment">     * elements is negative</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">int</span> cap = ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</span><br><span class="line">                   MAXIMUM_CAPACITY :</span><br><span class="line">                   tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">this</span>.sizeCtl = cap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new map with the same mappings as the given map.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m the map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sizeCtl = DEFAULT_CAPACITY;</span><br><span class="line">        putAll(m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new, empty map with an initial table size based on</span></span><br><span class="line"><span class="comment">     * the given number of elements (&#123;<span class="doctag">@code</span> initialCapacity&#125;) and</span></span><br><span class="line"><span class="comment">     * initial table density (&#123;<span class="doctag">@code</span> loadFactor&#125;).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initialCapacity the initial capacity. The implementation</span></span><br><span class="line"><span class="comment">     * performs internal sizing to accommodate this many elements,</span></span><br><span class="line"><span class="comment">     * given the specified load factor.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loadFactor the load factor (table density) for</span></span><br><span class="line"><span class="comment">     * establishing the initial table size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity of</span></span><br><span class="line"><span class="comment">     * elements is negative or the load factor is nonpositive</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, loadFactor, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new, empty map with an initial table size based on</span></span><br><span class="line"><span class="comment">     * the given number of elements (&#123;<span class="doctag">@code</span> initialCapacity&#125;), table</span></span><br><span class="line"><span class="comment">     * density (&#123;<span class="doctag">@code</span> loadFactor&#125;), and number of concurrently</span></span><br><span class="line"><span class="comment">     * updating threads (&#123;<span class="doctag">@code</span> concurrencyLevel&#125;).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initialCapacity the initial capacity. The implementation</span></span><br><span class="line"><span class="comment">     * performs internal sizing to accommodate this many elements,</span></span><br><span class="line"><span class="comment">     * given the specified load factor.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loadFactor the load factor (table density) for</span></span><br><span class="line"><span class="comment">     * establishing the initial table size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> concurrencyLevel the estimated number of concurrently</span></span><br><span class="line"><span class="comment">     * updating threads. The implementation may use this value as</span></span><br><span class="line"><span class="comment">     * a sizing hint.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity is</span></span><br><span class="line"><span class="comment">     * negative or the load factor or concurrencyLevel are</span></span><br><span class="line"><span class="comment">     * nonpositive</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">float</span> loadFactor, <span class="keyword">int</span> concurrencyLevel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0.0f</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; concurrencyLevel)   <span class="comment">// Use at least as many bins</span></span><br><span class="line">            initialCapacity = concurrencyLevel;   <span class="comment">// as estimated threads</span></span><br><span class="line">        <span class="keyword">long</span> size = (<span class="keyword">long</span>)(<span class="number">1.0</span> + (<span class="keyword">long</span>)initialCapacity / loadFactor);</span><br><span class="line">        <span class="keyword">int</span> cap = (size &gt;= (<span class="keyword">long</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">            MAXIMUM_CAPACITY : tableSizeFor((<span class="keyword">int</span>)size);</span><br><span class="line">        <span class="keyword">this</span>.sizeCtl = cap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Original (since JDK1.2) Map methods</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> n = sumCount();</span><br><span class="line">        <span class="keyword">return</span> ((n &lt; <span class="number">0L</span>) ? <span class="number">0</span> :</span><br><span class="line">                (n &gt; (<span class="keyword">long</span>)Integer.MAX_VALUE) ? Integer.MAX_VALUE :</span><br><span class="line">                (<span class="keyword">int</span>)n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sumCount() &lt;= <span class="number">0L</span>; <span class="comment">// ignore transient negative values</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the value to which the specified key is mapped,</span></span><br><span class="line"><span class="comment">     * or &#123;<span class="doctag">@code</span> null&#125; if this map contains no mapping for the key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;More formally, if this map contains a mapping from a key</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> k&#125; to a value &#123;<span class="doctag">@code</span> v&#125; such that &#123;<span class="doctag">@code</span> key.equals(k)&#125;,</span></span><br><span class="line"><span class="comment">     * then this method returns &#123;<span class="doctag">@code</span> v&#125;; otherwise it returns</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> null&#125;.  (There can be at most one such mapping.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="keyword">int</span> n, eh; K ek;</span><br><span class="line">        <span class="keyword">int</span> h = spread(key.hashCode());</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((eh = e.hash) == h) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))</span><br><span class="line">                    <span class="keyword">return</span> e.val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (eh &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> (p = e.find(h, key)) != <span class="keyword">null</span> ? p.val : <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                    ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek))))</span><br><span class="line">                    <span class="keyword">return</span> e.val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Tests if the specified object is a key in this table.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  key possible key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if and only if the specified object</span></span><br><span class="line"><span class="comment">     *         is a key in this table, as determined by the</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> equals&#125; method; &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(key) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns &#123;<span class="doctag">@code</span> true&#125; if this map maps one or more keys to the</span></span><br><span class="line"><span class="comment">     * specified value. Note: This method may require a full traversal</span></span><br><span class="line"><span class="comment">     * of the map, and is much slower than method &#123;<span class="doctag">@code</span> containsKey&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value whose presence in this map is to be tested</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this map maps one or more keys to the</span></span><br><span class="line"><span class="comment">     *         specified value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified value is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="keyword">if</span> ((t = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Traverser&lt;K,V&gt; it = <span class="keyword">new</span> Traverser&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">                V v;</span><br><span class="line">                <span class="keyword">if</span> ((v = p.val) == value || (v != <span class="keyword">null</span> &amp;&amp; value.equals(v)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Maps the specified key to the specified value in this table.</span></span><br><span class="line"><span class="comment">     * Neither the key nor the value can be null.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The value can be retrieved by calling the &#123;<span class="doctag">@code</span> get&#125; method</span></span><br><span class="line"><span class="comment">     * with a key that is equal to the original key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value associated with &#123;<span class="doctag">@code</span> key&#125;, or</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> null&#125; if there was no mapping for &#123;<span class="doctag">@code</span> key&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key or value is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(key, value, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Implementation for put and putIfAbsent */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">int</span> hash = spread(key.hashCode());</span><br><span class="line">        <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">                tab = initTable();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                             <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">                    <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                V oldVal = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            binCount = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                                K ek;</span><br><span class="line">                                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                    ((ek = e.key) == key ||</span><br><span class="line">                                     (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                    oldVal = e.val;</span><br><span class="line">                                    <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                        e.val = value;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                Node&lt;K,V&gt; pred = e;</span><br><span class="line">                                <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                              value, <span class="keyword">null</span>);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            Node&lt;K,V&gt; p;</span><br><span class="line">                            binCount = <span class="number">2</span>;</span><br><span class="line">                            <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                           value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                oldVal = p.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    p.val = value;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                        treeifyBin(tab, i);</span><br><span class="line">                    <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> oldVal;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Copies all of the mappings from the specified map to this one.</span></span><br><span class="line"><span class="comment">     * These mappings replace any mappings that this map had for any of the</span></span><br><span class="line"><span class="comment">     * keys currently in the specified map.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m mappings to be stored in this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        tryPresize(m.size());</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet())</span><br><span class="line">            putVal(e.getKey(), e.getValue(), <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the key (and its corresponding value) from this map.</span></span><br><span class="line"><span class="comment">     * This method does nothing if the key is not in the map.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  key the key that needs to be removed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value associated with &#123;<span class="doctag">@code</span> key&#125;, or</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> null&#125; if there was no mapping for &#123;<span class="doctag">@code</span> key&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> replaceNode(key, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Implementation for the four public remove/replace methods:</span></span><br><span class="line"><span class="comment">     * Replaces node value with v, conditional upon match of cv if</span></span><br><span class="line"><span class="comment">     * non-null.  If resulting value is null, delete.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> V <span class="title">replaceNode</span><span class="params">(Object key, V value, Object cv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> hash = spread(key.hashCode());</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span> ||</span><br><span class="line">                (f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                V oldVal = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">boolean</span> validated = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            validated = <span class="keyword">true</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f, pred = <span class="keyword">null</span>;;) &#123;</span><br><span class="line">                                K ek;</span><br><span class="line">                                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                    ((ek = e.key) == key ||</span><br><span class="line">                                     (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                    V ev = e.val;</span><br><span class="line">                                    <span class="keyword">if</span> (cv == <span class="keyword">null</span> || cv == ev ||</span><br><span class="line">                                        (ev != <span class="keyword">null</span> &amp;&amp; cv.equals(ev))) &#123;</span><br><span class="line">                                        oldVal = ev;</span><br><span class="line">                                        <span class="keyword">if</span> (value != <span class="keyword">null</span>)</span><br><span class="line">                                            e.val = value;</span><br><span class="line">                                        <span class="keyword">else</span> <span class="keyword">if</span> (pred != <span class="keyword">null</span>)</span><br><span class="line">                                            pred.next = e.next;</span><br><span class="line">                                        <span class="keyword">else</span></span><br><span class="line">                                            setTabAt(tab, i, e.next);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                pred = e;</span><br><span class="line">                                <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>)</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            validated = <span class="keyword">true</span>;</span><br><span class="line">                            TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                            TreeNode&lt;K,V&gt; r, p;</span><br><span class="line">                            <span class="keyword">if</span> ((r = t.root) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                (p = r.findTreeNode(hash, key, <span class="keyword">null</span>)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                V pv = p.val;</span><br><span class="line">                                <span class="keyword">if</span> (cv == <span class="keyword">null</span> || cv == pv ||</span><br><span class="line">                                    (pv != <span class="keyword">null</span> &amp;&amp; cv.equals(pv))) &#123;</span><br><span class="line">                                    oldVal = pv;</span><br><span class="line">                                    <span class="keyword">if</span> (value != <span class="keyword">null</span>)</span><br><span class="line">                                        p.val = value;</span><br><span class="line">                                    <span class="keyword">else</span> <span class="keyword">if</span> (t.removeTreeNode(p))</span><br><span class="line">                                        setTabAt(tab, i, untreeify(t.first));</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (validated) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (value == <span class="keyword">null</span>)</span><br><span class="line">                            addCount(-<span class="number">1L</span>, -<span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">return</span> oldVal;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes all of the mappings from this map.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> delta = <span class="number">0L</span>; <span class="comment">// negative number of deletions</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        Node&lt;K,V&gt;[] tab = table;</span><br><span class="line">        <span class="keyword">while</span> (tab != <span class="keyword">null</span> &amp;&amp; i &lt; tab.length) &#123;</span><br><span class="line">            <span class="keyword">int</span> fh;</span><br><span class="line">            Node&lt;K,V&gt; f = tabAt(tab, i);</span><br><span class="line">            <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">                ++i;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED) &#123;</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">                i = <span class="number">0</span>; <span class="comment">// restart</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        Node&lt;K,V&gt; p = (fh &gt;= <span class="number">0</span> ? f :</span><br><span class="line">                                       (f <span class="keyword">instanceof</span> TreeBin) ?</span><br><span class="line">                                       ((TreeBin&lt;K,V&gt;)f).first : <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            --delta;</span><br><span class="line">                            p = p.next;</span><br><span class="line">                        &#125;</span><br><span class="line">                        setTabAt(tab, i++, <span class="keyword">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (delta != <span class="number">0L</span>)</span><br><span class="line">            addCount(delta, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a &#123;<span class="doctag">@link</span> Set&#125; view of the keys contained in this map.</span></span><br><span class="line"><span class="comment">     * The set is backed by the map, so changes to the map are</span></span><br><span class="line"><span class="comment">     * reflected in the set, and vice-versa. The set supports element</span></span><br><span class="line"><span class="comment">     * removal, which removes the corresponding mapping from this map,</span></span><br><span class="line"><span class="comment">     * via the &#123;<span class="doctag">@code</span> Iterator.remove&#125;, &#123;<span class="doctag">@code</span> Set.remove&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> removeAll&#125;, &#123;<span class="doctag">@code</span> retainAll&#125;, and &#123;<span class="doctag">@code</span> clear&#125;</span></span><br><span class="line"><span class="comment">     * operations.  It does not support the &#123;<span class="doctag">@code</span> add&#125; or</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> addAll&#125; operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The view&#x27;s iterators and spliterators are</span></span><br><span class="line"><span class="comment">     * &lt;a href=&quot;package-summary.html#Weakly&quot;&gt;&lt;i&gt;weakly consistent&lt;/i&gt;&lt;/a&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The view&#x27;s &#123;<span class="doctag">@code</span> spliterator&#125; reports &#123;<span class="doctag">@link</span> Spliterator#CONCURRENT&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Spliterator#DISTINCT&#125;, and &#123;<span class="doctag">@link</span> Spliterator#NONNULL&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the set view</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeySetView&lt;K,V&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        KeySetView&lt;K,V&gt; ks;</span><br><span class="line">        <span class="keyword">return</span> (ks = keySet) != <span class="keyword">null</span> ? ks : (keySet = <span class="keyword">new</span> KeySetView&lt;K,V&gt;(<span class="keyword">this</span>, <span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a &#123;<span class="doctag">@link</span> Collection&#125; view of the values contained in this map.</span></span><br><span class="line"><span class="comment">     * The collection is backed by the map, so changes to the map are</span></span><br><span class="line"><span class="comment">     * reflected in the collection, and vice-versa.  The collection</span></span><br><span class="line"><span class="comment">     * supports element removal, which removes the corresponding</span></span><br><span class="line"><span class="comment">     * mapping from this map, via the &#123;<span class="doctag">@code</span> Iterator.remove&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> Collection.remove&#125;, &#123;<span class="doctag">@code</span> removeAll&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> retainAll&#125;, and &#123;<span class="doctag">@code</span> clear&#125; operations.  It does not</span></span><br><span class="line"><span class="comment">     * support the &#123;<span class="doctag">@code</span> add&#125; or &#123;<span class="doctag">@code</span> addAll&#125; operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The view&#x27;s iterators and spliterators are</span></span><br><span class="line"><span class="comment">     * &lt;a href=&quot;package-summary.html#Weakly&quot;&gt;&lt;i&gt;weakly consistent&lt;/i&gt;&lt;/a&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The view&#x27;s &#123;<span class="doctag">@code</span> spliterator&#125; reports &#123;<span class="doctag">@link</span> Spliterator#CONCURRENT&#125;</span></span><br><span class="line"><span class="comment">     * and &#123;<span class="doctag">@link</span> Spliterator#NONNULL&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the collection view</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ValuesView&lt;K,V&gt; vs;</span><br><span class="line">        <span class="keyword">return</span> (vs = values) != <span class="keyword">null</span> ? vs : (values = <span class="keyword">new</span> ValuesView&lt;K,V&gt;(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a &#123;<span class="doctag">@link</span> Set&#125; view of the mappings contained in this map.</span></span><br><span class="line"><span class="comment">     * The set is backed by the map, so changes to the map are</span></span><br><span class="line"><span class="comment">     * reflected in the set, and vice-versa.  The set supports element</span></span><br><span class="line"><span class="comment">     * removal, which removes the corresponding mapping from the map,</span></span><br><span class="line"><span class="comment">     * via the &#123;<span class="doctag">@code</span> Iterator.remove&#125;, &#123;<span class="doctag">@code</span> Set.remove&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> removeAll&#125;, &#123;<span class="doctag">@code</span> retainAll&#125;, and &#123;<span class="doctag">@code</span> clear&#125;</span></span><br><span class="line"><span class="comment">     * operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The view&#x27;s iterators and spliterators are</span></span><br><span class="line"><span class="comment">     * &lt;a href=&quot;package-summary.html#Weakly&quot;&gt;&lt;i&gt;weakly consistent&lt;/i&gt;&lt;/a&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The view&#x27;s &#123;<span class="doctag">@code</span> spliterator&#125; reports &#123;<span class="doctag">@link</span> Spliterator#CONCURRENT&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Spliterator#DISTINCT&#125;, and &#123;<span class="doctag">@link</span> Spliterator#NONNULL&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the set view</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span><br><span class="line">        EntrySetView&lt;K,V&gt; es;</span><br><span class="line">        <span class="keyword">return</span> (es = entrySet) != <span class="keyword">null</span> ? es : (entrySet = <span class="keyword">new</span> EntrySetView&lt;K,V&gt;(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the hash code value for this &#123;<span class="doctag">@link</span> Map&#125;, i.e.,</span></span><br><span class="line"><span class="comment">     * the sum of, for each key-value pair in the map,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> key.hashCode() ^ value.hashCode()&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the hash code value for this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="keyword">if</span> ((t = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Traverser&lt;K,V&gt; it = <span class="keyword">new</span> Traverser&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="keyword">null</span>; )</span><br><span class="line">                h += p.key.hashCode() ^ p.val.hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a string representation of this map.  The string</span></span><br><span class="line"><span class="comment">     * representation consists of a list of key-value mappings (in no</span></span><br><span class="line"><span class="comment">     * particular order) enclosed in braces (&quot;&#123;<span class="doctag">@code</span> &#123;&#125;&#125;&quot;).  Adjacent</span></span><br><span class="line"><span class="comment">     * mappings are separated by the characters &#123;<span class="doctag">@code</span> &quot;, &quot;&#125; (comma</span></span><br><span class="line"><span class="comment">     * and space).  Each key-value mapping is rendered as the key</span></span><br><span class="line"><span class="comment">     * followed by an equals sign (&quot;&#123;<span class="doctag">@code</span> =&#125;&quot;) followed by the</span></span><br><span class="line"><span class="comment">     * associated value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a string representation of this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="keyword">int</span> f = (t = table) == <span class="keyword">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">        Traverser&lt;K,V&gt; it = <span class="keyword">new</span> Traverser&lt;K,V&gt;(t, f, <span class="number">0</span>, f);</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">&#x27;&#123;&#x27;</span>);</span><br><span class="line">        Node&lt;K,V&gt; p;</span><br><span class="line">        <span class="keyword">if</span> ((p = it.advance()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                K k = p.key;</span><br><span class="line">                V v = p.val;</span><br><span class="line">                sb.append(k == <span class="keyword">this</span> ? <span class="string">&quot;(this Map)&quot;</span> : k);</span><br><span class="line">                sb.append(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">                sb.append(v == <span class="keyword">this</span> ? <span class="string">&quot;(this Map)&quot;</span> : v);</span><br><span class="line">                <span class="keyword">if</span> ((p = it.advance()) == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                sb.append(<span class="string">&#x27;,&#x27;</span>).append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.append(<span class="string">&#x27;&#125;&#x27;</span>).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Compares the specified object with this map for equality.</span></span><br><span class="line"><span class="comment">     * Returns &#123;<span class="doctag">@code</span> true&#125; if the given object is a map with the same</span></span><br><span class="line"><span class="comment">     * mappings as this map.  This operation may return misleading</span></span><br><span class="line"><span class="comment">     * results if either map is concurrently modified during execution</span></span><br><span class="line"><span class="comment">     * of this method.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o object to be compared for equality with this map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the specified object is equal to this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o != <span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map&lt;?,?&gt; m = (Map&lt;?,?&gt;) o;</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            <span class="keyword">int</span> f = (t = table) == <span class="keyword">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">            Traverser&lt;K,V&gt; it = <span class="keyword">new</span> Traverser&lt;K,V&gt;(t, f, <span class="number">0</span>, f);</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">                V val = p.val;</span><br><span class="line">                Object v = m.get(p.key);</span><br><span class="line">                <span class="keyword">if</span> (v == <span class="keyword">null</span> || (v != val &amp;&amp; !v.equals(val)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;?,?&gt; e : m.entrySet()) &#123;</span><br><span class="line">                Object mk, mv, v;</span><br><span class="line">                <span class="keyword">if</span> ((mk = e.getKey()) == <span class="keyword">null</span> ||</span><br><span class="line">                    (mv = e.getValue()) == <span class="keyword">null</span> ||</span><br><span class="line">                    (v = get(mk)) == <span class="keyword">null</span> ||</span><br><span class="line">                    (mv != v &amp;&amp; !mv.equals(v)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Stripped-down version of helper class used in previous version,</span></span><br><span class="line"><span class="comment">     * declared for the sake of serialization compatibility</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2249069246763182397L</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line">        Segment(<span class="keyword">float</span> lf) &#123; <span class="keyword">this</span>.loadFactor = lf; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Saves the state of the &#123;<span class="doctag">@code</span> ConcurrentHashMap&#125; instance to a</span></span><br><span class="line"><span class="comment">     * stream (i.e., serializes it).</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s the stream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> java.io.IOException if an I/O error occurs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serialData</span></span></span><br><span class="line"><span class="comment">     * the key (Object) and value (Object)</span></span><br><span class="line"><span class="comment">     * for each key-value mapping, followed by a null pair.</span></span><br><span class="line"><span class="comment">     * The key-value mappings are emitted in no particular order.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line">        <span class="comment">// For serialization compatibility</span></span><br><span class="line">        <span class="comment">// Emulate segment calculation from previous version of this class</span></span><br><span class="line">        <span class="keyword">int</span> sshift = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ssize = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (ssize &lt; DEFAULT_CONCURRENCY_LEVEL) &#123;</span><br><span class="line">            ++sshift;</span><br><span class="line">            ssize &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> segmentShift = <span class="number">32</span> - sshift;</span><br><span class="line">        <span class="keyword">int</span> segmentMask = ssize - <span class="number">1</span>;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Segment&lt;K,V&gt;[] segments = (Segment&lt;K,V&gt;[])</span><br><span class="line">            <span class="keyword">new</span> Segment&lt;?,?&gt;[DEFAULT_CONCURRENCY_LEVEL];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; segments.length; ++i)</span><br><span class="line">            segments[i] = <span class="keyword">new</span> Segment&lt;K,V&gt;(LOAD_FACTOR);</span><br><span class="line">        s.putFields().put(<span class="string">&quot;segments&quot;</span>, segments);</span><br><span class="line">        s.putFields().put(<span class="string">&quot;segmentShift&quot;</span>, segmentShift);</span><br><span class="line">        s.putFields().put(<span class="string">&quot;segmentMask&quot;</span>, segmentMask);</span><br><span class="line">        s.writeFields();</span><br><span class="line"></span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="keyword">if</span> ((t = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Traverser&lt;K,V&gt; it = <span class="keyword">new</span> Traverser&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">                s.writeObject(p.key);</span><br><span class="line">                s.writeObject(p.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s.writeObject(<span class="keyword">null</span>);</span><br><span class="line">        s.writeObject(<span class="keyword">null</span>);</span><br><span class="line">        segments = <span class="keyword">null</span>; <span class="comment">// throw away</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reconstitutes the instance from a stream (that is, deserializes it).</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s the stream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException if the class of a serialized object</span></span><br><span class="line"><span class="comment">     *         could not be found</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> java.io.IOException if an I/O error occurs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * To improve performance in typical cases, we create nodes</span></span><br><span class="line"><span class="comment">         * while reading, then place in table once size is known.</span></span><br><span class="line"><span class="comment">         * However, we must also validate uniqueness and deal with</span></span><br><span class="line"><span class="comment">         * overpopulated bins while doing so, which requires</span></span><br><span class="line"><span class="comment">         * specialized versions of putVal mechanics.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        sizeCtl = -<span class="number">1</span>; <span class="comment">// force exclusion for table construction</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        <span class="keyword">long</span> size = <span class="number">0L</span>;</span><br><span class="line">        Node&lt;K,V&gt; p = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            K k = (K) s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            V v = (V) s.readObject();</span><br><span class="line">            <span class="keyword">if</span> (k != <span class="keyword">null</span> &amp;&amp; v != <span class="keyword">null</span>) &#123;</span><br><span class="line">                p = <span class="keyword">new</span> Node&lt;K,V&gt;(spread(k.hashCode()), k, v, p);</span><br><span class="line">                ++size;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0L</span>)</span><br><span class="line">            sizeCtl = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> n;</span><br><span class="line">            <span class="keyword">if</span> (size &gt;= (<span class="keyword">long</span>)(MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>))</span><br><span class="line">                n = MAXIMUM_CAPACITY;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> sz = (<span class="keyword">int</span>)size;</span><br><span class="line">                n = tableSizeFor(sz + (sz &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</span><br><span class="line">            <span class="keyword">int</span> mask = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">long</span> added = <span class="number">0L</span>;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> insertAtFront;</span><br><span class="line">                Node&lt;K,V&gt; next = p.next, first;</span><br><span class="line">                <span class="keyword">int</span> h = p.hash, j = h &amp; mask;</span><br><span class="line">                <span class="keyword">if</span> ((first = tabAt(tab, j)) == <span class="keyword">null</span>)</span><br><span class="line">                    insertAtFront = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    K k = p.key;</span><br><span class="line">                    <span class="keyword">if</span> (first.hash &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)first;</span><br><span class="line">                        <span class="keyword">if</span> (t.putTreeVal(h, k, p.val) == <span class="keyword">null</span>)</span><br><span class="line">                            ++added;</span><br><span class="line">                        insertAtFront = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">                        insertAtFront = <span class="keyword">true</span>;</span><br><span class="line">                        Node&lt;K,V&gt; q; K qk;</span><br><span class="line">                        <span class="keyword">for</span> (q = first; q != <span class="keyword">null</span>; q = q.next) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (q.hash == h &amp;&amp;</span><br><span class="line">                                ((qk = q.key) == k ||</span><br><span class="line">                                 (qk != <span class="keyword">null</span> &amp;&amp; k.equals(qk)))) &#123;</span><br><span class="line">                                insertAtFront = <span class="keyword">false</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            ++binCount;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (insertAtFront &amp;&amp; binCount &gt;= TREEIFY_THRESHOLD) &#123;</span><br><span class="line">                            insertAtFront = <span class="keyword">false</span>;</span><br><span class="line">                            ++added;</span><br><span class="line">                            p.next = first;</span><br><span class="line">                            TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">                            <span class="keyword">for</span> (q = p; q != <span class="keyword">null</span>; q = q.next) &#123;</span><br><span class="line">                                TreeNode&lt;K,V&gt; t = <span class="keyword">new</span> TreeNode&lt;K,V&gt;</span><br><span class="line">                                    (q.hash, q.key, q.val, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                                <span class="keyword">if</span> ((t.prev = tl) == <span class="keyword">null</span>)</span><br><span class="line">                                    hd = t;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    tl.next = t;</span><br><span class="line">                                tl = t;</span><br><span class="line">                            &#125;</span><br><span class="line">                            setTabAt(tab, j, <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hd));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (insertAtFront) &#123;</span><br><span class="line">                    ++added;</span><br><span class="line">                    p.next = first;</span><br><span class="line">                    setTabAt(tab, j, p);</span><br><span class="line">                &#125;</span><br><span class="line">                p = next;</span><br><span class="line">            &#125;</span><br><span class="line">            table = tab;</span><br><span class="line">            sizeCtl = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">            baseCount = added;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ConcurrentMap methods</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value associated with the specified key,</span></span><br><span class="line"><span class="comment">     *         or &#123;<span class="doctag">@code</span> null&#125; if there was no mapping for the key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key or value is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">putIfAbsent</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(key, value, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> value != <span class="keyword">null</span> &amp;&amp; replaceNode(key, <span class="keyword">null</span>, value) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if any of the arguments are null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">replace</span><span class="params">(K key, V oldValue, V newValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span> || oldValue == <span class="keyword">null</span> || newValue == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> replaceNode(key, newValue, oldValue) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value associated with the specified key,</span></span><br><span class="line"><span class="comment">     *         or &#123;<span class="doctag">@code</span> null&#125; if there was no mapping for the key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key or value is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">replace</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> replaceNode(key, value, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Overrides of JDK8+ Map extension method defaults</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the value to which the specified key is mapped, or the</span></span><br><span class="line"><span class="comment">     * given default value if this map contains no mapping for the</span></span><br><span class="line"><span class="comment">     * key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key the key whose associated value is to be returned</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultValue the value to return if this map contains</span></span><br><span class="line"><span class="comment">     * no mapping for the given key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the mapping for the key, if present; else the default value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">getOrDefault</span><span class="params">(Object key, V defaultValue)</span> </span>&#123;</span><br><span class="line">        V v;</span><br><span class="line">        <span class="keyword">return</span> (v = get(key)) == <span class="keyword">null</span> ? defaultValue : v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(BiConsumer&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V&gt; action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="keyword">if</span> ((t = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Traverser&lt;K,V&gt; it = <span class="keyword">new</span> Traverser&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">                action.accept(p.key, p.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends V&gt; function)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (function == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="keyword">if</span> ((t = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Traverser&lt;K,V&gt; it = <span class="keyword">new</span> Traverser&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">                V oldValue = p.val;</span><br><span class="line">                <span class="keyword">for</span> (K key = p.key;;) &#123;</span><br><span class="line">                    V newValue = function.apply(key, oldValue);</span><br><span class="line">                    <span class="keyword">if</span> (newValue == <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">                    <span class="keyword">if</span> (replaceNode(key, newValue, oldValue) != <span class="keyword">null</span> ||</span><br><span class="line">                        (oldValue = get(key)) == <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If the specified key is not already associated with a value,</span></span><br><span class="line"><span class="comment">     * attempts to compute its value using the given mapping function</span></span><br><span class="line"><span class="comment">     * and enters it into this map unless &#123;<span class="doctag">@code</span> null&#125;.  The entire</span></span><br><span class="line"><span class="comment">     * method invocation is performed atomically, so the function is</span></span><br><span class="line"><span class="comment">     * applied at most once per key.  Some attempted update operations</span></span><br><span class="line"><span class="comment">     * on this map by other threads may be blocked while computation</span></span><br><span class="line"><span class="comment">     * is in progress, so the computation should be short and simple,</span></span><br><span class="line"><span class="comment">     * and must not attempt to update any other mappings of this map.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mappingFunction the function to compute a value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the current (existing or computed) value associated with</span></span><br><span class="line"><span class="comment">     *         the specified key, or null if the computed value is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key or mappingFunction</span></span><br><span class="line"><span class="comment">     *         is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalStateException if the computation detectably</span></span><br><span class="line"><span class="comment">     *         attempts a recursive update to this map that would</span></span><br><span class="line"><span class="comment">     *         otherwise never complete</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RuntimeException or Error if the mappingFunction does so,</span></span><br><span class="line"><span class="comment">     *         in which case the mapping is left unestablished</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">computeIfAbsent</span><span class="params">(K key, Function&lt;? <span class="keyword">super</span> K, ? extends V&gt; mappingFunction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span> || mappingFunction == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">int</span> h = spread(key.hashCode());</span><br><span class="line">        V val = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">                tab = initTable();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; h)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Node&lt;K,V&gt; r = <span class="keyword">new</span> ReservationNode&lt;K,V&gt;();</span><br><span class="line">                <span class="keyword">synchronized</span> (r) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>, r)) &#123;</span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        Node&lt;K,V&gt; node = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> ((val = mappingFunction.apply(key)) != <span class="keyword">null</span>)</span><br><span class="line">                                node = <span class="keyword">new</span> Node&lt;K,V&gt;(h, key, val, <span class="keyword">null</span>);</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            setTabAt(tab, i, node);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">boolean</span> added = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            binCount = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                                K ek; V ev;</span><br><span class="line">                                <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                                    ((ek = e.key) == key ||</span><br><span class="line">                                     (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                    val = e.val;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                Node&lt;K,V&gt; pred = e;</span><br><span class="line">                                <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> ((val = mappingFunction.apply(key)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                        added = <span class="keyword">true</span>;</span><br><span class="line">                                        pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(h, key, val, <span class="keyword">null</span>);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            binCount = <span class="number">2</span>;</span><br><span class="line">                            TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                            TreeNode&lt;K,V&gt; r, p;</span><br><span class="line">                            <span class="keyword">if</span> ((r = t.root) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                (p = r.findTreeNode(h, key, <span class="keyword">null</span>)) != <span class="keyword">null</span>)</span><br><span class="line">                                val = p.val;</span><br><span class="line">                            <span class="keyword">else</span> <span class="keyword">if</span> ((val = mappingFunction.apply(key)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                added = <span class="keyword">true</span>;</span><br><span class="line">                                t.putTreeVal(h, key, val);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                        treeifyBin(tab, i);</span><br><span class="line">                    <span class="keyword">if</span> (!added)</span><br><span class="line">                        <span class="keyword">return</span> val;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (val != <span class="keyword">null</span>)</span><br><span class="line">            addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If the value for the specified key is present, attempts to</span></span><br><span class="line"><span class="comment">     * compute a new mapping given the key and its current mapped</span></span><br><span class="line"><span class="comment">     * value.  The entire method invocation is performed atomically.</span></span><br><span class="line"><span class="comment">     * Some attempted update operations on this map by other threads</span></span><br><span class="line"><span class="comment">     * may be blocked while computation is in progress, so the</span></span><br><span class="line"><span class="comment">     * computation should be short and simple, and must not attempt to</span></span><br><span class="line"><span class="comment">     * update any other mappings of this map.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key with which a value may be associated</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> remappingFunction the function to compute a value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the new value associated with the specified key, or null if none</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key or remappingFunction</span></span><br><span class="line"><span class="comment">     *         is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalStateException if the computation detectably</span></span><br><span class="line"><span class="comment">     *         attempts a recursive update to this map that would</span></span><br><span class="line"><span class="comment">     *         otherwise never complete</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RuntimeException or Error if the remappingFunction does so,</span></span><br><span class="line"><span class="comment">     *         in which case the mapping is unchanged</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">computeIfPresent</span><span class="params">(K key, BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends V&gt; remappingFunction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span> || remappingFunction == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">int</span> h = spread(key.hashCode());</span><br><span class="line">        V val = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> delta = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">                tab = initTable();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; h)) == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            binCount = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f, pred = <span class="keyword">null</span>;; ++binCount) &#123;</span><br><span class="line">                                K ek;</span><br><span class="line">                                <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                                    ((ek = e.key) == key ||</span><br><span class="line">                                     (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                    val = remappingFunction.apply(key, e.val);</span><br><span class="line">                                    <span class="keyword">if</span> (val != <span class="keyword">null</span>)</span><br><span class="line">                                        e.val = val;</span><br><span class="line">                                    <span class="keyword">else</span> &#123;</span><br><span class="line">                                        delta = -<span class="number">1</span>;</span><br><span class="line">                                        Node&lt;K,V&gt; en = e.next;</span><br><span class="line">                                        <span class="keyword">if</span> (pred != <span class="keyword">null</span>)</span><br><span class="line">                                            pred.next = en;</span><br><span class="line">                                        <span class="keyword">else</span></span><br><span class="line">                                            setTabAt(tab, i, en);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                pred = e;</span><br><span class="line">                                <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>)</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            binCount = <span class="number">2</span>;</span><br><span class="line">                            TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                            TreeNode&lt;K,V&gt; r, p;</span><br><span class="line">                            <span class="keyword">if</span> ((r = t.root) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                (p = r.findTreeNode(h, key, <span class="keyword">null</span>)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                val = remappingFunction.apply(key, p.val);</span><br><span class="line">                                <span class="keyword">if</span> (val != <span class="keyword">null</span>)</span><br><span class="line">                                    p.val = val;</span><br><span class="line">                                <span class="keyword">else</span> &#123;</span><br><span class="line">                                    delta = -<span class="number">1</span>;</span><br><span class="line">                                    <span class="keyword">if</span> (t.removeTreeNode(p))</span><br><span class="line">                                        setTabAt(tab, i, untreeify(t.first));</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (delta != <span class="number">0</span>)</span><br><span class="line">            addCount((<span class="keyword">long</span>)delta, binCount);</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Attempts to compute a mapping for the specified key and its</span></span><br><span class="line"><span class="comment">     * current mapped value (or &#123;<span class="doctag">@code</span> null&#125; if there is no current</span></span><br><span class="line"><span class="comment">     * mapping). The entire method invocation is performed atomically.</span></span><br><span class="line"><span class="comment">     * Some attempted update operations on this map by other threads</span></span><br><span class="line"><span class="comment">     * may be blocked while computation is in progress, so the</span></span><br><span class="line"><span class="comment">     * computation should be short and simple, and must not attempt to</span></span><br><span class="line"><span class="comment">     * update any other mappings of this Map.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> remappingFunction the function to compute a value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the new value associated with the specified key, or null if none</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key or remappingFunction</span></span><br><span class="line"><span class="comment">     *         is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalStateException if the computation detectably</span></span><br><span class="line"><span class="comment">     *         attempts a recursive update to this map that would</span></span><br><span class="line"><span class="comment">     *         otherwise never complete</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RuntimeException or Error if the remappingFunction does so,</span></span><br><span class="line"><span class="comment">     *         in which case the mapping is unchanged</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">compute</span><span class="params">(K key,</span></span></span><br><span class="line"><span class="function"><span class="params">                     BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends V&gt; remappingFunction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span> || remappingFunction == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">int</span> h = spread(key.hashCode());</span><br><span class="line">        V val = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> delta = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">                tab = initTable();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; h)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Node&lt;K,V&gt; r = <span class="keyword">new</span> ReservationNode&lt;K,V&gt;();</span><br><span class="line">                <span class="keyword">synchronized</span> (r) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>, r)) &#123;</span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        Node&lt;K,V&gt; node = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> ((val = remappingFunction.apply(key, <span class="keyword">null</span>)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                delta = <span class="number">1</span>;</span><br><span class="line">                                node = <span class="keyword">new</span> Node&lt;K,V&gt;(h, key, val, <span class="keyword">null</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            setTabAt(tab, i, node);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            binCount = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f, pred = <span class="keyword">null</span>;; ++binCount) &#123;</span><br><span class="line">                                K ek;</span><br><span class="line">                                <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                                    ((ek = e.key) == key ||</span><br><span class="line">                                     (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                    val = remappingFunction.apply(key, e.val);</span><br><span class="line">                                    <span class="keyword">if</span> (val != <span class="keyword">null</span>)</span><br><span class="line">                                        e.val = val;</span><br><span class="line">                                    <span class="keyword">else</span> &#123;</span><br><span class="line">                                        delta = -<span class="number">1</span>;</span><br><span class="line">                                        Node&lt;K,V&gt; en = e.next;</span><br><span class="line">                                        <span class="keyword">if</span> (pred != <span class="keyword">null</span>)</span><br><span class="line">                                            pred.next = en;</span><br><span class="line">                                        <span class="keyword">else</span></span><br><span class="line">                                            setTabAt(tab, i, en);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                pred = e;</span><br><span class="line">                                <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    val = remappingFunction.apply(key, <span class="keyword">null</span>);</span><br><span class="line">                                    <span class="keyword">if</span> (val != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                        delta = <span class="number">1</span>;</span><br><span class="line">                                        pred.next =</span><br><span class="line">                                            <span class="keyword">new</span> Node&lt;K,V&gt;(h, key, val, <span class="keyword">null</span>);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            binCount = <span class="number">1</span>;</span><br><span class="line">                            TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                            TreeNode&lt;K,V&gt; r, p;</span><br><span class="line">                            <span class="keyword">if</span> ((r = t.root) != <span class="keyword">null</span>)</span><br><span class="line">                                p = r.findTreeNode(h, key, <span class="keyword">null</span>);</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                p = <span class="keyword">null</span>;</span><br><span class="line">                            V pv = (p == <span class="keyword">null</span>) ? <span class="keyword">null</span> : p.val;</span><br><span class="line">                            val = remappingFunction.apply(key, pv);</span><br><span class="line">                            <span class="keyword">if</span> (val != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (p != <span class="keyword">null</span>)</span><br><span class="line">                                    p.val = val;</span><br><span class="line">                                <span class="keyword">else</span> &#123;</span><br><span class="line">                                    delta = <span class="number">1</span>;</span><br><span class="line">                                    t.putTreeVal(h, key, val);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                delta = -<span class="number">1</span>;</span><br><span class="line">                                <span class="keyword">if</span> (t.removeTreeNode(p))</span><br><span class="line">                                    setTabAt(tab, i, untreeify(t.first));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                        treeifyBin(tab, i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (delta != <span class="number">0</span>)</span><br><span class="line">            addCount((<span class="keyword">long</span>)delta, binCount);</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If the specified key is not already associated with a</span></span><br><span class="line"><span class="comment">     * (non-null) value, associates it with the given value.</span></span><br><span class="line"><span class="comment">     * Otherwise, replaces the value with the results of the given</span></span><br><span class="line"><span class="comment">     * remapping function, or removes if &#123;<span class="doctag">@code</span> null&#125;. The entire</span></span><br><span class="line"><span class="comment">     * method invocation is performed atomically.  Some attempted</span></span><br><span class="line"><span class="comment">     * update operations on this map by other threads may be blocked</span></span><br><span class="line"><span class="comment">     * while computation is in progress, so the computation should be</span></span><br><span class="line"><span class="comment">     * short and simple, and must not attempt to update any other</span></span><br><span class="line"><span class="comment">     * mappings of this Map.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value the value to use if absent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> remappingFunction the function to recompute a value if present</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the new value associated with the specified key, or null if none</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified key or the</span></span><br><span class="line"><span class="comment">     *         remappingFunction is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RuntimeException or Error if the remappingFunction does so,</span></span><br><span class="line"><span class="comment">     *         in which case the mapping is unchanged</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">merge</span><span class="params">(K key, V value, BiFunction&lt;? <span class="keyword">super</span> V, ? <span class="keyword">super</span> V, ? extends V&gt; remappingFunction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span> || remappingFunction == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">int</span> h = spread(key.hashCode());</span><br><span class="line">        V val = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> delta = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">                tab = initTable();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; h)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>, <span class="keyword">new</span> Node&lt;K,V&gt;(h, key, value, <span class="keyword">null</span>))) &#123;</span><br><span class="line">                    delta = <span class="number">1</span>;</span><br><span class="line">                    val = value;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            binCount = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f, pred = <span class="keyword">null</span>;; ++binCount) &#123;</span><br><span class="line">                                K ek;</span><br><span class="line">                                <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                                    ((ek = e.key) == key ||</span><br><span class="line">                                     (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                    val = remappingFunction.apply(e.val, value);</span><br><span class="line">                                    <span class="keyword">if</span> (val != <span class="keyword">null</span>)</span><br><span class="line">                                        e.val = val;</span><br><span class="line">                                    <span class="keyword">else</span> &#123;</span><br><span class="line">                                        delta = -<span class="number">1</span>;</span><br><span class="line">                                        Node&lt;K,V&gt; en = e.next;</span><br><span class="line">                                        <span class="keyword">if</span> (pred != <span class="keyword">null</span>)</span><br><span class="line">                                            pred.next = en;</span><br><span class="line">                                        <span class="keyword">else</span></span><br><span class="line">                                            setTabAt(tab, i, en);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                pred = e;</span><br><span class="line">                                <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    delta = <span class="number">1</span>;</span><br><span class="line">                                    val = value;</span><br><span class="line">                                    pred.next =</span><br><span class="line">                                        <span class="keyword">new</span> Node&lt;K,V&gt;(h, key, val, <span class="keyword">null</span>);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            binCount = <span class="number">2</span>;</span><br><span class="line">                            TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                            TreeNode&lt;K,V&gt; r = t.root;</span><br><span class="line">                            TreeNode&lt;K,V&gt; p = (r == <span class="keyword">null</span>) ? <span class="keyword">null</span> :</span><br><span class="line">                                r.findTreeNode(h, key, <span class="keyword">null</span>);</span><br><span class="line">                            val = (p == <span class="keyword">null</span>) ? value :</span><br><span class="line">                                remappingFunction.apply(p.val, value);</span><br><span class="line">                            <span class="keyword">if</span> (val != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (p != <span class="keyword">null</span>)</span><br><span class="line">                                    p.val = val;</span><br><span class="line">                                <span class="keyword">else</span> &#123;</span><br><span class="line">                                    delta = <span class="number">1</span>;</span><br><span class="line">                                    t.putTreeVal(h, key, val);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                delta = -<span class="number">1</span>;</span><br><span class="line">                                <span class="keyword">if</span> (t.removeTreeNode(p))</span><br><span class="line">                                    setTabAt(tab, i, untreeify(t.first));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                        treeifyBin(tab, i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (delta != <span class="number">0</span>)</span><br><span class="line">            addCount((<span class="keyword">long</span>)delta, binCount);</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hashtable legacy methods</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Legacy method testing if some key maps into the specified value</span></span><br><span class="line"><span class="comment">     * in this table.  This method is identical in functionality to</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #containsValue(Object)&#125;, and exists solely to ensure</span></span><br><span class="line"><span class="comment">     * full compatibility with class &#123;<span class="doctag">@link</span> java.util.Hashtable&#125;,</span></span><br><span class="line"><span class="comment">     * which supported this method prior to introduction of the</span></span><br><span class="line"><span class="comment">     * Java Collections framework.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  value a value to search for</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if and only if some key maps to the</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> value&#125; argument in this table as</span></span><br><span class="line"><span class="comment">     *         determined by the &#123;<span class="doctag">@code</span> equals&#125; method;</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified value is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> containsValue(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an enumeration of the keys in this table.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an enumeration of the keys in this table</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #keySet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;K&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="keyword">int</span> f = (t = table) == <span class="keyword">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyIterator&lt;K,V&gt;(t, f, <span class="number">0</span>, f, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an enumeration of the values in this table.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an enumeration of the values in this table</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #values()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;V&gt; <span class="title">elements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="keyword">int</span> f = (t = table) == <span class="keyword">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ValueIterator&lt;K,V&gt;(t, f, <span class="number">0</span>, f, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ConcurrentHashMap-only methods</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the number of mappings. This method should be used</span></span><br><span class="line"><span class="comment">     * instead of &#123;<span class="doctag">@link</span> #size&#125; because a ConcurrentHashMap may</span></span><br><span class="line"><span class="comment">     * contain more mappings than can be represented as an int. The</span></span><br><span class="line"><span class="comment">     * value returned is an estimate; the actual count may differ if</span></span><br><span class="line"><span class="comment">     * there are concurrent insertions or removals.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the number of mappings</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">mappingCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> n = sumCount();</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0L</span>) ? <span class="number">0L</span> : n; <span class="comment">// ignore transient negative values</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new &#123;<span class="doctag">@link</span> Set&#125; backed by a ConcurrentHashMap</span></span><br><span class="line"><span class="comment">     * from the given type to &#123;<span class="doctag">@code</span> Boolean.TRUE&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt; the element type of the returned set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the new set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K&gt; <span class="function">KeySetView&lt;K,Boolean&gt; <span class="title">newKeySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeySetView&lt;K,Boolean&gt;</span><br><span class="line">            (<span class="keyword">new</span> ConcurrentHashMap&lt;K,Boolean&gt;(), Boolean.TRUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new &#123;<span class="doctag">@link</span> Set&#125; backed by a ConcurrentHashMap</span></span><br><span class="line"><span class="comment">     * from the given type to &#123;<span class="doctag">@code</span> Boolean.TRUE&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initialCapacity The implementation performs internal</span></span><br><span class="line"><span class="comment">     * sizing to accommodate this many elements.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt; the element type of the returned set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the new set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity of</span></span><br><span class="line"><span class="comment">     * elements is negative</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K&gt; <span class="function">KeySetView&lt;K,Boolean&gt; <span class="title">newKeySet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeySetView&lt;K,Boolean&gt;</span><br><span class="line">            (<span class="keyword">new</span> ConcurrentHashMap&lt;K,Boolean&gt;(initialCapacity), Boolean.TRUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a &#123;<span class="doctag">@link</span> Set&#125; view of the keys in this map, using the</span></span><br><span class="line"><span class="comment">     * given common mapped value for any additions (i.e., &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     * Collection#add&#125; and &#123;<span class="doctag">@link</span> Collection#addAll(Collection)&#125;).</span></span><br><span class="line"><span class="comment">     * This is of course only appropriate if it is acceptable to use</span></span><br><span class="line"><span class="comment">     * the same value for all additions from this view.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mappedValue the mapped value to use for any additions</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the set view</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the mappedValue is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeySetView&lt;K,V&gt; <span class="title">keySet</span><span class="params">(V mappedValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mappedValue == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeySetView&lt;K,V&gt;(<span class="keyword">this</span>, mappedValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Special Nodes -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A node inserted at head of bins during transfer operations.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardingNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line">        ForwardingNode(Node&lt;K,V&gt;[] tab) &#123;</span><br><span class="line">            <span class="keyword">super</span>(MOVED, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">this</span>.nextTable = tab;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// loop to avoid arbitrarily deep recursion on forwarding nodes</span></span><br><span class="line">            outer: <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = nextTable;;) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e; <span class="keyword">int</span> n;</span><br><span class="line">                <span class="keyword">if</span> (k == <span class="keyword">null</span> || tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span> ||</span><br><span class="line">                    (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    <span class="keyword">int</span> eh; K ek;</span><br><span class="line">                    <span class="keyword">if</span> ((eh = e.hash) == h &amp;&amp;</span><br><span class="line">                        ((ek = e.key) == k || (ek != <span class="keyword">null</span> &amp;&amp; k.equals(ek))))</span><br><span class="line">                        <span class="keyword">return</span> e;</span><br><span class="line">                    <span class="keyword">if</span> (eh &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ForwardingNode) &#123;</span><br><span class="line">                            tab = ((ForwardingNode&lt;K,V&gt;)e).nextTable;</span><br><span class="line">                            <span class="keyword">continue</span> outer;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            <span class="keyword">return</span> e.find(h, k);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A place-holder node used in computeIfAbsent and compute</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ReservationNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        ReservationNode() &#123;</span><br><span class="line">            <span class="keyword">super</span>(RESERVED, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Table Initialization and Resizing -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the stamp bits for resizing a table of size n.</span></span><br><span class="line"><span class="comment">     * Must be negative when shifted left by RESIZE_STAMP_SHIFT.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">resizeStamp</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.numberOfLeadingZeros(n) | (<span class="number">1</span> &lt;&lt; (RESIZE_STAMP_BITS - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initializes table, using the size recorded in sizeCtl.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; <span class="keyword">int</span> sc;</span><br><span class="line">        <span class="keyword">while</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)</span><br><span class="line">                Thread.yield(); <span class="comment">// lost initialization race; just spin</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">int</span> n = (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class="line">                        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                        Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</span><br><span class="line">                        table = tab = nt;</span><br><span class="line">                        sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    sizeCtl = sc;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tab;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Adds to count, and if table is too small and not already</span></span><br><span class="line"><span class="comment">     * resizing, initiates transfer. If already resizing, helps</span></span><br><span class="line"><span class="comment">     * perform transfer if work is available.  Rechecks occupancy</span></span><br><span class="line"><span class="comment">     * after a transfer to see if another resize is already needed</span></span><br><span class="line"><span class="comment">     * because resizings are lagging additions.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x the count to add</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> check if &lt;0, don&#x27;t check resize, if &lt;= 1 only check if uncontended</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addCount</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">int</span> check)</span> </span>&#123;</span><br><span class="line">        CounterCell[] as; <span class="keyword">long</span> b, s;</span><br><span class="line">        <span class="keyword">if</span> ((as = counterCells) != <span class="keyword">null</span> ||</span><br><span class="line">            !U.compareAndSwapLong(<span class="keyword">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</span><br><span class="line">            CounterCell a; <span class="keyword">long</span> v; <span class="keyword">int</span> m;</span><br><span class="line">            <span class="keyword">boolean</span> uncontended = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (as == <span class="keyword">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> ||</span><br><span class="line">                (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class="keyword">null</span> ||</span><br><span class="line">                !(uncontended =</span><br><span class="line">                  U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</span><br><span class="line">                fullAddCount(x, uncontended);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (check &lt;= <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            s = sumCount();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (check &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            Node&lt;K,V&gt;[] tab, nt; <span class="keyword">int</span> n, sc;</span><br><span class="line">            <span class="keyword">while</span> (s &gt;= (<span class="keyword">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                   (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                <span class="keyword">int</span> rs = resizeStamp(n);</span><br><span class="line">                <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                        sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="keyword">null</span> ||</span><br><span class="line">                        transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</span><br><span class="line">                        transfer(tab, nt);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc,</span><br><span class="line">                                             (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</span><br><span class="line">                    transfer(tab, <span class="keyword">null</span>);</span><br><span class="line">                s = sumCount();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Helps transfer if a resize is in progress.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] nextTab; <span class="keyword">int</span> sc;</span><br><span class="line">        <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; (f <span class="keyword">instanceof</span> ForwardingNode) &amp;&amp;</span><br><span class="line">            (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> rs = resizeStamp(tab.length);</span><br><span class="line">            <span class="keyword">while</span> (nextTab == nextTable &amp;&amp; table == tab &amp;&amp;</span><br><span class="line">                   (sc = sizeCtl) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                    sc == rs + MAX_RESIZERS || transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>)) &#123;</span><br><span class="line">                    transfer(tab, nextTab);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> nextTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> table;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Tries to presize table to accommodate the given number of elements.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size number of elements (doesn&#x27;t need to be perfectly accurate)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">tryPresize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = (size &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ? MAXIMUM_CAPACITY :</span><br><span class="line">            tableSizeFor(size + (size &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> sc;</span><br><span class="line">        <span class="keyword">while</span> ((sc = sizeCtl) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            Node&lt;K,V&gt;[] tab = table; <span class="keyword">int</span> n;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;</span><br><span class="line">                n = (sc &gt; c) ? sc : c;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (table == tab) &#123;</span><br><span class="line">                            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</span><br><span class="line">                            table = nt;</span><br><span class="line">                            sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        sizeCtl = sc;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c &lt;= sc || n &gt;= MAXIMUM_CAPACITY)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (tab == table) &#123;</span><br><span class="line">                <span class="keyword">int</span> rs = resizeStamp(n);</span><br><span class="line">                <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    Node&lt;K,V&gt;[] nt;</span><br><span class="line">                    <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                        sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="keyword">null</span> ||</span><br><span class="line">                        transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</span><br><span class="line">                        transfer(tab, nt);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc,</span><br><span class="line">                                             (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</span><br><span class="line">                    transfer(tab, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Moves and/or copies the nodes in each bin to new table. See</span></span><br><span class="line"><span class="comment">     * above for explanation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = tab.length, stride;</span><br><span class="line">        <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class="line">            stride = MIN_TRANSFER_STRIDE; <span class="comment">// subdivide range</span></span><br><span class="line">        <span class="keyword">if</span> (nextTab == <span class="keyword">null</span>) &#123;            <span class="comment">// initiating</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">                nextTab = nt;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;      <span class="comment">// try to cope with OOME</span></span><br><span class="line">                sizeCtl = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nextTable = nextTab;</span><br><span class="line">            transferIndex = n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> nextn = nextTab.length;</span><br><span class="line">        ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> ForwardingNode&lt;K,V&gt;(nextTab);</span><br><span class="line">        <span class="keyword">boolean</span> advance = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> finishing = <span class="keyword">false</span>; <span class="comment">// to ensure sweep before committing nextTab</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="keyword">int</span> fh;</span><br><span class="line">            <span class="keyword">while</span> (advance) &#123;</span><br><span class="line">                <span class="keyword">int</span> nextIndex, nextBound;</span><br><span class="line">                <span class="keyword">if</span> (--i &gt;= bound || finishing)</span><br><span class="line">                    advance = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    i = -<span class="number">1</span>;</span><br><span class="line">                    advance = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt</span><br><span class="line">                         (<span class="keyword">this</span>, TRANSFERINDEX, nextIndex,</span><br><span class="line">                          nextBound = (nextIndex &gt; stride ?</span><br><span class="line">                                       nextIndex - stride : <span class="number">0</span>))) &#123;</span><br><span class="line">                    bound = nextBound;</span><br><span class="line">                    i = nextIndex - <span class="number">1</span>;</span><br><span class="line">                    advance = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class="line">                <span class="keyword">int</span> sc;</span><br><span class="line">                <span class="keyword">if</span> (finishing) &#123;</span><br><span class="line">                    nextTable = <span class="keyword">null</span>;</span><br><span class="line">                    table = nextTab;</span><br><span class="line">                    sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    finishing = advance = <span class="keyword">true</span>;</span><br><span class="line">                    i = n; <span class="comment">// recheck before commit</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="keyword">null</span>)</span><br><span class="line">                advance = casTabAt(tab, i, <span class="keyword">null</span>, fwd);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                advance = <span class="keyword">true</span>; <span class="comment">// already processed</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        Node&lt;K,V&gt; ln, hn;</span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">int</span> runBit = fh &amp; n;</span><br><span class="line">                            Node&lt;K,V&gt; lastRun = f;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="keyword">null</span>; p = p.next) &#123;</span><br><span class="line">                                <span class="keyword">int</span> b = p.hash &amp; n;</span><br><span class="line">                                <span class="keyword">if</span> (b != runBit) &#123;</span><br><span class="line">                                    runBit = b;</span><br><span class="line">                                    lastRun = p;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123;</span><br><span class="line">                                ln = lastRun;</span><br><span class="line">                                hn = <span class="keyword">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                hn = lastRun;</span><br><span class="line">                                ln = <span class="keyword">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class="line">                                <span class="keyword">int</span> ph = p.hash; K pk = p.key; V pv = p.val;</span><br><span class="line">                                <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</span><br><span class="line">                                    ln = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hn = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class="line">                            &#125;</span><br><span class="line">                            setTabAt(nextTab, i, ln);</span><br><span class="line">                            setTabAt(nextTab, i + n, hn);</span><br><span class="line">                            setTabAt(tab, i, fwd);</span><br><span class="line">                            advance = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                            TreeNode&lt;K,V&gt; lo = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                            TreeNode&lt;K,V&gt; hi = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                            <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                                <span class="keyword">int</span> h = e.hash;</span><br><span class="line">                                TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> TreeNode&lt;K,V&gt;</span><br><span class="line">                                    (h, e.key, e.val, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                                <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> ((p.prev = loTail) == <span class="keyword">null</span>)</span><br><span class="line">                                        lo = p;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        loTail.next = p;</span><br><span class="line">                                    loTail = p;</span><br><span class="line">                                    ++lc;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="keyword">if</span> ((p.prev = hiTail) == <span class="keyword">null</span>)</span><br><span class="line">                                        hi = p;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        hiTail.next = p;</span><br><span class="line">                                    hiTail = p;</span><br><span class="line">                                    ++hc;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class="line">                                (hc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(lo) : t;</span><br><span class="line">                            hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class="line">                                (lc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hi) : t;</span><br><span class="line">                            setTabAt(nextTab, i, ln);</span><br><span class="line">                            setTabAt(nextTab, i + n, hn);</span><br><span class="line">                            setTabAt(tab, i, fwd);</span><br><span class="line">                            advance = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Counter support -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A padded cell for distributing counts.  Adapted from LongAdder</span></span><br><span class="line"><span class="comment">     * and Striped64.  See their internal docs for explanation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@sun</span>.misc.Contended <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterCell</span> </span>&#123;</span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">long</span> value;</span><br><span class="line">        CounterCell(<span class="keyword">long</span> x) &#123; value = x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">sumCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CounterCell[] as = counterCells; CounterCell a;</span><br><span class="line">        <span class="keyword">long</span> sum = baseCount;</span><br><span class="line">        <span class="keyword">if</span> (as != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[i]) != <span class="keyword">null</span>)</span><br><span class="line">                    sum += a.value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// See LongAdder version for explanation</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">fullAddCount</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">boolean</span> wasUncontended)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">        <span class="keyword">if</span> ((h = ThreadLocalRandom.getProbe()) == <span class="number">0</span>) &#123;</span><br><span class="line">            ThreadLocalRandom.localInit();      <span class="comment">// force initialization</span></span><br><span class="line">            h = ThreadLocalRandom.getProbe();</span><br><span class="line">            wasUncontended = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> collide = <span class="keyword">false</span>;                <span class="comment">// True if last slot nonempty</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            CounterCell[] as; CounterCell a; <span class="keyword">int</span> n; <span class="keyword">long</span> v;</span><br><span class="line">            <span class="keyword">if</span> ((as = counterCells) != <span class="keyword">null</span> &amp;&amp; (n = as.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[(n - <span class="number">1</span>) &amp; h]) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cellsBusy == <span class="number">0</span>) &#123;            <span class="comment">// Try to attach new Cell</span></span><br><span class="line">                        CounterCell r = <span class="keyword">new</span> CounterCell(x); <span class="comment">// Optimistic create</span></span><br><span class="line">                        <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                            U.compareAndSwapInt(<span class="keyword">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                            <span class="keyword">boolean</span> created = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">try</span> &#123;               <span class="comment">// Recheck under lock</span></span><br><span class="line">                                CounterCell[] rs; <span class="keyword">int</span> m, j;</span><br><span class="line">                                <span class="keyword">if</span> ((rs = counterCells) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                    (m = rs.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                                    rs[j = (m - <span class="number">1</span>) &amp; h] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    rs[j] = r;</span><br><span class="line">                                    created = <span class="keyword">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                cellsBusy = <span class="number">0</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (created)</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">continue</span>;           <span class="comment">// Slot is now non-empty</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    collide = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!wasUncontended)       <span class="comment">// CAS already known to fail</span></span><br><span class="line">                    wasUncontended = <span class="keyword">true</span>;      <span class="comment">// Continue after rehash</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (counterCells != as || n &gt;= NCPU)</span><br><span class="line">                    collide = <span class="keyword">false</span>;            <span class="comment">// At max size or stale</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!collide)</span><br><span class="line">                    collide = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         U.compareAndSwapInt(<span class="keyword">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (counterCells == as) &#123;<span class="comment">// Expand table unless stale</span></span><br><span class="line">                            CounterCell[] rs = <span class="keyword">new</span> CounterCell[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">                                rs[i] = as[i];</span><br><span class="line">                            counterCells = rs;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        cellsBusy = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    collide = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;                   <span class="comment">// Retry with expanded table</span></span><br><span class="line">                &#125;</span><br><span class="line">                h = ThreadLocalRandom.advanceProbe(h);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; counterCells == as &amp;&amp;</span><br><span class="line">                     U.compareAndSwapInt(<span class="keyword">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> init = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;                           <span class="comment">// Initialize table</span></span><br><span class="line">                    <span class="keyword">if</span> (counterCells == as) &#123;</span><br><span class="line">                        CounterCell[] rs = <span class="keyword">new</span> CounterCell[<span class="number">2</span>];</span><br><span class="line">                        rs[h &amp; <span class="number">1</span>] = <span class="keyword">new</span> CounterCell(x);</span><br><span class="line">                        counterCells = rs;</span><br><span class="line">                        init = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    cellsBusy = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (init)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapLong(<span class="keyword">this</span>, BASECOUNT, v = baseCount, v + x))</span><br><span class="line">                <span class="keyword">break</span>;                          <span class="comment">// Fall back on using base</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Conversion from/to TreeBins -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Replaces all linked nodes in bin at given index unless table is</span></span><br><span class="line"><span class="comment">     * too small, in which case resizes instead.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; b; <span class="keyword">int</span> n, sc;</span><br><span class="line">        <span class="keyword">if</span> (tab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">                tryPresize(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((b = tabAt(tab, index)) != <span class="keyword">null</span> &amp;&amp; b.hash &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (b) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, index) == b) &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = b; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                            TreeNode&lt;K,V&gt; p =</span><br><span class="line">                                <span class="keyword">new</span> TreeNode&lt;K,V&gt;(e.hash, e.key, e.val,</span><br><span class="line">                                                  <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                            <span class="keyword">if</span> ((p.prev = tl) == <span class="keyword">null</span>)</span><br><span class="line">                                hd = p;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                tl.next = p;</span><br><span class="line">                            tl = p;</span><br><span class="line">                        &#125;</span><br><span class="line">                        setTabAt(tab, index, <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hd));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a list on non-TreeNodes replacing those in given list.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &lt;K,V&gt; <span class="function">Node&lt;K,V&gt; <span class="title">untreeify</span><span class="params">(Node&lt;K,V&gt; b)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt; q = b; q != <span class="keyword">null</span>; q = q.next) &#123;</span><br><span class="line">            Node&lt;K,V&gt; p = <span class="keyword">new</span> Node&lt;K,V&gt;(q.hash, q.key, q.val, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                tl.next = p;</span><br><span class="line">            tl = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- TreeNodes -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Nodes for use in TreeBins</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">        TreeNode&lt;K,V&gt; left;</span><br><span class="line">        TreeNode&lt;K,V&gt; right;</span><br><span class="line">        TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">        <span class="keyword">boolean</span> red;</span><br><span class="line"></span><br><span class="line">        TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next,</span><br><span class="line">                 TreeNode&lt;K,V&gt; parent) &#123;</span><br><span class="line">            <span class="keyword">super</span>(hash, key, val, next);</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> findTreeNode(h, k, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns the TreeNode (or null if not found) for the given key</span></span><br><span class="line"><span class="comment">         * starting at given root.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">findTreeNode</span><span class="params">(<span class="keyword">int</span> h, Object k, Class&lt;?&gt; kc)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (k != <span class="keyword">null</span>) &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; p = <span class="keyword">this</span>;</span><br><span class="line">                <span class="keyword">do</span>  &#123;</span><br><span class="line">                    <span class="keyword">int</span> ph, dir; K pk; TreeNode&lt;K,V&gt; q;</span><br><span class="line">                    TreeNode&lt;K,V&gt; pl = p.left, pr = p.right;</span><br><span class="line">                    <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                        p = pl;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                        p = pr;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (pk != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">                        <span class="keyword">return</span> p;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="keyword">null</span>)</span><br><span class="line">                        p = pr;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="keyword">null</span>)</span><br><span class="line">                        p = pl;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="keyword">null</span> ||</span><br><span class="line">                              (kc = comparableClassFor(k)) != <span class="keyword">null</span>) &amp;&amp;</span><br><span class="line">                             (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</span><br><span class="line">                        p = (dir &lt; <span class="number">0</span>) ? pl : pr;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.findTreeNode(h, k, kc)) != <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> q;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        p = pl;</span><br><span class="line">                &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- TreeBins -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TreeNodes used at the heads of bins. TreeBins do not hold user</span></span><br><span class="line"><span class="comment">     * keys or values, but instead point to list of TreeNodes and</span></span><br><span class="line"><span class="comment">     * their root. They also maintain a parasitic read-write lock</span></span><br><span class="line"><span class="comment">     * forcing writers (who hold bin lock) to wait for readers (who do</span></span><br><span class="line"><span class="comment">     * not) to complete before tree restructuring operations.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeBin</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; root;</span><br><span class="line">        <span class="keyword">volatile</span> TreeNode&lt;K,V&gt; first;</span><br><span class="line">        <span class="keyword">volatile</span> Thread waiter;</span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">int</span> lockState;</span><br><span class="line">        <span class="comment">// values for lockState</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WRITER = <span class="number">1</span>; <span class="comment">// set while holding write lock</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WAITER = <span class="number">2</span>; <span class="comment">// set when waiting for write lock</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> READER = <span class="number">4</span>; <span class="comment">// increment value for setting read lock</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Tie-breaking utility for ordering insertions when equal</span></span><br><span class="line"><span class="comment">         * hashCodes and non-comparable. We don&#x27;t require a total</span></span><br><span class="line"><span class="comment">         * order, just a consistent insertion rule to maintain</span></span><br><span class="line"><span class="comment">         * equivalence across rebalancings. Tie-breaking further than</span></span><br><span class="line"><span class="comment">         * necessary simplifies testing a bit.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tieBreakOrder</span><span class="params">(Object a, Object b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> d;</span><br><span class="line">            <span class="keyword">if</span> (a == <span class="keyword">null</span> || b == <span class="keyword">null</span> ||</span><br><span class="line">                (d = a.getClass().getName().</span><br><span class="line">                 compareTo(b.getClass().getName())) == <span class="number">0</span>)</span><br><span class="line">                d = (System.identityHashCode(a) &lt;= System.identityHashCode(b) ?</span><br><span class="line">                     -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Creates bin with initial set of nodes headed by b.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        TreeBin(TreeNode&lt;K,V&gt; b) &#123;</span><br><span class="line">            <span class="keyword">super</span>(TREEBIN, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">this</span>.first = b;</span><br><span class="line">            TreeNode&lt;K,V&gt; r = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = b, next; x != <span class="keyword">null</span>; x = next) &#123;</span><br><span class="line">                next = (TreeNode&lt;K,V&gt;)x.next;</span><br><span class="line">                x.left = x.right = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    x.parent = <span class="keyword">null</span>;</span><br><span class="line">                    x.red = <span class="keyword">false</span>;</span><br><span class="line">                    r = x;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    K k = x.key;</span><br><span class="line">                    <span class="keyword">int</span> h = x.hash;</span><br><span class="line">                    Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = r;;) &#123;</span><br><span class="line">                        <span class="keyword">int</span> dir, ph;</span><br><span class="line">                        K pk = p.key;</span><br><span class="line">                        <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                            dir = -<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                            dir = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                  (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                                 (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                            dir = tieBreakOrder(k, pk);</span><br><span class="line">                            TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                        <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            x.parent = xp;</span><br><span class="line">                            <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                                xp.left = x;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                xp.right = x;</span><br><span class="line">                            r = balanceInsertion(r, x);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.root = r;</span><br><span class="line">            <span class="function"><span class="keyword">assert</span> <span class="title">checkInvariants</span><span class="params">(root)</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Acquires write lock for tree restructuring.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lockRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!U.compareAndSwapInt(<span class="keyword">this</span>, LOCKSTATE, <span class="number">0</span>, WRITER))</span><br><span class="line">                contendedLock(); <span class="comment">// offload to separate method</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Releases write lock for tree restructuring.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">unlockRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            lockState = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Possibly blocks awaiting root lock.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">contendedLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">boolean</span> waiting = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> s;;) &#123;</span><br><span class="line">                <span class="keyword">if</span> (((s = lockState) &amp; ~WAITER) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, LOCKSTATE, s, WRITER)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (waiting)</span><br><span class="line">                            waiter = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((s &amp; WAITER) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, LOCKSTATE, s, s | WAITER)) &#123;</span><br><span class="line">                        waiting = <span class="keyword">true</span>;</span><br><span class="line">                        waiter = Thread.currentThread();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (waiting)</span><br><span class="line">                    LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns matching node or null if none. Tries to search</span></span><br><span class="line"><span class="comment">         * using tree comparisons from root, but continues linear</span></span><br><span class="line"><span class="comment">         * search when lock not available.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (k != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; e = first; e != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">                    <span class="keyword">int</span> s; K ek;</span><br><span class="line">                    <span class="keyword">if</span> (((s = lockState) &amp; (WAITER|WRITER)) != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                            ((ek = e.key) == k || (ek != <span class="keyword">null</span> &amp;&amp; k.equals(ek))))</span><br><span class="line">                            <span class="keyword">return</span> e;</span><br><span class="line">                        e = e.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, LOCKSTATE, s,</span><br><span class="line">                                                 s + READER)) &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; r, p;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            p = ((r = root) == <span class="keyword">null</span> ? <span class="keyword">null</span> :</span><br><span class="line">                                 r.findTreeNode(h, k, <span class="keyword">null</span>));</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            Thread w;</span><br><span class="line">                            <span class="keyword">if</span> (U.getAndAddInt(<span class="keyword">this</span>, LOCKSTATE, -READER) ==</span><br><span class="line">                                (READER|WAITER) &amp;&amp; (w = waiter) != <span class="keyword">null</span>)</span><br><span class="line">                                LockSupport.unpark(w);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> p;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Finds or adds a node.</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> null if added</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">putTreeVal</span><span class="params">(<span class="keyword">int</span> h, K k, V v)</span> </span>&#123;</span><br><span class="line">            Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">boolean</span> searched = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">                <span class="keyword">int</span> dir, ph; K pk;</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    first = root = <span class="keyword">new</span> TreeNode&lt;K,V&gt;(h, k, v, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                    dir = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    dir = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (pk != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                          (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                         (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!searched) &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; q, ch;</span><br><span class="line">                        searched = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">if</span> (((ch = p.left) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                             (q = ch.findTreeNode(h, k, kc)) != <span class="keyword">null</span>) ||</span><br><span class="line">                            ((ch = p.right) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                             (q = ch.findTreeNode(h, k, kc)) != <span class="keyword">null</span>))</span><br><span class="line">                            <span class="keyword">return</span> q;</span><br><span class="line">                    &#125;</span><br><span class="line">                    dir = tieBreakOrder(k, pk);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    TreeNode&lt;K,V&gt; x, f = first;</span><br><span class="line">                    first = x = <span class="keyword">new</span> TreeNode&lt;K,V&gt;(h, k, v, f, xp);</span><br><span class="line">                    <span class="keyword">if</span> (f != <span class="keyword">null</span>)</span><br><span class="line">                        f.prev = x;</span><br><span class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                        xp.left = x;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        xp.right = x;</span><br><span class="line">                    <span class="keyword">if</span> (!xp.red)</span><br><span class="line">                        x.red = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        lockRoot();</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            root = balanceInsertion(root, x);</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            unlockRoot();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">assert</span> <span class="title">checkInvariants</span><span class="params">(root)</span></span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Removes the given node, that must be present before this</span></span><br><span class="line"><span class="comment">         * call.  This is messier than typical red-black deletion code</span></span><br><span class="line"><span class="comment">         * because we cannot swap the contents of an interior node</span></span><br><span class="line"><span class="comment">         * with a leaf successor that is pinned by &quot;next&quot; pointers</span></span><br><span class="line"><span class="comment">         * that are accessible independently of lock. So instead we</span></span><br><span class="line"><span class="comment">         * swap the tree linkages.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> true if now too small, so should be untreeified</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">removeTreeNode</span><span class="params">(TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; next = (TreeNode&lt;K,V&gt;)p.next;</span><br><span class="line">            TreeNode&lt;K,V&gt; pred = p.prev;  <span class="comment">// unlink traversal pointers</span></span><br><span class="line">            TreeNode&lt;K,V&gt; r, rl;</span><br><span class="line">            <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">                first = next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                pred.next = next;</span><br><span class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span>)</span><br><span class="line">                next.prev = pred;</span><br><span class="line">            <span class="keyword">if</span> (first == <span class="keyword">null</span>) &#123;</span><br><span class="line">                root = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((r = root) == <span class="keyword">null</span> || r.right == <span class="keyword">null</span> || <span class="comment">// too small</span></span><br><span class="line">                (rl = r.left) == <span class="keyword">null</span> || rl.left == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            lockRoot();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; replacement;</span><br><span class="line">                TreeNode&lt;K,V&gt; pl = p.left;</span><br><span class="line">                TreeNode&lt;K,V&gt; pr = p.right;</span><br><span class="line">                <span class="keyword">if</span> (pl != <span class="keyword">null</span> &amp;&amp; pr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    TreeNode&lt;K,V&gt; s = pr, sl;</span><br><span class="line">                    <span class="keyword">while</span> ((sl = s.left) != <span class="keyword">null</span>) <span class="comment">// find successor</span></span><br><span class="line">                        s = sl;</span><br><span class="line">                    <span class="keyword">boolean</span> c = s.red; s.red = p.red; p.red = c; <span class="comment">// swap colors</span></span><br><span class="line">                    TreeNode&lt;K,V&gt; sr = s.right;</span><br><span class="line">                    TreeNode&lt;K,V&gt; pp = p.parent;</span><br><span class="line">                    <span class="keyword">if</span> (s == pr) &#123; <span class="comment">// p was s&#x27;s direct parent</span></span><br><span class="line">                        p.parent = s;</span><br><span class="line">                        s.right = p;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; sp = s.parent;</span><br><span class="line">                        <span class="keyword">if</span> ((p.parent = sp) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (s == sp.left)</span><br><span class="line">                                sp.left = p;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                sp.right = p;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> ((s.right = pr) != <span class="keyword">null</span>)</span><br><span class="line">                            pr.parent = s;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p.left = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> ((p.right = sr) != <span class="keyword">null</span>)</span><br><span class="line">                        sr.parent = p;</span><br><span class="line">                    <span class="keyword">if</span> ((s.left = pl) != <span class="keyword">null</span>)</span><br><span class="line">                        pl.parent = s;</span><br><span class="line">                    <span class="keyword">if</span> ((s.parent = pp) == <span class="keyword">null</span>)</span><br><span class="line">                        r = s;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">                        pp.left = s;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        pp.right = s;</span><br><span class="line">                    <span class="keyword">if</span> (sr != <span class="keyword">null</span>)</span><br><span class="line">                        replacement = sr;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        replacement = p;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pl != <span class="keyword">null</span>)</span><br><span class="line">                    replacement = pl;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pr != <span class="keyword">null</span>)</span><br><span class="line">                    replacement = pr;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    replacement = p;</span><br><span class="line">                <span class="keyword">if</span> (replacement != p) &#123;</span><br><span class="line">                    TreeNode&lt;K,V&gt; pp = replacement.parent = p.parent;</span><br><span class="line">                    <span class="keyword">if</span> (pp == <span class="keyword">null</span>)</span><br><span class="line">                        r = replacement;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">                        pp.left = replacement;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        pp.right = replacement;</span><br><span class="line">                    p.left = p.right = p.parent = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                root = (p.red) ? r : balanceDeletion(r, replacement);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (p == replacement) &#123;  <span class="comment">// detach pointers</span></span><br><span class="line">                    TreeNode&lt;K,V&gt; pp;</span><br><span class="line">                    <span class="keyword">if</span> ((pp = p.parent) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">                            pp.left = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.right)</span><br><span class="line">                            pp.right = <span class="keyword">null</span>;</span><br><span class="line">                        p.parent = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                unlockRoot();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">assert</span> <span class="title">checkInvariants</span><span class="params">(root)</span></span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line">        <span class="comment">// Red-black tree methods, all adapted from CLR</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">rotateLeft</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; r, pp, rl;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (r = p.right) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((rl = p.right = r.left) != <span class="keyword">null</span>)</span><br><span class="line">                    rl.parent = p;</span><br><span class="line">                <span class="keyword">if</span> ((pp = r.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">                    (root = r).red = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pp.left == p)</span><br><span class="line">                    pp.left = r;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pp.right = r;</span><br><span class="line">                r.left = p;</span><br><span class="line">                p.parent = r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">rotateRight</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                               TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; l, pp, lr;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (l = p.left) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((lr = p.left = l.right) != <span class="keyword">null</span>)</span><br><span class="line">                    lr.parent = p;</span><br><span class="line">                <span class="keyword">if</span> ((pp = l.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">                    (root = l).red = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pp.right == p)</span><br><span class="line">                    pp.right = l;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pp.left = l;</span><br><span class="line">                l.right = p;</span><br><span class="line">                p.parent = l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">balanceInsertion</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                    TreeNode&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class="line">            x.red = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((xp = x.parent) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    x.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> x;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!xp.red || (xpp = xp.parent) == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> root;</span><br><span class="line">                <span class="keyword">if</span> (xp == (xppl = xpp.left)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((xppr = xpp.right) != <span class="keyword">null</span> &amp;&amp; xppr.red) &#123;</span><br><span class="line">                        xppr.red = <span class="keyword">false</span>;</span><br><span class="line">                        xp.red = <span class="keyword">false</span>;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        x = xpp;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (x == xp.right) &#123;</span><br><span class="line">                            root = rotateLeft(root, x = xp);</span><br><span class="line">                            xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            xp.red = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                                root = rotateRight(root, xpp);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (xppl != <span class="keyword">null</span> &amp;&amp; xppl.red) &#123;</span><br><span class="line">                        xppl.red = <span class="keyword">false</span>;</span><br><span class="line">                        xp.red = <span class="keyword">false</span>;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        x = xpp;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (x == xp.left) &#123;</span><br><span class="line">                            root = rotateRight(root, x = xp);</span><br><span class="line">                            xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            xp.red = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                                root = rotateLeft(root, xpp);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">balanceDeletion</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                   TreeNode&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpl, xpr;;)  &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == <span class="keyword">null</span> || x == root)</span><br><span class="line">                    <span class="keyword">return</span> root;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((xp = x.parent) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    x.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> x;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (x.red) &#123;</span><br><span class="line">                    x.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> root;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((xpl = xp.left) == x) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((xpr = xp.right) != <span class="keyword">null</span> &amp;&amp; xpr.red) &#123;</span><br><span class="line">                        xpr.red = <span class="keyword">false</span>;</span><br><span class="line">                        xp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateLeft(root, xp);</span><br><span class="line">                        xpr = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.right;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xpr == <span class="keyword">null</span>)</span><br><span class="line">                        x = xp;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; sl = xpr.left, sr = xpr.right;</span><br><span class="line">                        <span class="keyword">if</span> ((sr == <span class="keyword">null</span> || !sr.red) &amp;&amp;</span><br><span class="line">                            (sl == <span class="keyword">null</span> || !sl.red)) &#123;</span><br><span class="line">                            xpr.red = <span class="keyword">true</span>;</span><br><span class="line">                            x = xp;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (sr == <span class="keyword">null</span> || !sr.red) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (sl != <span class="keyword">null</span>)</span><br><span class="line">                                    sl.red = <span class="keyword">false</span>;</span><br><span class="line">                                xpr.red = <span class="keyword">true</span>;</span><br><span class="line">                                root = rotateRight(root, xpr);</span><br><span class="line">                                xpr = (xp = x.parent) == <span class="keyword">null</span> ?</span><br><span class="line">                                    <span class="keyword">null</span> : xp.right;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (xpr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                xpr.red = (xp == <span class="keyword">null</span>) ? <span class="keyword">false</span> : xp.red;</span><br><span class="line">                                <span class="keyword">if</span> ((sr = xpr.right) != <span class="keyword">null</span>)</span><br><span class="line">                                    sr.red = <span class="keyword">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                                root = rotateLeft(root, xp);</span><br><span class="line">                            &#125;</span><br><span class="line">                            x = root;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// symmetric</span></span><br><span class="line">                    <span class="keyword">if</span> (xpl != <span class="keyword">null</span> &amp;&amp; xpl.red) &#123;</span><br><span class="line">                        xpl.red = <span class="keyword">false</span>;</span><br><span class="line">                        xp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateRight(root, xp);</span><br><span class="line">                        xpl = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.left;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xpl == <span class="keyword">null</span>)</span><br><span class="line">                        x = xp;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; sl = xpl.left, sr = xpl.right;</span><br><span class="line">                        <span class="keyword">if</span> ((sl == <span class="keyword">null</span> || !sl.red) &amp;&amp;</span><br><span class="line">                            (sr == <span class="keyword">null</span> || !sr.red)) &#123;</span><br><span class="line">                            xpl.red = <span class="keyword">true</span>;</span><br><span class="line">                            x = xp;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (sl == <span class="keyword">null</span> || !sl.red) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (sr != <span class="keyword">null</span>)</span><br><span class="line">                                    sr.red = <span class="keyword">false</span>;</span><br><span class="line">                                xpl.red = <span class="keyword">true</span>;</span><br><span class="line">                                root = rotateLeft(root, xpl);</span><br><span class="line">                                xpl = (xp = x.parent) == <span class="keyword">null</span> ?</span><br><span class="line">                                    <span class="keyword">null</span> : xp.left;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (xpl != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                xpl.red = (xp == <span class="keyword">null</span>) ? <span class="keyword">false</span> : xp.red;</span><br><span class="line">                                <span class="keyword">if</span> ((sl = xpl.left) != <span class="keyword">null</span>)</span><br><span class="line">                                    sl.red = <span class="keyword">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                                root = rotateRight(root, xp);</span><br><span class="line">                            &#125;</span><br><span class="line">                            x = root;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Recursive invariant check</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> &lt;K,V&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">checkInvariants</span><span class="params">(TreeNode&lt;K,V&gt; t)</span> </span>&#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; tp = t.parent, tl = t.left, tr = t.right,</span><br><span class="line">                tb = t.prev, tn = (TreeNode&lt;K,V&gt;)t.next;</span><br><span class="line">            <span class="keyword">if</span> (tb != <span class="keyword">null</span> &amp;&amp; tb.next != t)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tn != <span class="keyword">null</span> &amp;&amp; tn.prev != t)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tp != <span class="keyword">null</span> &amp;&amp; t != tp.left &amp;&amp; t != tp.right)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tl != <span class="keyword">null</span> &amp;&amp; (tl.parent != t || tl.hash &gt; t.hash))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tr != <span class="keyword">null</span> &amp;&amp; (tr.parent != t || tr.hash &lt; t.hash))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (t.red &amp;&amp; tl != <span class="keyword">null</span> &amp;&amp; tl.red &amp;&amp; tr != <span class="keyword">null</span> &amp;&amp; tr.red)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tl != <span class="keyword">null</span> &amp;&amp; !checkInvariants(tl))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tr != <span class="keyword">null</span> &amp;&amp; !checkInvariants(tr))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe U;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> LOCKSTATE;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                U = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">                Class&lt;?&gt; k = TreeBin.class;</span><br><span class="line">                LOCKSTATE = U.objectFieldOffset</span><br><span class="line">                    (k.getDeclaredField(<span class="string">&quot;lockState&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ----------------Table Traversal -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Records the table, its length, and current traversal index for a</span></span><br><span class="line"><span class="comment">     * traverser that must process a region of a forwarded table before</span></span><br><span class="line"><span class="comment">     * proceeding with current table.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TableStack</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length;</span><br><span class="line">        <span class="keyword">int</span> index;</span><br><span class="line">        Node&lt;K,V&gt;[] tab;</span><br><span class="line">        TableStack&lt;K,V&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Encapsulates traversal for methods such as containsValue; also</span></span><br><span class="line"><span class="comment">     * serves as a base class for other iterators and spliterators.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Method advance visits once each still-valid node that was</span></span><br><span class="line"><span class="comment">     * reachable upon iterator construction. It might miss some that</span></span><br><span class="line"><span class="comment">     * were added to a bin after the bin was visited, which is OK wrt</span></span><br><span class="line"><span class="comment">     * consistency guarantees. Maintaining this property in the face</span></span><br><span class="line"><span class="comment">     * of possible ongoing resizes requires a fair amount of</span></span><br><span class="line"><span class="comment">     * bookkeeping state that is difficult to optimize away amidst</span></span><br><span class="line"><span class="comment">     * volatile accesses.  Even so, traversal maintains reasonable</span></span><br><span class="line"><span class="comment">     * throughput.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Normally, iteration proceeds bin-by-bin traversing lists.</span></span><br><span class="line"><span class="comment">     * However, if the table has been resized, then all future steps</span></span><br><span class="line"><span class="comment">     * must traverse both the bin at the current index as well as at</span></span><br><span class="line"><span class="comment">     * (index + baseSize); and so on for further resizings. To</span></span><br><span class="line"><span class="comment">     * paranoically cope with potential sharing by users of iterators</span></span><br><span class="line"><span class="comment">     * across threads, iteration terminates if a bounds checks fails</span></span><br><span class="line"><span class="comment">     * for a table read.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Traverser</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab;        <span class="comment">// current table; updated if resized</span></span><br><span class="line">        Node&lt;K,V&gt; next;         <span class="comment">// the next entry to use</span></span><br><span class="line">        TableStack&lt;K,V&gt; stack, spare; <span class="comment">// to save/restore on ForwardingNodes</span></span><br><span class="line">        <span class="keyword">int</span> index;              <span class="comment">// index of bin to use next</span></span><br><span class="line">        <span class="keyword">int</span> baseIndex;          <span class="comment">// current index of initial table</span></span><br><span class="line">        <span class="keyword">int</span> baseLimit;          <span class="comment">// index bound for initial table</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> baseSize;     <span class="comment">// initial table size</span></span><br><span class="line"></span><br><span class="line">        Traverser(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> size, <span class="keyword">int</span> index, <span class="keyword">int</span> limit) &#123;</span><br><span class="line">            <span class="keyword">this</span>.tab = tab;</span><br><span class="line">            <span class="keyword">this</span>.baseSize = size;</span><br><span class="line">            <span class="keyword">this</span>.baseIndex = <span class="keyword">this</span>.index = index;</span><br><span class="line">            <span class="keyword">this</span>.baseLimit = limit;</span><br><span class="line">            <span class="keyword">this</span>.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Advances if possible, returning next valid node, or null if none.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">advance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = next) != <span class="keyword">null</span>)</span><br><span class="line">                e = e.next;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                Node&lt;K,V&gt;[] t; <span class="keyword">int</span> i, n;  <span class="comment">// must use locals in checks</span></span><br><span class="line">                <span class="keyword">if</span> (e != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> next = e;</span><br><span class="line">                <span class="keyword">if</span> (baseIndex &gt;= baseLimit || (t = tab) == <span class="keyword">null</span> ||</span><br><span class="line">                    (n = t.length) &lt;= (i = index) || i &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> next = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> ((e = tabAt(t, i)) != <span class="keyword">null</span> &amp;&amp; e.hash &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ForwardingNode) &#123;</span><br><span class="line">                        tab = ((ForwardingNode&lt;K,V&gt;)e).nextTable;</span><br><span class="line">                        e = <span class="keyword">null</span>;</span><br><span class="line">                        pushState(t, i, n);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeBin)</span><br><span class="line">                        e = ((TreeBin&lt;K,V&gt;)e).first;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        e = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (stack != <span class="keyword">null</span>)</span><br><span class="line">                    recoverState(n);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((index = i + baseSize) &gt;= n)</span><br><span class="line">                    index = ++baseIndex; <span class="comment">// visit upper slots if present</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Saves traversal state upon encountering a forwarding node.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pushState</span><span class="params">(Node&lt;K,V&gt;[] t, <span class="keyword">int</span> i, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">            TableStack&lt;K,V&gt; s = spare;  <span class="comment">// reuse if possible</span></span><br><span class="line">            <span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">                spare = s.next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                s = <span class="keyword">new</span> TableStack&lt;K,V&gt;();</span><br><span class="line">            s.tab = t;</span><br><span class="line">            s.length = n;</span><br><span class="line">            s.index = i;</span><br><span class="line">            s.next = stack;</span><br><span class="line">            stack = s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Possibly pops traversal state.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> n length of current table</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recoverState</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">            TableStack&lt;K,V&gt; s; <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((s = stack) != <span class="keyword">null</span> &amp;&amp; (index += (len = s.length)) &gt;= n) &#123;</span><br><span class="line">                n = len;</span><br><span class="line">                index = s.index;</span><br><span class="line">                tab = s.tab;</span><br><span class="line">                s.tab = <span class="keyword">null</span>;</span><br><span class="line">                TableStack&lt;K,V&gt; next = s.next;</span><br><span class="line">                s.next = spare; <span class="comment">// save for reuse</span></span><br><span class="line">                stack = next;</span><br><span class="line">                spare = s;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="keyword">null</span> &amp;&amp; (index += baseSize) &gt;= n)</span><br><span class="line">                index = ++baseIndex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Base of key, value, and entry Iterators. Adds fields to</span></span><br><span class="line"><span class="comment">     * Traverser to support iterator.remove.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseIterator</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Traverser</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ConcurrentHashMap&lt;K,V&gt; map;</span><br><span class="line">        Node&lt;K,V&gt; lastReturned;</span><br><span class="line">        BaseIterator(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> size, <span class="keyword">int</span> index, <span class="keyword">int</span> limit,</span><br><span class="line">                    ConcurrentHashMap&lt;K,V&gt; map) &#123;</span><br><span class="line">            <span class="keyword">super</span>(tab, size, index, limit);</span><br><span class="line">            <span class="keyword">this</span>.map = map;</span><br><span class="line">            advance();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> next != <span class="keyword">null</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> next != <span class="keyword">null</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; p;</span><br><span class="line">            <span class="keyword">if</span> ((p = lastReturned) == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            lastReturned = <span class="keyword">null</span>;</span><br><span class="line">            map.replaceNode(p.key, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">BaseIterator</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">K</span>&gt;, <span class="title">Enumeration</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        KeyIterator(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> index, <span class="keyword">int</span> size, <span class="keyword">int</span> limit,</span><br><span class="line">                    ConcurrentHashMap&lt;K,V&gt; map) &#123;</span><br><span class="line">            <span class="keyword">super</span>(tab, index, size, limit, map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; p;</span><br><span class="line">            <span class="keyword">if</span> ((p = next) == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            K k = p.key;</span><br><span class="line">            lastReturned = p;</span><br><span class="line">            advance();</span><br><span class="line">            <span class="keyword">return</span> k;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">nextElement</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> next(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueIterator</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">BaseIterator</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">V</span>&gt;, <span class="title">Enumeration</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        ValueIterator(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> index, <span class="keyword">int</span> size, <span class="keyword">int</span> limit,</span><br><span class="line">                      ConcurrentHashMap&lt;K,V&gt; map) &#123;</span><br><span class="line">            <span class="keyword">super</span>(tab, index, size, limit, map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; p;</span><br><span class="line">            <span class="keyword">if</span> ((p = next) == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            V v = p.val;</span><br><span class="line">            lastReturned = p;</span><br><span class="line">            advance();</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">nextElement</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> next(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">BaseIterator</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">        EntryIterator(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> index, <span class="keyword">int</span> size, <span class="keyword">int</span> limit,</span><br><span class="line">                      ConcurrentHashMap&lt;K,V&gt; map) &#123;</span><br><span class="line">            <span class="keyword">super</span>(tab, index, size, limit, map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; p;</span><br><span class="line">            <span class="keyword">if</span> ((p = next) == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            K k = p.key;</span><br><span class="line">            V v = p.val;</span><br><span class="line">            lastReturned = p;</span><br><span class="line">            advance();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MapEntry&lt;K,V&gt;(k, v, map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Exported Entry for EntryIterator</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapEntry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> K key; <span class="comment">// non-null</span></span><br><span class="line">        V val;       <span class="comment">// non-null</span></span><br><span class="line">        <span class="keyword">final</span> ConcurrentHashMap&lt;K,V&gt; map;</span><br><span class="line">        MapEntry(K key, V val, ConcurrentHashMap&lt;K,V&gt; map) &#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.map = map;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> val; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span>    </span>&#123; <span class="keyword">return</span> key.hashCode() ^ val.hashCode(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + val; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            Object k, v; Map.Entry&lt;?,?&gt; e;</span><br><span class="line">            <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Map.Entry) &amp;&amp;</span><br><span class="line">                    (k = (e = (Map.Entry&lt;?,?&gt;)o).getKey()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                    (v = e.getValue()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                    (k == key || k.equals(key)) &amp;&amp;</span><br><span class="line">                    (v == val || v.equals(val)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Sets our entry&#x27;s value and writes through to the map. The</span></span><br><span class="line"><span class="comment">         * value to return is somewhat arbitrary here. Since we do not</span></span><br><span class="line"><span class="comment">         * necessarily track asynchronous changes, the most recent</span></span><br><span class="line"><span class="comment">         * &quot;previous&quot; value could be different from what we return (or</span></span><br><span class="line"><span class="comment">         * could even have been removed, in which case the put will</span></span><br><span class="line"><span class="comment">         * re-establish). We do not and cannot guarantee more.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            V v = val;</span><br><span class="line">            val = value;</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySpliterator</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Traverser</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> est;               <span class="comment">// size estimate</span></span><br><span class="line">        KeySpliterator(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> size, <span class="keyword">int</span> index, <span class="keyword">int</span> limit,</span><br><span class="line">                       <span class="keyword">long</span> est) &#123;</span><br><span class="line">            <span class="keyword">super</span>(tab, size, index, limit);</span><br><span class="line">            <span class="keyword">this</span>.est = est;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Spliterator&lt;K&gt; <span class="title">trySplit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i, f, h;</span><br><span class="line">            <span class="keyword">return</span> (h = ((i = baseIndex) + (f = baseLimit)) &gt;&gt;&gt; <span class="number">1</span>) &lt;= i ? <span class="keyword">null</span> :</span><br><span class="line">                <span class="keyword">new</span> KeySpliterator&lt;K,V&gt;(tab, baseSize, baseLimit = h,</span><br><span class="line">                                        f, est &gt;&gt;&gt;= <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> K&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>;)</span><br><span class="line">                action.accept(p.key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> K&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            Node&lt;K,V&gt; p;</span><br><span class="line">            <span class="keyword">if</span> ((p = advance()) == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            action.accept(p.key);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">estimateSize</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> est; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Spliterator.DISTINCT | Spliterator.CONCURRENT |</span><br><span class="line">                Spliterator.NONNULL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueSpliterator</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Traverser</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> est;               <span class="comment">// size estimate</span></span><br><span class="line">        ValueSpliterator(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> size, <span class="keyword">int</span> index, <span class="keyword">int</span> limit,</span><br><span class="line">                         <span class="keyword">long</span> est) &#123;</span><br><span class="line">            <span class="keyword">super</span>(tab, size, index, limit);</span><br><span class="line">            <span class="keyword">this</span>.est = est;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Spliterator&lt;V&gt; <span class="title">trySplit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i, f, h;</span><br><span class="line">            <span class="keyword">return</span> (h = ((i = baseIndex) + (f = baseLimit)) &gt;&gt;&gt; <span class="number">1</span>) &lt;= i ? <span class="keyword">null</span> :</span><br><span class="line">                <span class="keyword">new</span> ValueSpliterator&lt;K,V&gt;(tab, baseSize, baseLimit = h,</span><br><span class="line">                                          f, est &gt;&gt;&gt;= <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> V&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>;)</span><br><span class="line">                action.accept(p.val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> V&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            Node&lt;K,V&gt; p;</span><br><span class="line">            <span class="keyword">if</span> ((p = advance()) == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            action.accept(p.val);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">estimateSize</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> est; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Spliterator.CONCURRENT | Spliterator.NONNULL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySpliterator</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Traverser</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ConcurrentHashMap&lt;K,V&gt; map; <span class="comment">// To export MapEntry</span></span><br><span class="line">        <span class="keyword">long</span> est;               <span class="comment">// size estimate</span></span><br><span class="line">        EntrySpliterator(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> size, <span class="keyword">int</span> index, <span class="keyword">int</span> limit,</span><br><span class="line">                         <span class="keyword">long</span> est, ConcurrentHashMap&lt;K,V&gt; map) &#123;</span><br><span class="line">            <span class="keyword">super</span>(tab, size, index, limit);</span><br><span class="line">            <span class="keyword">this</span>.map = map;</span><br><span class="line">            <span class="keyword">this</span>.est = est;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Spliterator&lt;Map.Entry&lt;K,V&gt;&gt; trySplit() &#123;</span><br><span class="line">            <span class="keyword">int</span> i, f, h;</span><br><span class="line">            <span class="keyword">return</span> (h = ((i = baseIndex) + (f = baseLimit)) &gt;&gt;&gt; <span class="number">1</span>) &lt;= i ? <span class="keyword">null</span> :</span><br><span class="line">                <span class="keyword">new</span> EntrySpliterator&lt;K,V&gt;(tab, baseSize, baseLimit = h,</span><br><span class="line">                                          f, est &gt;&gt;&gt;= <span class="number">1</span>, map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> Map.Entry&lt;K,V&gt;&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; )</span><br><span class="line">                action.accept(<span class="keyword">new</span> MapEntry&lt;K,V&gt;(p.key, p.val, map));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> Map.Entry&lt;K,V&gt;&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            Node&lt;K,V&gt; p;</span><br><span class="line">            <span class="keyword">if</span> ((p = advance()) == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            action.accept(<span class="keyword">new</span> MapEntry&lt;K,V&gt;(p.key, p.val, map));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">estimateSize</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> est; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Spliterator.DISTINCT | Spliterator.CONCURRENT |</span><br><span class="line">                Spliterator.NONNULL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parallel bulk operations</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Computes initial batch value for bulk tasks. The returned value</span></span><br><span class="line"><span class="comment">     * is approximately exp2 of the number of times (minus one) to</span></span><br><span class="line"><span class="comment">     * split task by two before executing leaf action. This value is</span></span><br><span class="line"><span class="comment">     * faster to compute and more convenient to use as a guide to</span></span><br><span class="line"><span class="comment">     * splitting than is the depth, since it is used while dividing by</span></span><br><span class="line"><span class="comment">     * two anyway.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">batchFor</span><span class="params">(<span class="keyword">long</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> n;</span><br><span class="line">        <span class="keyword">if</span> (b == Long.MAX_VALUE || (n = sumCount()) &lt;= <span class="number">1L</span> || n &lt; b)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sp = ForkJoinPool.getCommonPoolParallelism() &lt;&lt; <span class="number">2</span>; <span class="comment">// slack of 4</span></span><br><span class="line">        <span class="keyword">return</span> (b &lt;= <span class="number">0L</span> || (n /= b) &gt;= sp) ? sp : (<span class="keyword">int</span>)n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs the given action for each (key, value).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action the action</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                        BiConsumer&lt;? <span class="keyword">super</span> K,? <span class="keyword">super</span> V&gt; action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">new</span> ForEachMappingTask&lt;K,V&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             action).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs the given action for each non-null transformation</span></span><br><span class="line"><span class="comment">     * of each (key, value).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element, or null if there is no transformation (in</span></span><br><span class="line"><span class="comment">     * which case the action is not applied)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action the action</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the transformer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; <span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                            BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends U&gt; transformer,</span></span></span><br><span class="line"><span class="function"><span class="params">                            Consumer&lt;? <span class="keyword">super</span> U&gt; action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="keyword">null</span> || action == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">new</span> ForEachTransformedMappingTask&lt;K,V,U&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             transformer, action).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a non-null result from applying the given search</span></span><br><span class="line"><span class="comment">     * function on each (key, value), or null if none.  Upon</span></span><br><span class="line"><span class="comment">     * success, further element processing is suppressed and the</span></span><br><span class="line"><span class="comment">     * results of any other parallel invocations of the search</span></span><br><span class="line"><span class="comment">     * function are ignored.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchFunction a function returning a non-null</span></span><br><span class="line"><span class="comment">     * result on success, else null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the search function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a non-null result from applying the given search</span></span><br><span class="line"><span class="comment">     * function on each (key, value), or null if none</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; <span class="function">U <span class="title">search</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                        BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends U&gt; searchFunction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (searchFunction == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SearchMappingsTask&lt;K,V,U&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             searchFunction, <span class="keyword">new</span> AtomicReference&lt;U&gt;()).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all (key, value) pairs using the given reducer to</span></span><br><span class="line"><span class="comment">     * combine values, or null if none.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element, or null if there is no transformation (in</span></span><br><span class="line"><span class="comment">     * which case it is not combined)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the transformer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all (key, value) pairs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; <span class="function">U <span class="title">reduce</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                        BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends U&gt; transformer,</span></span></span><br><span class="line"><span class="function"><span class="params">                        BiFunction&lt;? <span class="keyword">super</span> U, ? <span class="keyword">super</span> U, ? extends U&gt; reducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="keyword">null</span> || reducer == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MapReduceMappingsTask&lt;K,V,U&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="keyword">null</span>, transformer, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all (key, value) pairs using the given reducer to</span></span><br><span class="line"><span class="comment">     * combine values, and the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all (key, value) pairs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">reduceToDouble</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 ToDoubleBiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V&gt; transformer,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">double</span> basis,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 DoubleBinaryOperator reducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="keyword">null</span> || reducer == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MapReduceMappingsToDoubleTask&lt;K,V&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="keyword">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all (key, value) pairs using the given reducer to</span></span><br><span class="line"><span class="comment">     * combine values, and the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all (key, value) pairs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">reduceToLong</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                             ToLongBiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V&gt; transformer,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">long</span> basis,</span></span></span><br><span class="line"><span class="function"><span class="params">                             LongBinaryOperator reducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="keyword">null</span> || reducer == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MapReduceMappingsToLongTask&lt;K,V&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="keyword">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all (key, value) pairs using the given reducer to</span></span><br><span class="line"><span class="comment">     * combine values, and the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all (key, value) pairs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reduceToInt</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                           ToIntBiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V&gt; transformer,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">int</span> basis,</span></span></span><br><span class="line"><span class="function"><span class="params">                           IntBinaryOperator reducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="keyword">null</span> || reducer == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MapReduceMappingsToIntTask&lt;K,V&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="keyword">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs the given action for each key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action the action</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachKey</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                           Consumer&lt;? <span class="keyword">super</span> K&gt; action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">new</span> ForEachKeyTask&lt;K,V&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             action).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs the given action for each non-null transformation</span></span><br><span class="line"><span class="comment">     * of each key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element, or null if there is no transformation (in</span></span><br><span class="line"><span class="comment">     * which case the action is not applied)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action the action</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the transformer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; <span class="function"><span class="keyword">void</span> <span class="title">forEachKey</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                               Function&lt;? <span class="keyword">super</span> K, ? extends U&gt; transformer,</span></span></span><br><span class="line"><span class="function"><span class="params">                               Consumer&lt;? <span class="keyword">super</span> U&gt; action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="keyword">null</span> || action == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">new</span> ForEachTransformedKeyTask&lt;K,V,U&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             transformer, action).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a non-null result from applying the given search</span></span><br><span class="line"><span class="comment">     * function on each key, or null if none. Upon success,</span></span><br><span class="line"><span class="comment">     * further element processing is suppressed and the results of</span></span><br><span class="line"><span class="comment">     * any other parallel invocations of the search function are</span></span><br><span class="line"><span class="comment">     * ignored.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchFunction a function returning a non-null</span></span><br><span class="line"><span class="comment">     * result on success, else null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the search function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a non-null result from applying the given search</span></span><br><span class="line"><span class="comment">     * function on each key, or null if none</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; <span class="function">U <span class="title">searchKeys</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                            Function&lt;? <span class="keyword">super</span> K, ? extends U&gt; searchFunction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (searchFunction == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SearchKeysTask&lt;K,V,U&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             searchFunction, <span class="keyword">new</span> AtomicReference&lt;U&gt;()).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating all keys using the given</span></span><br><span class="line"><span class="comment">     * reducer to combine values, or null if none.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating all keys using the given</span></span><br><span class="line"><span class="comment">     * reducer to combine values, or null if none</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">reduceKeys</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                        BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> K, ? extends K&gt; reducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (reducer == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReduceKeysTask&lt;K,V&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="keyword">null</span>, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all keys using the given reducer to combine values, or</span></span><br><span class="line"><span class="comment">     * null if none.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element, or null if there is no transformation (in</span></span><br><span class="line"><span class="comment">     * which case it is not combined)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the transformer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all keys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; <span class="function">U <span class="title">reduceKeys</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                            Function&lt;? <span class="keyword">super</span> K, ? extends U&gt; transformer,</span></span></span><br><span class="line"><span class="function"><span class="params">         BiFunction&lt;? <span class="keyword">super</span> U, ? <span class="keyword">super</span> U, ? extends U&gt; reducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="keyword">null</span> || reducer == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MapReduceKeysTask&lt;K,V,U&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="keyword">null</span>, transformer, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all keys using the given reducer to combine values, and</span></span><br><span class="line"><span class="comment">     * the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all keys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">reduceKeysToDouble</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     ToDoubleFunction&lt;? <span class="keyword">super</span> K&gt; transformer,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">double</span> basis,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     DoubleBinaryOperator reducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="keyword">null</span> || reducer == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MapReduceKeysToDoubleTask&lt;K,V&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="keyword">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all keys using the given reducer to combine values, and</span></span><br><span class="line"><span class="comment">     * the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all keys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">reduceKeysToLong</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 ToLongFunction&lt;? <span class="keyword">super</span> K&gt; transformer,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">long</span> basis,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 LongBinaryOperator reducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="keyword">null</span> || reducer == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MapReduceKeysToLongTask&lt;K,V&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="keyword">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all keys using the given reducer to combine values, and</span></span><br><span class="line"><span class="comment">     * the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all keys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reduceKeysToInt</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                               ToIntFunction&lt;? <span class="keyword">super</span> K&gt; transformer,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">int</span> basis,</span></span></span><br><span class="line"><span class="function"><span class="params">                               IntBinaryOperator reducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="keyword">null</span> || reducer == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MapReduceKeysToIntTask&lt;K,V&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="keyword">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs the given action for each value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action the action</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachValue</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Consumer&lt;? <span class="keyword">super</span> V&gt; action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">new</span> ForEachValueTask&lt;K,V&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             action).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs the given action for each non-null transformation</span></span><br><span class="line"><span class="comment">     * of each value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element, or null if there is no transformation (in</span></span><br><span class="line"><span class="comment">     * which case the action is not applied)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action the action</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the transformer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; <span class="function"><span class="keyword">void</span> <span class="title">forEachValue</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 Function&lt;? <span class="keyword">super</span> V, ? extends U&gt; transformer,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 Consumer&lt;? <span class="keyword">super</span> U&gt; action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="keyword">null</span> || action == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">new</span> ForEachTransformedValueTask&lt;K,V,U&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             transformer, action).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a non-null result from applying the given search</span></span><br><span class="line"><span class="comment">     * function on each value, or null if none.  Upon success,</span></span><br><span class="line"><span class="comment">     * further element processing is suppressed and the results of</span></span><br><span class="line"><span class="comment">     * any other parallel invocations of the search function are</span></span><br><span class="line"><span class="comment">     * ignored.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchFunction a function returning a non-null</span></span><br><span class="line"><span class="comment">     * result on success, else null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the search function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a non-null result from applying the given search</span></span><br><span class="line"><span class="comment">     * function on each value, or null if none</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; <span class="function">U <span class="title">searchValues</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                              Function&lt;? <span class="keyword">super</span> V, ? extends U&gt; searchFunction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (searchFunction == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SearchValuesTask&lt;K,V,U&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             searchFunction, <span class="keyword">new</span> AtomicReference&lt;U&gt;()).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating all values using the</span></span><br><span class="line"><span class="comment">     * given reducer to combine values, or null if none.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating all values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">reduceValues</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BiFunction&lt;? <span class="keyword">super</span> V, ? <span class="keyword">super</span> V, ? extends V&gt; reducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (reducer == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReduceValuesTask&lt;K,V&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="keyword">null</span>, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all values using the given reducer to combine values, or</span></span><br><span class="line"><span class="comment">     * null if none.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element, or null if there is no transformation (in</span></span><br><span class="line"><span class="comment">     * which case it is not combined)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the transformer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; <span class="function">U <span class="title">reduceValues</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                              Function&lt;? <span class="keyword">super</span> V, ? extends U&gt; transformer,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BiFunction&lt;? <span class="keyword">super</span> U, ? <span class="keyword">super</span> U, ? extends U&gt; reducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="keyword">null</span> || reducer == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MapReduceValuesTask&lt;K,V,U&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="keyword">null</span>, transformer, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all values using the given reducer to combine values,</span></span><br><span class="line"><span class="comment">     * and the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">reduceValuesToDouble</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       ToDoubleFunction&lt;? <span class="keyword">super</span> V&gt; transformer,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="keyword">double</span> basis,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       DoubleBinaryOperator reducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="keyword">null</span> || reducer == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MapReduceValuesToDoubleTask&lt;K,V&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="keyword">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all values using the given reducer to combine values,</span></span><br><span class="line"><span class="comment">     * and the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">reduceValuesToLong</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   ToLongFunction&lt;? <span class="keyword">super</span> V&gt; transformer,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   <span class="keyword">long</span> basis,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   LongBinaryOperator reducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="keyword">null</span> || reducer == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MapReduceValuesToLongTask&lt;K,V&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="keyword">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all values using the given reducer to combine values,</span></span><br><span class="line"><span class="comment">     * and the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reduceValuesToInt</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 ToIntFunction&lt;? <span class="keyword">super</span> V&gt; transformer,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">int</span> basis,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 IntBinaryOperator reducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="keyword">null</span> || reducer == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MapReduceValuesToIntTask&lt;K,V&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="keyword">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs the given action for each entry.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action the action</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachEntry</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Consumer&lt;? <span class="keyword">super</span> Map.Entry&lt;K,V&gt;&gt; action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">new</span> ForEachEntryTask&lt;K,V&gt;(<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">                                  action).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs the given action for each non-null transformation</span></span><br><span class="line"><span class="comment">     * of each entry.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element, or null if there is no transformation (in</span></span><br><span class="line"><span class="comment">     * which case the action is not applied)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action the action</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the transformer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; <span class="function"><span class="keyword">void</span> <span class="title">forEachEntry</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 Function&lt;Map.Entry&lt;K,V&gt;, ? extends U&gt; transformer,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 Consumer&lt;? <span class="keyword">super</span> U&gt; action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="keyword">null</span> || action == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">new</span> ForEachTransformedEntryTask&lt;K,V,U&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             transformer, action).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a non-null result from applying the given search</span></span><br><span class="line"><span class="comment">     * function on each entry, or null if none.  Upon success,</span></span><br><span class="line"><span class="comment">     * further element processing is suppressed and the results of</span></span><br><span class="line"><span class="comment">     * any other parallel invocations of the search function are</span></span><br><span class="line"><span class="comment">     * ignored.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchFunction a function returning a non-null</span></span><br><span class="line"><span class="comment">     * result on success, else null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the search function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a non-null result from applying the given search</span></span><br><span class="line"><span class="comment">     * function on each entry, or null if none</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; <span class="function">U <span class="title">searchEntries</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                               Function&lt;Map.Entry&lt;K,V&gt;, ? extends U&gt; searchFunction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (searchFunction == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SearchEntriesTask&lt;K,V,U&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             searchFunction, <span class="keyword">new</span> AtomicReference&lt;U&gt;()).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating all entries using the</span></span><br><span class="line"><span class="comment">     * given reducer to combine values, or null if none.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating all entries</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">reduceEntries</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        BiFunction&lt;Map.Entry&lt;K,V&gt;, Map.Entry&lt;K,V&gt;, ? extends Map.Entry&lt;K,V&gt;&gt; reducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (reducer == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReduceEntriesTask&lt;K,V&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="keyword">null</span>, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all entries using the given reducer to combine values,</span></span><br><span class="line"><span class="comment">     * or null if none.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element, or null if there is no transformation (in</span></span><br><span class="line"><span class="comment">     * which case it is not combined)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the return type of the transformer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all entries</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; <span class="function">U <span class="title">reduceEntries</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                               Function&lt;Map.Entry&lt;K,V&gt;, ? extends U&gt; transformer,</span></span></span><br><span class="line"><span class="function"><span class="params">                               BiFunction&lt;? <span class="keyword">super</span> U, ? <span class="keyword">super</span> U, ? extends U&gt; reducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="keyword">null</span> || reducer == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MapReduceEntriesTask&lt;K,V,U&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="keyword">null</span>, transformer, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all entries using the given reducer to combine values,</span></span><br><span class="line"><span class="comment">     * and the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all entries</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">reduceEntriesToDouble</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        ToDoubleFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        <span class="keyword">double</span> basis,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        DoubleBinaryOperator reducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="keyword">null</span> || reducer == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MapReduceEntriesToDoubleTask&lt;K,V&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="keyword">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all entries using the given reducer to combine values,</span></span><br><span class="line"><span class="comment">     * and the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all entries</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">reduceEntriesToLong</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    ToLongFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">long</span> basis,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    LongBinaryOperator reducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="keyword">null</span> || reducer == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MapReduceEntriesToLongTask&lt;K,V&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="keyword">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all entries using the given reducer to combine values,</span></span><br><span class="line"><span class="comment">     * and the given basis as an identity value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelismThreshold the (estimated) number of elements</span></span><br><span class="line"><span class="comment">     * needed for this operation to be executed in parallel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transformer a function returning the transformation</span></span><br><span class="line"><span class="comment">     * for an element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basis the identity (initial default value) for the reduction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reducer a commutative associative combining function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of accumulating the given transformation</span></span><br><span class="line"><span class="comment">     * of all entries</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reduceEntriesToInt</span><span class="params">(<span class="keyword">long</span> parallelismThreshold,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  ToIntFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">int</span> basis,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  IntBinaryOperator reducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer == <span class="keyword">null</span> || reducer == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MapReduceEntriesToIntTask&lt;K,V&gt;</span><br><span class="line">            (<span class="keyword">null</span>, batchFor(parallelismThreshold), <span class="number">0</span>, <span class="number">0</span>, table,</span><br><span class="line">             <span class="keyword">null</span>, transformer, basis, reducer).invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ----------------Views -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Base class for views.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionView</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7249069246763182397L</span>;</span><br><span class="line">        <span class="keyword">final</span> ConcurrentHashMap&lt;K,V&gt; map;</span><br><span class="line">        CollectionView(ConcurrentHashMap&lt;K,V&gt; map)  &#123; <span class="keyword">this</span>.map = map; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns the map backing this view.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> the map backing this view</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ConcurrentHashMap&lt;K,V&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> map; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Removes all of the elements from this view, by removing all</span></span><br><span class="line"><span class="comment">         * the mappings from the map backing this view.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span>      </span>&#123; map.clear(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> map.size(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> map.isEmpty(); &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// implementations below rely on concrete classes supplying these</span></span><br><span class="line">        <span class="comment">// abstract methods</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns an iterator over the elements in this collection.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;The returned iterator is</span></span><br><span class="line"><span class="comment">         * &lt;a href=&quot;package-summary.html#Weakly&quot;&gt;&lt;i&gt;weakly consistent&lt;/i&gt;&lt;/a&gt;.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> an iterator over the elements in this collection</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String oomeMsg = <span class="string">&quot;Required array size too large&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Object[] toArray() &#123;</span><br><span class="line">            <span class="keyword">long</span> sz = map.mappingCount();</span><br><span class="line">            <span class="keyword">if</span> (sz &gt; MAX_ARRAY_SIZE)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError(oomeMsg);</span><br><span class="line">            <span class="keyword">int</span> n = (<span class="keyword">int</span>)sz;</span><br><span class="line">            Object[] r = <span class="keyword">new</span> Object[n];</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (E e : <span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == n) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (n &gt;= MAX_ARRAY_SIZE)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError(oomeMsg);</span><br><span class="line">                    <span class="keyword">if</span> (n &gt;= MAX_ARRAY_SIZE - (MAX_ARRAY_SIZE &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>)</span><br><span class="line">                        n = MAX_ARRAY_SIZE;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        n += (n &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">                    r = Arrays.copyOf(r, n);</span><br><span class="line">                &#125;</span><br><span class="line">                r[i++] = e;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (i == n) ? r : Arrays.copyOf(r, i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">            <span class="keyword">long</span> sz = map.mappingCount();</span><br><span class="line">            <span class="keyword">if</span> (sz &gt; MAX_ARRAY_SIZE)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError(oomeMsg);</span><br><span class="line">            <span class="keyword">int</span> m = (<span class="keyword">int</span>)sz;</span><br><span class="line">            T[] r = (a.length &gt;= m) ? a :</span><br><span class="line">                (T[])java.lang.reflect.Array</span><br><span class="line">                .newInstance(a.getClass().getComponentType(), m);</span><br><span class="line">            <span class="keyword">int</span> n = r.length;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (E e : <span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == n) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (n &gt;= MAX_ARRAY_SIZE)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError(oomeMsg);</span><br><span class="line">                    <span class="keyword">if</span> (n &gt;= MAX_ARRAY_SIZE - (MAX_ARRAY_SIZE &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>)</span><br><span class="line">                        n = MAX_ARRAY_SIZE;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        n += (n &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">                    r = Arrays.copyOf(r, n);</span><br><span class="line">                &#125;</span><br><span class="line">                r[i++] = (T)e;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (a == r &amp;&amp; i &lt; n) &#123;</span><br><span class="line">                r[i] = <span class="keyword">null</span>; <span class="comment">// null-terminate</span></span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (i == n) ? r : Arrays.copyOf(r, i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns a string representation of this collection.</span></span><br><span class="line"><span class="comment">         * The string representation consists of the string representations</span></span><br><span class="line"><span class="comment">         * of the collection&#x27;s elements in the order they are returned by</span></span><br><span class="line"><span class="comment">         * its iterator, enclosed in square brackets (&#123;<span class="doctag">@code</span> &quot;[]&quot;&#125;).</span></span><br><span class="line"><span class="comment">         * Adjacent elements are separated by the characters &#123;<span class="doctag">@code</span> &quot;, &quot;&#125;</span></span><br><span class="line"><span class="comment">         * (comma and space).  Elements are converted to strings as by</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@link</span> String#valueOf(Object)&#125;.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> a string representation of this collection</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.append(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">            Iterator&lt;E&gt; it = iterator();</span><br><span class="line">            <span class="keyword">if</span> (it.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    Object e = it.next();</span><br><span class="line">                    sb.append(e == <span class="keyword">this</span> ? <span class="string">&quot;(this Collection)&quot;</span> : e);</span><br><span class="line">                    <span class="keyword">if</span> (!it.hasNext())</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    sb.append(<span class="string">&#x27;,&#x27;</span>).append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.append(<span class="string">&#x27;]&#x27;</span>).toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Object e : c) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e == <span class="keyword">null</span> || !contains(e))</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (Iterator&lt;E&gt; it = iterator(); it.hasNext();) &#123;</span><br><span class="line">                <span class="keyword">if</span> (c.contains(it.next())) &#123;</span><br><span class="line">                    it.remove();</span><br><span class="line">                    modified = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> modified;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (Iterator&lt;E&gt; it = iterator(); it.hasNext();) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!c.contains(it.next())) &#123;</span><br><span class="line">                    it.remove();</span><br><span class="line">                    modified = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> modified;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A view of a ConcurrentHashMap as a &#123;<span class="doctag">@link</span> Set&#125; of keys, in</span></span><br><span class="line"><span class="comment">     * which additions may optionally be enabled by mapping to a</span></span><br><span class="line"><span class="comment">     * common value.  This class cannot be directly instantiated.</span></span><br><span class="line"><span class="comment">     * See &#123;<span class="doctag">@link</span> #keySet() keySet()&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #keySet(Object) keySet(V)&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #newKeySet() newKeySet()&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #newKeySet(int) newKeySet(int)&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySetView</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">CollectionView</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">K</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">K</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7249069246763182397L</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> V value;</span><br><span class="line">        KeySetView(ConcurrentHashMap&lt;K,V&gt; map, V value) &#123;  <span class="comment">// non-public</span></span><br><span class="line">            <span class="keyword">super</span>(map);</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns the default mapped value for additions,</span></span><br><span class="line"><span class="comment">         * or &#123;<span class="doctag">@code</span> null&#125; if additions are not supported.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> the default mapped value for additions, or &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">         * if not supported</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getMappedValue</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123; <span class="keyword">return</span> map.containsKey(o); &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Removes the key from this map view, by removing the key (and its</span></span><br><span class="line"><span class="comment">         * corresponding value) from the backing map.  This method does</span></span><br><span class="line"><span class="comment">         * nothing if the key is not in the map.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span>  o the key to be removed from the backing map</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the backing map contained the specified key</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123; <span class="keyword">return</span> map.remove(o) != <span class="keyword">null</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> an iterator over the keys of the backing map</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;K&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            ConcurrentHashMap&lt;K,V&gt; m = map;</span><br><span class="line">            <span class="keyword">int</span> f = (t = m.table) == <span class="keyword">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> KeyIterator&lt;K,V&gt;(t, f, <span class="number">0</span>, f, m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Adds the specified key to this set view by mapping the key to</span></span><br><span class="line"><span class="comment">         * the default mapped value in the backing map, if defined.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> e key to be added</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this set changed as a result of the call</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> UnsupportedOperationException if no default mapped value</span></span><br><span class="line"><span class="comment">         * for additions was provided</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(K e)</span> </span>&#123;</span><br><span class="line">            V v;</span><br><span class="line">            <span class="keyword">if</span> ((v = value) == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">            <span class="keyword">return</span> map.putVal(e, v, <span class="keyword">true</span>) == <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Adds all of the elements in the specified collection to this set,</span></span><br><span class="line"><span class="comment">         * as if by calling &#123;<span class="doctag">@link</span> #add&#125; on each one.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> c the elements to be inserted into this set</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this set changed as a result of the call</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> NullPointerException if the collection or any of its</span></span><br><span class="line"><span class="comment">         * elements are &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> UnsupportedOperationException if no default mapped value</span></span><br><span class="line"><span class="comment">         * for additions was provided</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends K&gt; c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">boolean</span> added = <span class="keyword">false</span>;</span><br><span class="line">            V v;</span><br><span class="line">            <span class="keyword">if</span> ((v = value) == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">            <span class="keyword">for</span> (K e : c) &#123;</span><br><span class="line">                <span class="keyword">if</span> (map.putVal(e, v, <span class="keyword">true</span>) == <span class="keyword">null</span>)</span><br><span class="line">                    added = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> added;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (K e : <span class="keyword">this</span>)</span><br><span class="line">                h += e.hashCode();</span><br><span class="line">            <span class="keyword">return</span> h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            Set&lt;?&gt; c;</span><br><span class="line">            <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Set) &amp;&amp;</span><br><span class="line">                    ((c = (Set&lt;?&gt;)o) == <span class="keyword">this</span> ||</span><br><span class="line">                     (containsAll(c) &amp;&amp; c.containsAll(<span class="keyword">this</span>))));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Spliterator&lt;K&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            ConcurrentHashMap&lt;K,V&gt; m = map;</span><br><span class="line">            <span class="keyword">long</span> n = m.sumCount();</span><br><span class="line">            <span class="keyword">int</span> f = (t = m.table) == <span class="keyword">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> KeySpliterator&lt;K,V&gt;(t, f, <span class="number">0</span>, f, n &lt; <span class="number">0L</span> ? <span class="number">0L</span> : n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> K&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            <span class="keyword">if</span> ((t = map.table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Traverser&lt;K,V&gt; it = <span class="keyword">new</span> Traverser&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="keyword">null</span>; )</span><br><span class="line">                    action.accept(p.key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A view of a ConcurrentHashMap as a &#123;<span class="doctag">@link</span> Collection&#125; of</span></span><br><span class="line"><span class="comment">     * values, in which additions are disabled. This class cannot be</span></span><br><span class="line"><span class="comment">     * directly instantiated. See &#123;<span class="doctag">@link</span> #values()&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ValuesView</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">CollectionView</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Collection</span>&lt;<span class="title">V</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2249069246763182397L</span>;</span><br><span class="line">        ValuesView(ConcurrentHashMap&lt;K,V&gt; map) &#123; <span class="keyword">super</span>(map); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> map.containsValue(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Iterator&lt;V&gt; it = iterator(); it.hasNext();) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (o.equals(it.next())) &#123;</span><br><span class="line">                        it.remove();</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;V&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            ConcurrentHashMap&lt;K,V&gt; m = map;</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            <span class="keyword">int</span> f = (t = m.table) == <span class="keyword">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ValueIterator&lt;K,V&gt;(t, f, <span class="number">0</span>, f, m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(V e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends V&gt; c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Spliterator&lt;V&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            ConcurrentHashMap&lt;K,V&gt; m = map;</span><br><span class="line">            <span class="keyword">long</span> n = m.sumCount();</span><br><span class="line">            <span class="keyword">int</span> f = (t = m.table) == <span class="keyword">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ValueSpliterator&lt;K,V&gt;(t, f, <span class="number">0</span>, f, n &lt; <span class="number">0L</span> ? <span class="number">0L</span> : n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> V&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            <span class="keyword">if</span> ((t = map.table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Traverser&lt;K,V&gt; it = <span class="keyword">new</span> Traverser&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="keyword">null</span>; )</span><br><span class="line">                    action.accept(p.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A view of a ConcurrentHashMap as a &#123;<span class="doctag">@link</span> Set&#125; of (key, value)</span></span><br><span class="line"><span class="comment">     * entries.  This class cannot be directly instantiated. See</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #entrySet()&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySetView</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">CollectionView</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2249069246763182397L</span>;</span><br><span class="line">        EntrySetView(ConcurrentHashMap&lt;K,V&gt; map) &#123; <span class="keyword">super</span>(map); &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            Object k, v, r; Map.Entry&lt;?,?&gt; e;</span><br><span class="line">            <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Map.Entry) &amp;&amp;</span><br><span class="line">                    (k = (e = (Map.Entry&lt;?,?&gt;)o).getKey()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                    (r = map.get(k)) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                    (v = e.getValue()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                    (v == r || v.equals(r)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            Object k, v; Map.Entry&lt;?,?&gt; e;</span><br><span class="line">            <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Map.Entry) &amp;&amp;</span><br><span class="line">                    (k = (e = (Map.Entry&lt;?,?&gt;)o).getKey()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                    (v = e.getValue()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                    map.remove(k, v));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> an iterator over the entries of the backing map</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</span><br><span class="line">            ConcurrentHashMap&lt;K,V&gt; m = map;</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            <span class="keyword">int</span> f = (t = m.table) == <span class="keyword">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EntryIterator&lt;K,V&gt;(t, f, <span class="number">0</span>, f, m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Entry&lt;K,V&gt; e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> map.putVal(e.getKey(), e.getValue(), <span class="keyword">false</span>) == <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends Entry&lt;K,V&gt;&gt; c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">boolean</span> added = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;K,V&gt; e : c) &#123;</span><br><span class="line">                <span class="keyword">if</span> (add(e))</span><br><span class="line">                    added = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> added;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            <span class="keyword">if</span> ((t = map.table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Traverser&lt;K,V&gt; it = <span class="keyword">new</span> Traverser&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">                    h += p.hashCode();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            Set&lt;?&gt; c;</span><br><span class="line">            <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Set) &amp;&amp;</span><br><span class="line">                    ((c = (Set&lt;?&gt;)o) == <span class="keyword">this</span> ||</span><br><span class="line">                     (containsAll(c) &amp;&amp; c.containsAll(<span class="keyword">this</span>))));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Spliterator&lt;Map.Entry&lt;K,V&gt;&gt; spliterator() &#123;</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            ConcurrentHashMap&lt;K,V&gt; m = map;</span><br><span class="line">            <span class="keyword">long</span> n = m.sumCount();</span><br><span class="line">            <span class="keyword">int</span> f = (t = m.table) == <span class="keyword">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EntrySpliterator&lt;K,V&gt;(t, f, <span class="number">0</span>, f, n &lt; <span class="number">0L</span> ? <span class="number">0L</span> : n, m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> Map.Entry&lt;K,V&gt;&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            <span class="keyword">if</span> ((t = map.table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Traverser&lt;K,V&gt; it = <span class="keyword">new</span> Traverser&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="keyword">null</span>; )</span><br><span class="line">                    action.accept(<span class="keyword">new</span> MapEntry&lt;K,V&gt;(p.key, p.val, map));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Base class for bulk tasks. Repeats some fields and code from</span></span><br><span class="line"><span class="comment">     * class Traverser, because we need to subclass CountedCompleter.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">R</span>&gt; <span class="keyword">extends</span> <span class="title">CountedCompleter</span>&lt;<span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab;        <span class="comment">// same as Traverser</span></span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line">        TableStack&lt;K,V&gt; stack, spare;</span><br><span class="line">        <span class="keyword">int</span> index;</span><br><span class="line">        <span class="keyword">int</span> baseIndex;</span><br><span class="line">        <span class="keyword">int</span> baseLimit;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> baseSize;</span><br><span class="line">        <span class="keyword">int</span> batch;              <span class="comment">// split control</span></span><br><span class="line"></span><br><span class="line">        BulkTask(BulkTask&lt;K,V,?&gt; par, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t) &#123;</span><br><span class="line">            <span class="keyword">super</span>(par);</span><br><span class="line">            <span class="keyword">this</span>.batch = b;</span><br><span class="line">            <span class="keyword">this</span>.index = <span class="keyword">this</span>.baseIndex = i;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="keyword">this</span>.tab = t) == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">this</span>.baseSize = <span class="keyword">this</span>.baseLimit = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (par == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">this</span>.baseSize = <span class="keyword">this</span>.baseLimit = t.length;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.baseLimit = f;</span><br><span class="line">                <span class="keyword">this</span>.baseSize = par.baseSize;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Same as Traverser version</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">advance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = next) != <span class="keyword">null</span>)</span><br><span class="line">                e = e.next;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                Node&lt;K,V&gt;[] t; <span class="keyword">int</span> i, n;</span><br><span class="line">                <span class="keyword">if</span> (e != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> next = e;</span><br><span class="line">                <span class="keyword">if</span> (baseIndex &gt;= baseLimit || (t = tab) == <span class="keyword">null</span> ||</span><br><span class="line">                    (n = t.length) &lt;= (i = index) || i &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> next = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> ((e = tabAt(t, i)) != <span class="keyword">null</span> &amp;&amp; e.hash &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ForwardingNode) &#123;</span><br><span class="line">                        tab = ((ForwardingNode&lt;K,V&gt;)e).nextTable;</span><br><span class="line">                        e = <span class="keyword">null</span>;</span><br><span class="line">                        pushState(t, i, n);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeBin)</span><br><span class="line">                        e = ((TreeBin&lt;K,V&gt;)e).first;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        e = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (stack != <span class="keyword">null</span>)</span><br><span class="line">                    recoverState(n);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((index = i + baseSize) &gt;= n)</span><br><span class="line">                    index = ++baseIndex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pushState</span><span class="params">(Node&lt;K,V&gt;[] t, <span class="keyword">int</span> i, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">            TableStack&lt;K,V&gt; s = spare;</span><br><span class="line">            <span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">                spare = s.next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                s = <span class="keyword">new</span> TableStack&lt;K,V&gt;();</span><br><span class="line">            s.tab = t;</span><br><span class="line">            s.length = n;</span><br><span class="line">            s.index = i;</span><br><span class="line">            s.next = stack;</span><br><span class="line">            stack = s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recoverState</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">            TableStack&lt;K,V&gt; s; <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((s = stack) != <span class="keyword">null</span> &amp;&amp; (index += (len = s.length)) &gt;= n) &#123;</span><br><span class="line">                n = len;</span><br><span class="line">                index = s.index;</span><br><span class="line">                tab = s.tab;</span><br><span class="line">                s.tab = <span class="keyword">null</span>;</span><br><span class="line">                TableStack&lt;K,V&gt; next = s.next;</span><br><span class="line">                s.next = spare; <span class="comment">// save for reuse</span></span><br><span class="line">                stack = next;</span><br><span class="line">                spare = s;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="keyword">null</span> &amp;&amp; (index += baseSize) &gt;= n)</span><br><span class="line">                index = ++baseIndex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Task classes. Coded in a regular but ugly format/style to</span></span><br><span class="line"><span class="comment">     * simplify checks that each variant differs in the right way from</span></span><br><span class="line"><span class="comment">     * others. The null screenings exist because compilers cannot tell</span></span><br><span class="line"><span class="comment">     * that we&#x27;ve already null-checked task arguments, so we force</span></span><br><span class="line"><span class="comment">     * simplest hoisted bypass to help avoid convoluted traps.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ForEachKeyTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Consumer&lt;? <span class="keyword">super</span> K&gt; action;</span><br><span class="line">        ForEachKeyTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             Consumer&lt;? <span class="keyword">super</span> K&gt; action) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="keyword">this</span>.action = action;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> Consumer&lt;? <span class="keyword">super</span> K&gt; action;</span><br><span class="line">            <span class="keyword">if</span> ((action = <span class="keyword">this</span>.action) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> ForEachKeyTask&lt;K,V&gt;</span><br><span class="line">                        (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         action).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>;)</span><br><span class="line">                    action.accept(p.key);</span><br><span class="line">                propagateCompletion();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ForEachValueTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Consumer&lt;? <span class="keyword">super</span> V&gt; action;</span><br><span class="line">        ForEachValueTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             Consumer&lt;? <span class="keyword">super</span> V&gt; action) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="keyword">this</span>.action = action;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> Consumer&lt;? <span class="keyword">super</span> V&gt; action;</span><br><span class="line">            <span class="keyword">if</span> ((action = <span class="keyword">this</span>.action) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> ForEachValueTask&lt;K,V&gt;</span><br><span class="line">                        (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         action).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>;)</span><br><span class="line">                    action.accept(p.val);</span><br><span class="line">                propagateCompletion();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ForEachEntryTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Consumer&lt;? <span class="keyword">super</span> Entry&lt;K,V&gt;&gt; action;</span><br><span class="line">        ForEachEntryTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             Consumer&lt;? <span class="keyword">super</span> Entry&lt;K,V&gt;&gt; action) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="keyword">this</span>.action = action;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> Consumer&lt;? <span class="keyword">super</span> Entry&lt;K,V&gt;&gt; action;</span><br><span class="line">            <span class="keyword">if</span> ((action = <span class="keyword">this</span>.action) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> ForEachEntryTask&lt;K,V&gt;</span><br><span class="line">                        (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         action).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; )</span><br><span class="line">                    action.accept(p);</span><br><span class="line">                propagateCompletion();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ForEachMappingTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> BiConsumer&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V&gt; action;</span><br><span class="line">        ForEachMappingTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             BiConsumer&lt;? <span class="keyword">super</span> K,? <span class="keyword">super</span> V&gt; action) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="keyword">this</span>.action = action;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> BiConsumer&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V&gt; action;</span><br><span class="line">            <span class="keyword">if</span> ((action = <span class="keyword">this</span>.action) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> ForEachMappingTask&lt;K,V&gt;</span><br><span class="line">                        (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         action).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; )</span><br><span class="line">                    action.accept(p.key, p.val);</span><br><span class="line">                propagateCompletion();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ForEachTransformedKeyTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">U</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Function&lt;? <span class="keyword">super</span> K, ? extends U&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> Consumer&lt;? <span class="keyword">super</span> U&gt; action;</span><br><span class="line">        ForEachTransformedKeyTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             Function&lt;? <span class="keyword">super</span> K, ? extends U&gt; transformer, Consumer&lt;? <span class="keyword">super</span> U&gt; action) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="keyword">this</span>.transformer = transformer; <span class="keyword">this</span>.action = action;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> Function&lt;? <span class="keyword">super</span> K, ? extends U&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> Consumer&lt;? <span class="keyword">super</span> U&gt; action;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="keyword">this</span>.transformer) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (action = <span class="keyword">this</span>.action) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> ForEachTransformedKeyTask&lt;K,V,U&gt;</span><br><span class="line">                        (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         transformer, action).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    <span class="keyword">if</span> ((u = transformer.apply(p.key)) != <span class="keyword">null</span>)</span><br><span class="line">                        action.accept(u);</span><br><span class="line">                &#125;</span><br><span class="line">                propagateCompletion();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ForEachTransformedValueTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">U</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Function&lt;? <span class="keyword">super</span> V, ? extends U&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> Consumer&lt;? <span class="keyword">super</span> U&gt; action;</span><br><span class="line">        ForEachTransformedValueTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             Function&lt;? <span class="keyword">super</span> V, ? extends U&gt; transformer, Consumer&lt;? <span class="keyword">super</span> U&gt; action) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="keyword">this</span>.transformer = transformer; <span class="keyword">this</span>.action = action;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> Function&lt;? <span class="keyword">super</span> V, ? extends U&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> Consumer&lt;? <span class="keyword">super</span> U&gt; action;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="keyword">this</span>.transformer) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (action = <span class="keyword">this</span>.action) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> ForEachTransformedValueTask&lt;K,V,U&gt;</span><br><span class="line">                        (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         transformer, action).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    <span class="keyword">if</span> ((u = transformer.apply(p.val)) != <span class="keyword">null</span>)</span><br><span class="line">                        action.accept(u);</span><br><span class="line">                &#125;</span><br><span class="line">                propagateCompletion();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ForEachTransformedEntryTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">U</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Function&lt;Map.Entry&lt;K,V&gt;, ? extends U&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> Consumer&lt;? <span class="keyword">super</span> U&gt; action;</span><br><span class="line">        ForEachTransformedEntryTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             Function&lt;Map.Entry&lt;K,V&gt;, ? extends U&gt; transformer, Consumer&lt;? <span class="keyword">super</span> U&gt; action) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="keyword">this</span>.transformer = transformer; <span class="keyword">this</span>.action = action;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> Function&lt;Map.Entry&lt;K,V&gt;, ? extends U&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> Consumer&lt;? <span class="keyword">super</span> U&gt; action;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="keyword">this</span>.transformer) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (action = <span class="keyword">this</span>.action) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> ForEachTransformedEntryTask&lt;K,V,U&gt;</span><br><span class="line">                        (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         transformer, action).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    <span class="keyword">if</span> ((u = transformer.apply(p)) != <span class="keyword">null</span>)</span><br><span class="line">                        action.accept(u);</span><br><span class="line">                &#125;</span><br><span class="line">                propagateCompletion();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ForEachTransformedMappingTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">U</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends U&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> Consumer&lt;? <span class="keyword">super</span> U&gt; action;</span><br><span class="line">        ForEachTransformedMappingTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends U&gt; transformer,</span><br><span class="line">             Consumer&lt;? <span class="keyword">super</span> U&gt; action) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="keyword">this</span>.transformer = transformer; <span class="keyword">this</span>.action = action;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends U&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> Consumer&lt;? <span class="keyword">super</span> U&gt; action;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="keyword">this</span>.transformer) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (action = <span class="keyword">this</span>.action) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> ForEachTransformedMappingTask&lt;K,V,U&gt;</span><br><span class="line">                        (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         transformer, action).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    <span class="keyword">if</span> ((u = transformer.apply(p.key, p.val)) != <span class="keyword">null</span>)</span><br><span class="line">                        action.accept(u);</span><br><span class="line">                &#125;</span><br><span class="line">                propagateCompletion();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchKeysTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">U</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">U</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Function&lt;? <span class="keyword">super</span> K, ? extends U&gt; searchFunction;</span><br><span class="line">        <span class="keyword">final</span> AtomicReference&lt;U&gt; result;</span><br><span class="line">        SearchKeysTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             Function&lt;? <span class="keyword">super</span> K, ? extends U&gt; searchFunction,</span><br><span class="line">             AtomicReference&lt;U&gt; result) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="keyword">this</span>.searchFunction = searchFunction; <span class="keyword">this</span>.result = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> U <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result.get(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> Function&lt;? <span class="keyword">super</span> K, ? extends U&gt; searchFunction;</span><br><span class="line">            <span class="keyword">final</span> AtomicReference&lt;U&gt; result;</span><br><span class="line">            <span class="keyword">if</span> ((searchFunction = <span class="keyword">this</span>.searchFunction) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (result = <span class="keyword">this</span>.result) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (result.get() != <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> SearchKeysTask&lt;K,V,U&gt;</span><br><span class="line">                        (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         searchFunction, result).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (result.get() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    Node&lt;K,V&gt; p;</span><br><span class="line">                    <span class="keyword">if</span> ((p = advance()) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        propagateCompletion();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ((u = searchFunction.apply(p.key)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (result.compareAndSet(<span class="keyword">null</span>, u))</span><br><span class="line">                            quietlyCompleteRoot();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchValuesTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">U</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">U</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Function&lt;? <span class="keyword">super</span> V, ? extends U&gt; searchFunction;</span><br><span class="line">        <span class="keyword">final</span> AtomicReference&lt;U&gt; result;</span><br><span class="line">        SearchValuesTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             Function&lt;? <span class="keyword">super</span> V, ? extends U&gt; searchFunction,</span><br><span class="line">             AtomicReference&lt;U&gt; result) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="keyword">this</span>.searchFunction = searchFunction; <span class="keyword">this</span>.result = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> U <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result.get(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> Function&lt;? <span class="keyword">super</span> V, ? extends U&gt; searchFunction;</span><br><span class="line">            <span class="keyword">final</span> AtomicReference&lt;U&gt; result;</span><br><span class="line">            <span class="keyword">if</span> ((searchFunction = <span class="keyword">this</span>.searchFunction) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (result = <span class="keyword">this</span>.result) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (result.get() != <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> SearchValuesTask&lt;K,V,U&gt;</span><br><span class="line">                        (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         searchFunction, result).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (result.get() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    Node&lt;K,V&gt; p;</span><br><span class="line">                    <span class="keyword">if</span> ((p = advance()) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        propagateCompletion();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ((u = searchFunction.apply(p.val)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (result.compareAndSet(<span class="keyword">null</span>, u))</span><br><span class="line">                            quietlyCompleteRoot();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchEntriesTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">U</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">U</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Function&lt;Entry&lt;K,V&gt;, ? extends U&gt; searchFunction;</span><br><span class="line">        <span class="keyword">final</span> AtomicReference&lt;U&gt; result;</span><br><span class="line">        SearchEntriesTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             Function&lt;Entry&lt;K,V&gt;, ? extends U&gt; searchFunction,</span><br><span class="line">             AtomicReference&lt;U&gt; result) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="keyword">this</span>.searchFunction = searchFunction; <span class="keyword">this</span>.result = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> U <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result.get(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> Function&lt;Entry&lt;K,V&gt;, ? extends U&gt; searchFunction;</span><br><span class="line">            <span class="keyword">final</span> AtomicReference&lt;U&gt; result;</span><br><span class="line">            <span class="keyword">if</span> ((searchFunction = <span class="keyword">this</span>.searchFunction) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (result = <span class="keyword">this</span>.result) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (result.get() != <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> SearchEntriesTask&lt;K,V,U&gt;</span><br><span class="line">                        (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         searchFunction, result).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (result.get() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    Node&lt;K,V&gt; p;</span><br><span class="line">                    <span class="keyword">if</span> ((p = advance()) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        propagateCompletion();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ((u = searchFunction.apply(p)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (result.compareAndSet(<span class="keyword">null</span>, u))</span><br><span class="line">                            quietlyCompleteRoot();</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchMappingsTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">U</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">U</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends U&gt; searchFunction;</span><br><span class="line">        <span class="keyword">final</span> AtomicReference&lt;U&gt; result;</span><br><span class="line">        SearchMappingsTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends U&gt; searchFunction,</span><br><span class="line">             AtomicReference&lt;U&gt; result) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t);</span><br><span class="line">            <span class="keyword">this</span>.searchFunction = searchFunction; <span class="keyword">this</span>.result = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> U <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result.get(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends U&gt; searchFunction;</span><br><span class="line">            <span class="keyword">final</span> AtomicReference&lt;U&gt; result;</span><br><span class="line">            <span class="keyword">if</span> ((searchFunction = <span class="keyword">this</span>.searchFunction) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (result = <span class="keyword">this</span>.result) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (result.get() != <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">new</span> SearchMappingsTask&lt;K,V,U&gt;</span><br><span class="line">                        (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                         searchFunction, result).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (result.get() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    Node&lt;K,V&gt; p;</span><br><span class="line">                    <span class="keyword">if</span> ((p = advance()) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        propagateCompletion();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ((u = searchFunction.apply(p.key, p.val)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (result.compareAndSet(<span class="keyword">null</span>, u))</span><br><span class="line">                            quietlyCompleteRoot();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ReduceKeysTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> K, ? extends K&gt; reducer;</span><br><span class="line">        K result;</span><br><span class="line">        ReduceKeysTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        ReduceKeysTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             ReduceKeysTask&lt;K,V&gt; nextRight,</span><br><span class="line">             BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> K, ? extends K&gt; reducer) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t); <span class="keyword">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="keyword">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> K, ? extends K&gt; reducer;</span><br><span class="line">            <span class="keyword">if</span> ((reducer = <span class="keyword">this</span>.reducer) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> ReduceKeysTask&lt;K,V&gt;</span><br><span class="line">                     (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                K r = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">                    K u = p.key;</span><br><span class="line">                    r = (r == <span class="keyword">null</span>) ? u : u == <span class="keyword">null</span> ? r : reducer.apply(r, u);</span><br><span class="line">                &#125;</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="keyword">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    ReduceKeysTask&lt;K,V&gt;</span><br><span class="line">                        t = (ReduceKeysTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        K tr, sr;</span><br><span class="line">                        <span class="keyword">if</span> ((sr = s.result) != <span class="keyword">null</span>)</span><br><span class="line">                            t.result = (((tr = t.result) == <span class="keyword">null</span>) ? sr :</span><br><span class="line">                                        reducer.apply(tr, sr));</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ReduceValuesTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> BiFunction&lt;? <span class="keyword">super</span> V, ? <span class="keyword">super</span> V, ? extends V&gt; reducer;</span><br><span class="line">        V result;</span><br><span class="line">        ReduceValuesTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        ReduceValuesTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             ReduceValuesTask&lt;K,V&gt; nextRight,</span><br><span class="line">             BiFunction&lt;? <span class="keyword">super</span> V, ? <span class="keyword">super</span> V, ? extends V&gt; reducer) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t); <span class="keyword">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="keyword">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> BiFunction&lt;? <span class="keyword">super</span> V, ? <span class="keyword">super</span> V, ? extends V&gt; reducer;</span><br><span class="line">            <span class="keyword">if</span> ((reducer = <span class="keyword">this</span>.reducer) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> ReduceValuesTask&lt;K,V&gt;</span><br><span class="line">                     (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                V r = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">                    V v = p.val;</span><br><span class="line">                    r = (r == <span class="keyword">null</span>) ? v : reducer.apply(r, v);</span><br><span class="line">                &#125;</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="keyword">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    ReduceValuesTask&lt;K,V&gt;</span><br><span class="line">                        t = (ReduceValuesTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        V tr, sr;</span><br><span class="line">                        <span class="keyword">if</span> ((sr = s.result) != <span class="keyword">null</span>)</span><br><span class="line">                            t.result = (((tr = t.result) == <span class="keyword">null</span>) ? sr :</span><br><span class="line">                                        reducer.apply(tr, sr));</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ReduceEntriesTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> BiFunction&lt;Map.Entry&lt;K,V&gt;, Map.Entry&lt;K,V&gt;, ? extends Map.Entry&lt;K,V&gt;&gt; reducer;</span><br><span class="line">        Map.Entry&lt;K,V&gt; result;</span><br><span class="line">        ReduceEntriesTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        ReduceEntriesTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             ReduceEntriesTask&lt;K,V&gt; nextRight,</span><br><span class="line">             BiFunction&lt;Entry&lt;K,V&gt;, Map.Entry&lt;K,V&gt;, ? extends Map.Entry&lt;K,V&gt;&gt; reducer) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t); <span class="keyword">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="keyword">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> BiFunction&lt;Map.Entry&lt;K,V&gt;, Map.Entry&lt;K,V&gt;, ? extends Map.Entry&lt;K,V&gt;&gt; reducer;</span><br><span class="line">            <span class="keyword">if</span> ((reducer = <span class="keyword">this</span>.reducer) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> ReduceEntriesTask&lt;K,V&gt;</span><br><span class="line">                     (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                Map.Entry&lt;K,V&gt; r = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; )</span><br><span class="line">                    r = (r == <span class="keyword">null</span>) ? p : reducer.apply(r, p);</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="keyword">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    ReduceEntriesTask&lt;K,V&gt;</span><br><span class="line">                        t = (ReduceEntriesTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        Map.Entry&lt;K,V&gt; tr, sr;</span><br><span class="line">                        <span class="keyword">if</span> ((sr = s.result) != <span class="keyword">null</span>)</span><br><span class="line">                            t.result = (((tr = t.result) == <span class="keyword">null</span>) ? sr :</span><br><span class="line">                                        reducer.apply(tr, sr));</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapReduceKeysTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">U</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">U</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Function&lt;? <span class="keyword">super</span> K, ? extends U&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> BiFunction&lt;? <span class="keyword">super</span> U, ? <span class="keyword">super</span> U, ? extends U&gt; reducer;</span><br><span class="line">        U result;</span><br><span class="line">        MapReduceKeysTask&lt;K,V,U&gt; rights, nextRight;</span><br><span class="line">        MapReduceKeysTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceKeysTask&lt;K,V,U&gt; nextRight,</span><br><span class="line">             Function&lt;? <span class="keyword">super</span> K, ? extends U&gt; transformer,</span><br><span class="line">             BiFunction&lt;? <span class="keyword">super</span> U, ? <span class="keyword">super</span> U, ? extends U&gt; reducer) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t); <span class="keyword">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="keyword">this</span>.transformer = transformer;</span><br><span class="line">            <span class="keyword">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> U <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> Function&lt;? <span class="keyword">super</span> K, ? extends U&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> BiFunction&lt;? <span class="keyword">super</span> U, ? <span class="keyword">super</span> U, ? extends U&gt; reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="keyword">this</span>.transformer) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="keyword">this</span>.reducer) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> MapReduceKeysTask&lt;K,V,U&gt;</span><br><span class="line">                     (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                U r = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    <span class="keyword">if</span> ((u = transformer.apply(p.key)) != <span class="keyword">null</span>)</span><br><span class="line">                        r = (r == <span class="keyword">null</span>) ? u : reducer.apply(r, u);</span><br><span class="line">                &#125;</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="keyword">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceKeysTask&lt;K,V,U&gt;</span><br><span class="line">                        t = (MapReduceKeysTask&lt;K,V,U&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        U tr, sr;</span><br><span class="line">                        <span class="keyword">if</span> ((sr = s.result) != <span class="keyword">null</span>)</span><br><span class="line">                            t.result = (((tr = t.result) == <span class="keyword">null</span>) ? sr :</span><br><span class="line">                                        reducer.apply(tr, sr));</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapReduceValuesTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">U</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">U</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Function&lt;? <span class="keyword">super</span> V, ? extends U&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> BiFunction&lt;? <span class="keyword">super</span> U, ? <span class="keyword">super</span> U, ? extends U&gt; reducer;</span><br><span class="line">        U result;</span><br><span class="line">        MapReduceValuesTask&lt;K,V,U&gt; rights, nextRight;</span><br><span class="line">        MapReduceValuesTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceValuesTask&lt;K,V,U&gt; nextRight,</span><br><span class="line">             Function&lt;? <span class="keyword">super</span> V, ? extends U&gt; transformer,</span><br><span class="line">             BiFunction&lt;? <span class="keyword">super</span> U, ? <span class="keyword">super</span> U, ? extends U&gt; reducer) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t); <span class="keyword">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="keyword">this</span>.transformer = transformer;</span><br><span class="line">            <span class="keyword">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> U <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> Function&lt;? <span class="keyword">super</span> V, ? extends U&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> BiFunction&lt;? <span class="keyword">super</span> U, ? <span class="keyword">super</span> U, ? extends U&gt; reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="keyword">this</span>.transformer) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="keyword">this</span>.reducer) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> MapReduceValuesTask&lt;K,V,U&gt;</span><br><span class="line">                     (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                U r = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    <span class="keyword">if</span> ((u = transformer.apply(p.val)) != <span class="keyword">null</span>)</span><br><span class="line">                        r = (r == <span class="keyword">null</span>) ? u : reducer.apply(r, u);</span><br><span class="line">                &#125;</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="keyword">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceValuesTask&lt;K,V,U&gt;</span><br><span class="line">                        t = (MapReduceValuesTask&lt;K,V,U&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        U tr, sr;</span><br><span class="line">                        <span class="keyword">if</span> ((sr = s.result) != <span class="keyword">null</span>)</span><br><span class="line">                            t.result = (((tr = t.result) == <span class="keyword">null</span>) ? sr :</span><br><span class="line">                                        reducer.apply(tr, sr));</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapReduceEntriesTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">U</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">U</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Function&lt;Map.Entry&lt;K,V&gt;, ? extends U&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> BiFunction&lt;? <span class="keyword">super</span> U, ? <span class="keyword">super</span> U, ? extends U&gt; reducer;</span><br><span class="line">        U result;</span><br><span class="line">        MapReduceEntriesTask&lt;K,V,U&gt; rights, nextRight;</span><br><span class="line">        MapReduceEntriesTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceEntriesTask&lt;K,V,U&gt; nextRight,</span><br><span class="line">             Function&lt;Map.Entry&lt;K,V&gt;, ? extends U&gt; transformer,</span><br><span class="line">             BiFunction&lt;? <span class="keyword">super</span> U, ? <span class="keyword">super</span> U, ? extends U&gt; reducer) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t); <span class="keyword">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="keyword">this</span>.transformer = transformer;</span><br><span class="line">            <span class="keyword">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> U <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> Function&lt;Map.Entry&lt;K,V&gt;, ? extends U&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> BiFunction&lt;? <span class="keyword">super</span> U, ? <span class="keyword">super</span> U, ? extends U&gt; reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="keyword">this</span>.transformer) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="keyword">this</span>.reducer) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> MapReduceEntriesTask&lt;K,V,U&gt;</span><br><span class="line">                     (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                U r = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    <span class="keyword">if</span> ((u = transformer.apply(p)) != <span class="keyword">null</span>)</span><br><span class="line">                        r = (r == <span class="keyword">null</span>) ? u : reducer.apply(r, u);</span><br><span class="line">                &#125;</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="keyword">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceEntriesTask&lt;K,V,U&gt;</span><br><span class="line">                        t = (MapReduceEntriesTask&lt;K,V,U&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        U tr, sr;</span><br><span class="line">                        <span class="keyword">if</span> ((sr = s.result) != <span class="keyword">null</span>)</span><br><span class="line">                            t.result = (((tr = t.result) == <span class="keyword">null</span>) ? sr :</span><br><span class="line">                                        reducer.apply(tr, sr));</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapReduceMappingsTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">U</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">U</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends U&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> BiFunction&lt;? <span class="keyword">super</span> U, ? <span class="keyword">super</span> U, ? extends U&gt; reducer;</span><br><span class="line">        U result;</span><br><span class="line">        MapReduceMappingsTask&lt;K,V,U&gt; rights, nextRight;</span><br><span class="line">        MapReduceMappingsTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceMappingsTask&lt;K,V,U&gt; nextRight,</span><br><span class="line">             BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends U&gt; transformer,</span><br><span class="line">             BiFunction&lt;? <span class="keyword">super</span> U, ? <span class="keyword">super</span> U, ? extends U&gt; reducer) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t); <span class="keyword">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="keyword">this</span>.transformer = transformer;</span><br><span class="line">            <span class="keyword">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> U <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends U&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> BiFunction&lt;? <span class="keyword">super</span> U, ? <span class="keyword">super</span> U, ? extends U&gt; reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="keyword">this</span>.transformer) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="keyword">this</span>.reducer) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> MapReduceMappingsTask&lt;K,V,U&gt;</span><br><span class="line">                     (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                U r = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">                    U u;</span><br><span class="line">                    <span class="keyword">if</span> ((u = transformer.apply(p.key, p.val)) != <span class="keyword">null</span>)</span><br><span class="line">                        r = (r == <span class="keyword">null</span>) ? u : reducer.apply(r, u);</span><br><span class="line">                &#125;</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="keyword">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceMappingsTask&lt;K,V,U&gt;</span><br><span class="line">                        t = (MapReduceMappingsTask&lt;K,V,U&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        U tr, sr;</span><br><span class="line">                        <span class="keyword">if</span> ((sr = s.result) != <span class="keyword">null</span>)</span><br><span class="line">                            t.result = (((tr = t.result) == <span class="keyword">null</span>) ? sr :</span><br><span class="line">                                        reducer.apply(tr, sr));</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapReduceKeysToDoubleTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Double</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ToDoubleFunction&lt;? <span class="keyword">super</span> K&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> DoubleBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">double</span> basis;</span><br><span class="line">        <span class="keyword">double</span> result;</span><br><span class="line">        MapReduceKeysToDoubleTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceKeysToDoubleTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceKeysToDoubleTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToDoubleFunction&lt;? <span class="keyword">super</span> K&gt; transformer,</span><br><span class="line">             <span class="keyword">double</span> basis,</span><br><span class="line">             DoubleBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t); <span class="keyword">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="keyword">this</span>.transformer = transformer;</span><br><span class="line">            <span class="keyword">this</span>.basis = basis; <span class="keyword">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Double <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> ToDoubleFunction&lt;? <span class="keyword">super</span> K&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> DoubleBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="keyword">this</span>.transformer) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="keyword">this</span>.reducer) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">double</span> r = <span class="keyword">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> MapReduceKeysToDoubleTask&lt;K,V&gt;</span><br><span class="line">                     (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; )</span><br><span class="line">                    r = reducer.applyAsDouble(r, transformer.applyAsDouble(p.key));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="keyword">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceKeysToDoubleTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceKeysToDoubleTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsDouble(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapReduceValuesToDoubleTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Double</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ToDoubleFunction&lt;? <span class="keyword">super</span> V&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> DoubleBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">double</span> basis;</span><br><span class="line">        <span class="keyword">double</span> result;</span><br><span class="line">        MapReduceValuesToDoubleTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceValuesToDoubleTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceValuesToDoubleTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToDoubleFunction&lt;? <span class="keyword">super</span> V&gt; transformer,</span><br><span class="line">             <span class="keyword">double</span> basis,</span><br><span class="line">             DoubleBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t); <span class="keyword">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="keyword">this</span>.transformer = transformer;</span><br><span class="line">            <span class="keyword">this</span>.basis = basis; <span class="keyword">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Double <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> ToDoubleFunction&lt;? <span class="keyword">super</span> V&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> DoubleBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="keyword">this</span>.transformer) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="keyword">this</span>.reducer) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">double</span> r = <span class="keyword">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> MapReduceValuesToDoubleTask&lt;K,V&gt;</span><br><span class="line">                     (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; )</span><br><span class="line">                    r = reducer.applyAsDouble(r, transformer.applyAsDouble(p.val));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="keyword">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceValuesToDoubleTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceValuesToDoubleTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsDouble(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapReduceEntriesToDoubleTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Double</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ToDoubleFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> DoubleBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">double</span> basis;</span><br><span class="line">        <span class="keyword">double</span> result;</span><br><span class="line">        MapReduceEntriesToDoubleTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceEntriesToDoubleTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceEntriesToDoubleTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToDoubleFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer,</span><br><span class="line">             <span class="keyword">double</span> basis,</span><br><span class="line">             DoubleBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t); <span class="keyword">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="keyword">this</span>.transformer = transformer;</span><br><span class="line">            <span class="keyword">this</span>.basis = basis; <span class="keyword">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Double <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> ToDoubleFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> DoubleBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="keyword">this</span>.transformer) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="keyword">this</span>.reducer) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">double</span> r = <span class="keyword">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> MapReduceEntriesToDoubleTask&lt;K,V&gt;</span><br><span class="line">                     (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; )</span><br><span class="line">                    r = reducer.applyAsDouble(r, transformer.applyAsDouble(p));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="keyword">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceEntriesToDoubleTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceEntriesToDoubleTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsDouble(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapReduceMappingsToDoubleTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Double</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ToDoubleBiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> DoubleBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">double</span> basis;</span><br><span class="line">        <span class="keyword">double</span> result;</span><br><span class="line">        MapReduceMappingsToDoubleTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceMappingsToDoubleTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceMappingsToDoubleTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToDoubleBiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V&gt; transformer,</span><br><span class="line">             <span class="keyword">double</span> basis,</span><br><span class="line">             DoubleBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t); <span class="keyword">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="keyword">this</span>.transformer = transformer;</span><br><span class="line">            <span class="keyword">this</span>.basis = basis; <span class="keyword">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Double <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> ToDoubleBiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> DoubleBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="keyword">this</span>.transformer) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="keyword">this</span>.reducer) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">double</span> r = <span class="keyword">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> MapReduceMappingsToDoubleTask&lt;K,V&gt;</span><br><span class="line">                     (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; )</span><br><span class="line">                    r = reducer.applyAsDouble(r, transformer.applyAsDouble(p.key, p.val));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="keyword">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceMappingsToDoubleTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceMappingsToDoubleTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsDouble(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapReduceKeysToLongTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ToLongFunction&lt;? <span class="keyword">super</span> K&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> LongBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> basis;</span><br><span class="line">        <span class="keyword">long</span> result;</span><br><span class="line">        MapReduceKeysToLongTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceKeysToLongTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceKeysToLongTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToLongFunction&lt;? <span class="keyword">super</span> K&gt; transformer,</span><br><span class="line">             <span class="keyword">long</span> basis,</span><br><span class="line">             LongBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t); <span class="keyword">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="keyword">this</span>.transformer = transformer;</span><br><span class="line">            <span class="keyword">this</span>.basis = basis; <span class="keyword">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Long <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> ToLongFunction&lt;? <span class="keyword">super</span> K&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> LongBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="keyword">this</span>.transformer) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="keyword">this</span>.reducer) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> r = <span class="keyword">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> MapReduceKeysToLongTask&lt;K,V&gt;</span><br><span class="line">                     (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; )</span><br><span class="line">                    r = reducer.applyAsLong(r, transformer.applyAsLong(p.key));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="keyword">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceKeysToLongTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceKeysToLongTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsLong(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapReduceValuesToLongTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ToLongFunction&lt;? <span class="keyword">super</span> V&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> LongBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> basis;</span><br><span class="line">        <span class="keyword">long</span> result;</span><br><span class="line">        MapReduceValuesToLongTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceValuesToLongTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceValuesToLongTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToLongFunction&lt;? <span class="keyword">super</span> V&gt; transformer,</span><br><span class="line">             <span class="keyword">long</span> basis,</span><br><span class="line">             LongBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t); <span class="keyword">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="keyword">this</span>.transformer = transformer;</span><br><span class="line">            <span class="keyword">this</span>.basis = basis; <span class="keyword">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Long <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> ToLongFunction&lt;? <span class="keyword">super</span> V&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> LongBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="keyword">this</span>.transformer) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="keyword">this</span>.reducer) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> r = <span class="keyword">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> MapReduceValuesToLongTask&lt;K,V&gt;</span><br><span class="line">                     (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; )</span><br><span class="line">                    r = reducer.applyAsLong(r, transformer.applyAsLong(p.val));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="keyword">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceValuesToLongTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceValuesToLongTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsLong(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapReduceEntriesToLongTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ToLongFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> LongBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> basis;</span><br><span class="line">        <span class="keyword">long</span> result;</span><br><span class="line">        MapReduceEntriesToLongTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceEntriesToLongTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceEntriesToLongTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToLongFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer,</span><br><span class="line">             <span class="keyword">long</span> basis,</span><br><span class="line">             LongBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t); <span class="keyword">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="keyword">this</span>.transformer = transformer;</span><br><span class="line">            <span class="keyword">this</span>.basis = basis; <span class="keyword">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Long <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> ToLongFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> LongBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="keyword">this</span>.transformer) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="keyword">this</span>.reducer) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> r = <span class="keyword">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> MapReduceEntriesToLongTask&lt;K,V&gt;</span><br><span class="line">                     (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; )</span><br><span class="line">                    r = reducer.applyAsLong(r, transformer.applyAsLong(p));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="keyword">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceEntriesToLongTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceEntriesToLongTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsLong(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapReduceMappingsToLongTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ToLongBiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> LongBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> basis;</span><br><span class="line">        <span class="keyword">long</span> result;</span><br><span class="line">        MapReduceMappingsToLongTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceMappingsToLongTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceMappingsToLongTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToLongBiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V&gt; transformer,</span><br><span class="line">             <span class="keyword">long</span> basis,</span><br><span class="line">             LongBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t); <span class="keyword">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="keyword">this</span>.transformer = transformer;</span><br><span class="line">            <span class="keyword">this</span>.basis = basis; <span class="keyword">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Long <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> ToLongBiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> LongBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="keyword">this</span>.transformer) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="keyword">this</span>.reducer) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> r = <span class="keyword">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> MapReduceMappingsToLongTask&lt;K,V&gt;</span><br><span class="line">                     (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; )</span><br><span class="line">                    r = reducer.applyAsLong(r, transformer.applyAsLong(p.key, p.val));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="keyword">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceMappingsToLongTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceMappingsToLongTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsLong(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapReduceKeysToIntTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ToIntFunction&lt;? <span class="keyword">super</span> K&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> IntBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> basis;</span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">        MapReduceKeysToIntTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceKeysToIntTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceKeysToIntTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToIntFunction&lt;? <span class="keyword">super</span> K&gt; transformer,</span><br><span class="line">             <span class="keyword">int</span> basis,</span><br><span class="line">             IntBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t); <span class="keyword">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="keyword">this</span>.transformer = transformer;</span><br><span class="line">            <span class="keyword">this</span>.basis = basis; <span class="keyword">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Integer <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> ToIntFunction&lt;? <span class="keyword">super</span> K&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> IntBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="keyword">this</span>.transformer) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="keyword">this</span>.reducer) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> r = <span class="keyword">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> MapReduceKeysToIntTask&lt;K,V&gt;</span><br><span class="line">                     (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; )</span><br><span class="line">                    r = reducer.applyAsInt(r, transformer.applyAsInt(p.key));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="keyword">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceKeysToIntTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceKeysToIntTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsInt(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapReduceValuesToIntTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ToIntFunction&lt;? <span class="keyword">super</span> V&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> IntBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> basis;</span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">        MapReduceValuesToIntTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceValuesToIntTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceValuesToIntTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToIntFunction&lt;? <span class="keyword">super</span> V&gt; transformer,</span><br><span class="line">             <span class="keyword">int</span> basis,</span><br><span class="line">             IntBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t); <span class="keyword">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="keyword">this</span>.transformer = transformer;</span><br><span class="line">            <span class="keyword">this</span>.basis = basis; <span class="keyword">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Integer <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> ToIntFunction&lt;? <span class="keyword">super</span> V&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> IntBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="keyword">this</span>.transformer) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="keyword">this</span>.reducer) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> r = <span class="keyword">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> MapReduceValuesToIntTask&lt;K,V&gt;</span><br><span class="line">                     (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; )</span><br><span class="line">                    r = reducer.applyAsInt(r, transformer.applyAsInt(p.val));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="keyword">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceValuesToIntTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceValuesToIntTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsInt(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapReduceEntriesToIntTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ToIntFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> IntBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> basis;</span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">        MapReduceEntriesToIntTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceEntriesToIntTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceEntriesToIntTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToIntFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer,</span><br><span class="line">             <span class="keyword">int</span> basis,</span><br><span class="line">             IntBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t); <span class="keyword">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="keyword">this</span>.transformer = transformer;</span><br><span class="line">            <span class="keyword">this</span>.basis = basis; <span class="keyword">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Integer <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> ToIntFunction&lt;Map.Entry&lt;K,V&gt;&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> IntBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="keyword">this</span>.transformer) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="keyword">this</span>.reducer) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> r = <span class="keyword">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> MapReduceEntriesToIntTask&lt;K,V&gt;</span><br><span class="line">                     (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; )</span><br><span class="line">                    r = reducer.applyAsInt(r, transformer.applyAsInt(p));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="keyword">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceEntriesToIntTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceEntriesToIntTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsInt(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapReduceMappingsToIntTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">BulkTask</span>&lt;<span class="title">K</span>,<span class="title">V</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ToIntBiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V&gt; transformer;</span><br><span class="line">        <span class="keyword">final</span> IntBinaryOperator reducer;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> basis;</span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">        MapReduceMappingsToIntTask&lt;K,V&gt; rights, nextRight;</span><br><span class="line">        MapReduceMappingsToIntTask</span><br><span class="line">            (BulkTask&lt;K,V,?&gt; p, <span class="keyword">int</span> b, <span class="keyword">int</span> i, <span class="keyword">int</span> f, Node&lt;K,V&gt;[] t,</span><br><span class="line">             MapReduceMappingsToIntTask&lt;K,V&gt; nextRight,</span><br><span class="line">             ToIntBiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V&gt; transformer,</span><br><span class="line">             <span class="keyword">int</span> basis,</span><br><span class="line">             IntBinaryOperator reducer) &#123;</span><br><span class="line">            <span class="keyword">super</span>(p, b, i, f, t); <span class="keyword">this</span>.nextRight = nextRight;</span><br><span class="line">            <span class="keyword">this</span>.transformer = transformer;</span><br><span class="line">            <span class="keyword">this</span>.basis = basis; <span class="keyword">this</span>.reducer = reducer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Integer <span class="title">getRawResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> ToIntBiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V&gt; transformer;</span><br><span class="line">            <span class="keyword">final</span> IntBinaryOperator reducer;</span><br><span class="line">            <span class="keyword">if</span> ((transformer = <span class="keyword">this</span>.transformer) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (reducer = <span class="keyword">this</span>.reducer) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> r = <span class="keyword">this</span>.basis;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = baseIndex, f, h; batch &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         (h = ((f = baseLimit) + i) &gt;&gt;&gt; <span class="number">1</span>) &gt; i;) &#123;</span><br><span class="line">                    addToPendingCount(<span class="number">1</span>);</span><br><span class="line">                    (rights = <span class="keyword">new</span> MapReduceMappingsToIntTask&lt;K,V&gt;</span><br><span class="line">                     (<span class="keyword">this</span>, batch &gt;&gt;&gt;= <span class="number">1</span>, baseLimit = h, f, tab,</span><br><span class="line">                      rights, transformer, r, reducer)).fork();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = advance()) != <span class="keyword">null</span>; )</span><br><span class="line">                    r = reducer.applyAsInt(r, transformer.applyAsInt(p.key, p.val));</span><br><span class="line">                result = r;</span><br><span class="line">                CountedCompleter&lt;?&gt; c;</span><br><span class="line">                <span class="keyword">for</span> (c = firstComplete(); c != <span class="keyword">null</span>; c = c.nextComplete()) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    MapReduceMappingsToIntTask&lt;K,V&gt;</span><br><span class="line">                        t = (MapReduceMappingsToIntTask&lt;K,V&gt;)c,</span><br><span class="line">                        s = t.rights;</span><br><span class="line">                    <span class="keyword">while</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        t.result = reducer.applyAsInt(t.result, s.result);</span><br><span class="line">                        s = t.rights = s.nextRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Unsafe mechanics</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe U;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> SIZECTL;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> TRANSFERINDEX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> BASECOUNT;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> CELLSBUSY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> CELLVALUE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> ABASE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ASHIFT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            U = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">            Class&lt;?&gt; k = ConcurrentHashMap.class;</span><br><span class="line">            SIZECTL = U.objectFieldOffset</span><br><span class="line">                (k.getDeclaredField(<span class="string">&quot;sizeCtl&quot;</span>));</span><br><span class="line">            TRANSFERINDEX = U.objectFieldOffset</span><br><span class="line">                (k.getDeclaredField(<span class="string">&quot;transferIndex&quot;</span>));</span><br><span class="line">            BASECOUNT = U.objectFieldOffset</span><br><span class="line">                (k.getDeclaredField(<span class="string">&quot;baseCount&quot;</span>));</span><br><span class="line">            CELLSBUSY = U.objectFieldOffset</span><br><span class="line">                (k.getDeclaredField(<span class="string">&quot;cellsBusy&quot;</span>));</span><br><span class="line">            Class&lt;?&gt; ck = CounterCell.class;</span><br><span class="line">            CELLVALUE = U.objectFieldOffset</span><br><span class="line">                (ck.getDeclaredField(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">            Class&lt;?&gt; ak = Node[].class;</span><br><span class="line">            ABASE = U.arrayBaseOffset(ak);</span><br><span class="line">            <span class="keyword">int</span> scale = U.arrayIndexScale(ak);</span><br><span class="line">            <span class="keyword">if</span> ((scale &amp; (scale - <span class="number">1</span>)) != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;data type scale not a power of two&quot;</span>);</span><br><span class="line">            ASHIFT = <span class="number">31</span> - Integer.numberOfLeadingZeros(scale);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java基础知识</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
</search>
