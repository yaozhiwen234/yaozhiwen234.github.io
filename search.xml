<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java中的深克隆和浅克隆</title>
    <url>/2020/12/18/Java%E4%B8%AD%E7%9A%84%E6%B7%B1%E5%85%8B%E9%9A%86%E5%92%8C%E6%B5%85%E5%85%8B%E9%9A%86/</url>
    <content><![CDATA[<h4 id="Java中的深克隆和浅克隆"><a href="#Java中的深克隆和浅克隆" class="headerlink" title="Java中的深克隆和浅克隆"></a>Java中的深克隆和浅克隆</h4><p><strong>浅克隆：</strong> 创建一个新对象，新对象的属性和原来对象完全相同（新对象的地址 ！= 原来对象的地址），对于非基本类型属性，仍指向原有属性所指向的对象的内存地址。**(String 类型除外)**。</p>
<p><strong>深克隆：</strong> 创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。</p>
<p><strong>浅克隆示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">teacher</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] drive;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> student stu;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clone = <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        teacher tea = <span class="keyword">new</span> teacher();</span><br><span class="line">        <span class="keyword">int</span>[] i = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">        i[<span class="number">0</span>]=<span class="number">88</span>;</span><br><span class="line">        tea.setDrive(i);</span><br><span class="line">        tea.setName(<span class="string">&quot;老师&quot;</span>);</span><br><span class="line">        student student = <span class="keyword">new</span> student();</span><br><span class="line">        student.setAge(<span class="number">33</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;学生&quot;</span>);</span><br><span class="line">        tea.setAge(<span class="number">56</span>);</span><br><span class="line">        tea.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        tea.setStu(student);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">       teacher clone = (teacher) tea.clone();</span><br><span class="line">         i[<span class="number">0</span>] = <span class="number">99</span>;</span><br><span class="line">        clone.setDrive(i);</span><br><span class="line">        clone.setAge(<span class="number">78</span>);</span><br><span class="line">        clone.setName(<span class="string">&quot;克隆老师&quot;</span>);</span><br><span class="line">        clone.getStu().setAge(<span class="number">99</span>);</span><br><span class="line">        clone.getStu().setName(<span class="string">&quot;小学生&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(tea);</span><br><span class="line">        System.out.println(clone);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>结果</li>
</ul>
<p><strong>注意 此处只有基本数据类型被克隆 引用类型的地址并没有发生变化  Sting除外 因为String是final</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">teacher(drive=[<span class="number">99</span>], name=老师, age=<span class="number">56</span>, sex=男, stu=student(name=小学生, age=<span class="number">99</span>))</span><br><span class="line">teacher(drive=[<span class="number">99</span>], name=克隆老师, age=<span class="number">78</span>, sex=男, stu=student(name=小学生,age=<span class="number">99</span>))</span><br></pre></td></tr></table></figure>

<p><strong>附图：</strong></p>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/%E6%B5%85%E6%8B%B7%E8%B4%9D.png" alt="浅克隆UNL"></p>
<p><strong>深克隆示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clone = <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">teacher</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] drive;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> student stu;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意此处</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clone = <span class="keyword">super</span>.clone();</span><br><span class="line">            student clone1 = (student) <span class="keyword">this</span>.getStu().clone();</span><br><span class="line">            <span class="keyword">this</span>.setStu(clone1);</span><br><span class="line">            <span class="keyword">int</span>[] clone2 = <span class="keyword">this</span>.getDrive().clone();</span><br><span class="line">            <span class="keyword">this</span>.setDrive(clone2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      teacher tea = <span class="keyword">new</span> teacher();</span><br><span class="line">      <span class="keyword">int</span>[] i = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">      i[<span class="number">0</span>] = <span class="number">88</span>;</span><br><span class="line">      tea.setDrive(i);</span><br><span class="line">      tea.setName(<span class="string">&quot;老师&quot;</span>);</span><br><span class="line">      student student = <span class="keyword">new</span> student();</span><br><span class="line">      student.setAge(<span class="number">33</span>);</span><br><span class="line">      student.setName(<span class="string">&quot;学生&quot;</span>);</span><br><span class="line">      tea.setAge(<span class="number">56</span>);</span><br><span class="line">      tea.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">      tea.setStu(student);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">      teacher clone = (teacher) tea.clone();</span><br><span class="line">      i[<span class="number">0</span>] = <span class="number">99</span>;</span><br><span class="line">      clone.setDrive(i);</span><br><span class="line">      clone.setAge(<span class="number">78</span>);</span><br><span class="line">      clone.setName(<span class="string">&quot;克隆老师&quot;</span>);</span><br><span class="line">      clone.getStu().setAge(<span class="number">99</span>);</span><br><span class="line">      clone.getStu().setName(<span class="string">&quot;小学生&quot;</span>);</span><br><span class="line"></span><br><span class="line">      System.out.println(tea);</span><br><span class="line">      System.out.println(clone);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>结果</li>
</ul>
<p><strong>注意结果发生明显的变化， 因为没个对象都被克隆 所有的引用都指向了不同的地址</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">teacher(drive=[<span class="number">88</span>], name=老师, age=<span class="number">56</span>, sex=男, stu=student(name=学生, age=<span class="number">33</span>))</span><br><span class="line">teacher(drive=[<span class="number">99</span>], name=克隆老师, age=<span class="number">78</span>, sex=男, stu=student(name=小学生, age=<span class="number">99</span>))</span><br></pre></td></tr></table></figure>

<p><strong>附图：</strong></p>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/%E6%B7%B1%E6%8B%B7%E8%B4%9D.png" alt="深克隆UML"></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java基础知识</category>
      </categories>
      <tags>
        <tag>Java中的深克隆和浅克隆</tag>
      </tags>
  </entry>
  <entry>
    <title>Keepalived</title>
    <url>/2021/03/28/Keepalived/</url>
    <content><![CDATA[<h3 id="Keepalived"><a href="#Keepalived" class="headerlink" title="Keepalived"></a>Keepalived</h3><p><strong>LVS集群的缺点</strong></p>
<p>LVS能够实现四层负载，能够支持足够大的并发量，但使用LVS负载均衡集群有以下两个缺点。</p>
<p>① 如果调度器（Director）挂了（不可用），将会导致整个系统不可用，从而调度器成为了单点故障（SPOF）。</p>
<p>② 调度器（Director）无法对后端RealServer做健康状态检测。因此，如果后端的某一台RealServer挂了，前端调度器将无法得知，仍然会向该RealServer调度请求，导致服务不可用；另外，如果某一台挂了的RealServer但已经恢复正常并重新提供服务时，前端调度器也无法得知，并将其加入调度队列。</p>
<p>因此，为了能够使前端调度器（Director）能够冗余、使Director能够对后端各RS做健康状态检测，并按需增删RS，需要引入高可用集群的解决方案。以下介绍的是Keepalived高可用软件。</p>
<p><strong>Keepalived的介绍</strong></p>
<p>什么是keepalived呢？keepalived是实现高可用的一种轻量级的技术手段，主要用来防止单点故障(单点故障是指一旦某一点出现故障就会导致整个系统架构的不可用)的发生。</p>
<p>Keepalived的高可用功能是通过VRRP协议实现的，VRRP是Virtual Router Redundancy Protocol（虚拟路由器冗余协议）的缩写。VRRP的出现是为了解决静态路由单点故障的问题，当某一节点出现故障时，可以防止导致整个网络不可用。Keepalived除了可以高可用LVS之外，还可以作为其他系统网络服务（Nginx、Haproxy等）的高可用解决方案（Keepalived可通过调用vrrp_script来高可用其它服务，并通过调用vrrp_track来追踪每一个服务）。</p>
<p><strong>Keepalived的功能</strong></p>
<p>Keepalived有三个重要功能，如下。</p>
<ul>
<li>高可用系统网络服务。</li>
</ul>
<p>Keepalived可以实现在两台或多台主机之间的故障切换转移。如果在两台主机中都安装了Keepalived，当正常工作时，有一台主机工作为Master角色，另一台主机工作为Backup角色。角色为Master的主机获得所有资源（VIP资源、服务资源）并向用户提供服务，角色为Backup的主机不提供服务而仅作为Master主机的热备。当角色为Master的主机出现故障时，角色为Backup的主机将自动接管Master主机的所有资源（VIP资源、服务资源）并开始工作。当Master主机故障修复完成时，将重新接管原来的资源和工作，而Backup主机则释放Master主机故障时它接管的资源和工作，各自恢复原来的角色。</p>
<ul>
<li>实现对LVS集群中各RealServer的健康状态进行检测。</li>
</ul>
<p>Keepalived可以通过在自身配置文件keepalived.conf中配置LVS集群服务中各台RealServer的IP地址和相关参数，并可以通过网络层、传输层和应用层这三层进行探测各RealServer的健康状态。当有一台或多台RealServer出现故障而无法提供服务时，Keepalived服务可以把出现故障的RealServer从LVS的正常转发队列中移除，保证不影响用户的访问。而当有RealServer故障修复完成时，Keepalived服务可以将其重新加入LVS的正常转发队列中，向用户提供服务。</p>
<ul>
<li>管理LVS负载均衡软件</li>
</ul>
<p>Keepalived可以读取配置文件，并通过一个更为底层的接口来管理IPVS并生成IPVS规则，这使得LVS的使用更为方便。</p>
<p><strong>Keepalived工作原理</strong></p>
<p>前面提到，Keepalived的高可用功能是通过VRRP协议实现的，要了解Keepalived的工作原理，需要先了解VRRP协议的工作原理。</p>
<p><strong>VRRP</strong></p>
<p>​        VRRP是一种容错性协议，它是通过将多台设备虚拟化成一台设备，如果其中一台设备出现故障，那么另一台设备可以迅速接替其工作，已保证通讯的可靠性和连续性。</p>
<p>​     1.工作原理</p>
<p>​    在企业网当中，PC一般是需要使用”网关”来与外部网络进行通讯，这样如果网关出现了故障那么整一个子网的对外通讯都会被切断，VRRP的出现就能把这个问题很好地解决了，VRRP可以通过把多台设备（路由器、交换机、防火墙等）虚拟化成一台设备，然后通过配置虚拟IP地址作为网关就能实现对网关的备份（这虚拟IP地址是代表整个VRRP组内的所有设备），当其中一台设备出现故障之后，VRRP组内其他设备会通过某些机制来接替故障设备的工作。</p>
<p><strong>VRRP概念</strong></p>
<p><strong>虚拟设备：</strong>由一个”主（Master）”设备和多个”备（Backup）”设备组成的一个虚拟网关。</p>
<p><strong>主设备（Master）：</strong>负责转发数据报文和周期性向备设备发送VRRP协议报文。</p>
<p><strong>备设备（Backup）：</strong>不负责转发数据报文，在Master设备发生故障的时候会通过选举形式成为新的Master设备，该角色会接收来自Master设备的VRRP报文并加以分析。</p>
<p><strong>VRID：</strong>用来表示一个VRRP组。</p>
<p><strong>虚拟IP：</strong>配置在虚拟设备上的虚拟IP地址，一个虚拟设备可以拥有一个或者多个虚拟IP地址。</p>
<p><strong>IP地址拥有者：</strong>分配给虚拟设备的虚拟IP的真实拥有者（例如：分配个虚拟路由的IP为192.168.1.1，但是这个IP已经分配给物理接口G0/0/1这个接口那么这个接口就是”IP拥有者”），IP拥有者会直接跳过选举成为Master，并且是不可抢占的。</p>
<p><strong>虚拟MAC地址：</strong>由虚拟设备生成的虚拟MAC地址，每一个虚拟设备都会自动生成一个虚拟MAC地址，这个MAC地址是用于虚拟设备处理ARP报文的。</p>
<p><strong>优先级：</strong>用于表示物理设备的优先级，这个参数用于Master的选举，取值范围是1-254，这个有优先级有两个比较特殊的值，分别是0和255，优先级0是由原来Master设备发送的，这个优先级是声明此设备不再参与VRRP组。优先级为255的是IP拥有者的优先级，拥有这个优先级会直接成为Master。<strong>（优先级数值越低优先级则越高）</strong></p>
<p><strong>抢占模式：</strong>当Backup 设备接收到的VRRP报文通过分析得出当前Master设备的优先级低于Backup设备，则Backup设备会切换为Master设备。</p>
<p><strong>工作流程</strong></p>
<p>VRRP备份组会通过优先级选举出Master，Master会使用虚拟MAC发送ARP报文，使与Master连接的主机或者客户端建立与虚拟MAC对应的ARP映射表，同时Master会周期性发布VRRP报文向所有Backup通告其配置信息与工作状态。</p>
<p>如果当前Master出现故障，Backup设备将会在MASTER_DOWN_INTERVAL定时器超时或者其他联动技术检测到Master出现故障时则会根据Backup组内的成员的优先级选举出新的Master，如果Backup只有一台设备则直接成为Master。</p>
<p>新的Master使用虚拟MAC发送ARP报文，使连接在当前VRRP组内的客户端或者设备刷新其ARP映射表。</p>
<p>如果原来的Master从故障中恢复过来，如果其优先级为255则会直接切换到Master，若不是则会恢复到Backup状态，如果当前为抢占模式，当原Master接收到新Master的VRRP报文发现其优先级高于原Master则原Master会直接成为Master。如果处于非抢占模式，则原Master会在新Master出现故障时通过选举等方式成为Master。</p>
<p><strong>VRRP选举</strong></p>
<p>VRRP通过优先级来确定设备成为Master或者Backup，优先级取值越低，则优先级越高。</p>
<p>初始创建的VRRP设备都处于初始状态，在该状态下，如果设备的优先级为255，则直接成为Master并且跳过接下来的选举，若不是则会切换到Backup状态，然后会等待MASTER_DOWN_INTERVAL超时后成为Master。</p>
<p>首先切换到Master的设备会通过VRRP报文获取其他设备的优先级，然后通过以下规则进行选举：</p>
<ol>
<li>如果Backup设备接收到来自Master的VRRP报文，发现其优先级数值低于自身，则继续处于Backup状态。</li>
<li>如果Backup设备接收到来自Master的VRRP报文，发现其优先级数值高于自身，则当前Backup设备会切换到Master，而原Master设备会切换到Backup。如果在非抢占模式下，Backup设备仍然会处于Backup状态。</li>
<li>如果同时有多个设备切换到Master，则会互相通过VRRP报文确定其优先级，优先级高的则成为Master，若优先级一样，则对比IP地址，IP地址大的则成为Master。</li>
</ol>
<p> <strong>VRRP状态通告</strong></p>
<p>Master设备会周期性发送VRRP报文，通告其配置信息与工作状态，Backup则会接收并处理VRRP报文确定Master设备的工作状态。</p>
<p>当Master主动退出VRRP组是，会发送优先级为0的报文通知所有的Backup设备，Backup设备接收到之后会直接切换到Master状态，若Backup组内有多台设备则通过上述选举选出新的Master设备，而不需要等待MASTER_DOWN_INTERVAL超时后再进行切换或者选举。</p>
<p>当Master设备由于故障不能发送VRRP报文，所有的Backup设备都需要等待MASTER_DOWN_INTERVAL 超时后才会认为Master设备出现故障，之后才切换到Master。</p>
<h3 id="如何保证单台服务器的可靠性"><a href="#如何保证单台服务器的可靠性" class="headerlink" title="如何保证单台服务器的可靠性"></a><strong>如何保证单台服务器的可靠性</strong></h3><p><strong>可以借用VRRP的两种模式</strong></p>
<ul>
<li><p>主备备份模式</p>
</li>
<li><p>负载分担模式</p>
</li>
</ul>
<h3 id="主备备份模式："><a href="#主备备份模式：" class="headerlink" title="主备备份模式："></a><strong>主备备份模式：</strong></h3><p>主备备份模式就是只由Master设备负责转发数据，而Backup设备则处于待机备份模式不参与数据转发，当Master设备出现故障时才会切换到Master进行数据转发。</p>
<p>参照下图，正常情况下只有SW1转发数据，而SW2则处于待机状态，SW1会周期发送VRRP报文告知SW2自身的配置信息和工作状态，如果SW1发生故障，则SW2会自动切换到到Master继续进行数据转发等。</p>
<p>而当SW1恢复之后，若当前为抢占模式，若SW1的优先级为255那么SW1会直接成为Master否则会先切换到Backup然后再切换到Master。</p>
<pre class="mermaid">graph TD
A[pc]  
      A --> |客户端的情求| C[SW3]
      C -->  B[Master   SW1]
      C -->  f[Backup SW2]
      B --> c[SW3]
      f --> c[R]</pre>





<h3 id="负载分担模式："><a href="#负载分担模式：" class="headerlink" title="负载分担模式："></a><strong>负载分担模式：</strong></h3><p>上述的主备备份模式，若SW1一直正常工作，那么SW2则长期处于待机状态，显然这种做法比较浪费，所以一般会采用负载分担模式，负载分到模式会是SW2都处于工作状态。</p>
<p>参照下图，负载分担模式是创建两个VRRP组分别为A组和B组，A组的Master为SW1，Backup为SW2，而B组的Master为SW2，Backup为SW1，通过创建多个拥有不同虚拟IP的VRRP组，为不同的VLAN指定网关实现负载分担。</p>
<pre class="mermaid">graph TD

A[pc1]  
      D[pc2]
      A --> |客户端的情求| C[SW3]
      D --> |客户端的情求| C[vlan 10 192.168.10.1 </br> vlan 20   192.168.20.1</br>  SW3]
      C -->  B[Master:vlan 10 </br> backup:vlan 20 </br>  SW1]  
      C -->  f[Master:vlan 20 </br> backup:vlan 10 </br>  SW2]
      f --> E[R]
      B --> E[R]</pre>

<p>参照上图，在VLAN10当中Master是SW1，Backup为SW2，两台交换机都分别创建vlan10和vlan20 并且分配好IP地址，正常情况下vlan10的客户端会通过SW1访问R1，vlan20的客户端会通过SW2访问R1这样就实现了负载分担，如果SW1出现故障，那么SW2会成为vlan10的Master（同时也是vlan20的Master），接替SW1的工作，而vlan10的客户端也会通过SW2访问R1，而SW2故障则同理。</p>
<p> <strong>Keepalived的配置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主备服务安装Keepalived</span><br><span class="line">	yum install keepalived ipvsadm -y</span><br><span class="line">	</span><br><span class="line"> 修改配置文件：</span><br><span class="line">		cd  &#x2F;etc&#x2F;keepalived&#x2F;</span><br><span class="line">		cp keepalived.conf keepalived.conf.bak</span><br><span class="line">		vi keepalived.conf</span><br><span class="line"></span><br><span class="line">			node01:</span><br><span class="line">			vrrp：虚拟路由冗余协议！</span><br><span class="line">				vrrp_instance VI_1 &#123;</span><br><span class="line">					state MASTER     &#x2F;&#x2F;MASTER&#x2F; BACKUP</span><br><span class="line">					interface eth0  &#x2F;&#x2F;网关接口</span><br><span class="line">					virtual_router_id 51</span><br><span class="line">					priority 100 &#x2F;&#x2F;权重配置	100&#x2F; 50</span><br><span class="line">					advert_int 1</span><br><span class="line">					authentication &#123;</span><br><span class="line">						auth_type PASS</span><br><span class="line">						auth_pass 1111</span><br><span class="line">					&#125;</span><br><span class="line">					virtual_ipaddress &#123;</span><br><span class="line">						192.168.150.100&#x2F;24 dev eth0 label  eth0:3     &#x2F;&#x2F;虚拟IP</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">&#x2F;&#x2F;配置入包规则</span><br><span class="line">			virtual_server 192.168.150.100 80 &#123;</span><br><span class="line">				delay_loop 6</span><br><span class="line">				lb_algo rr   &#x2F;&#x2F;负载机制  rr轮询</span><br><span class="line">				lb_kind DR   &#x2F;&#x2F;模式</span><br><span class="line">				nat_mask 255.255.255.0</span><br><span class="line">&#x2F;&#x2F;在50秒内如果同一个用户有多次的请求发送过来则向固定的一台服务负载</span><br><span class="line">				persistence_timeout 50  </span><br><span class="line">				protocol TCP</span><br><span class="line">&#x2F;&#x2F; 出包规则</span><br><span class="line">				real_server 192.168.150.12 80 &#123;</span><br><span class="line">					weight 1</span><br><span class="line">					HTTP_GET &#123;</span><br><span class="line">						url &#123;</span><br><span class="line">						  path &#x2F;</span><br><span class="line">						  status_code 200</span><br><span class="line">						&#125;</span><br><span class="line">						connect_timeout 3</span><br><span class="line">						nb_get_retry 3</span><br><span class="line">						delay_before_retry 3</span><br><span class="line">					&#125;   </span><br><span class="line">				&#125;       </span><br><span class="line">				real_server 192.168.150.13 80 &#123;</span><br><span class="line">					weight 1</span><br><span class="line">					HTTP_GET &#123;</span><br><span class="line">						url &#123;</span><br><span class="line">						  path &#x2F;</span><br><span class="line">						  status_code 200</span><br><span class="line">						&#125;</span><br><span class="line">						connect_timeout 3</span><br><span class="line">						nb_get_retry 3</span><br><span class="line">						delay_before_retry 3</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br></pre></td></tr></table></figure>



<h3 id="详细参考https-www-cnblogs-com-wuweidong-p-13804180-html"><a href="#详细参考https-www-cnblogs-com-wuweidong-p-13804180-html" class="headerlink" title="详细参考https://www.cnblogs.com/wuweidong/p/13804180.html"></a>详细参考<a href="https://www.cnblogs.com/wuweidong/p/13804180.html">https://www.cnblogs.com/wuweidong/p/13804180.html</a></h3><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>LVS</title>
    <url>/2021/03/21/LVS/</url>
    <content><![CDATA[<h3 id="LVS的介绍"><a href="#LVS的介绍" class="headerlink" title="LVS的介绍"></a>LVS的介绍</h3><p><strong>LVS是什么？</strong><br>LVS（Linux Virtual Server，Linux虚拟服务器）是由章文嵩开发的一款开源软件（遵循GPL协议）。LVS工作在layer 4，又称为四层路由/四层交换，能够根据请求报文的目标IP地址和目标PORT将其调度转发至后端的某台服务器上，调度转发是根据调度算法来进行的。</p>
<p>LVS由两部分组成，分别是工作在内核空间的ipvs框架和工作在用户空间的ipvsadm命令。ipvsadm是工作在用户空间的命令行工具，用于管理集群服务及集群服务上的Real Server（RS），而ipvs则是工作于内核上的netfilter的INPUT钩子上的程序，其功能是根据用户定义的集群实现对请求报文的转发。</p>
<p>LVS支持基于TCP、UDP、SCTP、AH、EST、AH_EST等协议进行调度。</p>
<p><strong>为什么要使用LVS？</strong></p>
<p>LVS是负载均衡能力最强的一款软件，对于选择LVS作为负载均衡的原因总结如下。</p>
<p>1、相比于Nginx、Haproxy等负载均衡器，LVS支持较大的并发量。Nginx、Haproxy是工作在七层的负载均衡器，因此需要监听在一个端口上，同时对于每一个客户端都需要打开一个套接字文件来接受请求数据，当在应用层分析完数据时，有需要扮演成客户端角色向后端的服务器主机发送请求报文，不仅需要打开大量套接字文件，还需要有多个随机端口可以使用，而端口数最多只有65535个，并且其中有一部分端口是不能使用的。因此，工作在七层的负载均衡软件（如Nginx、Haproxy等）的最大并发数受限于能够打开的套接字文件数（内核需要打开很多的文件描述符来维护）以及能使用的随机端口数。对于LVS而言，因此它工作在四层，所以不需要监听在某个端口以响应客户端请求，因此不需要打开套接字接受和发送数据，同时也不需要使用端口，所有功能均在ipvs中实现，因此LVS的性能更高，支持的并发量更大。据统计，LVS的最大并发量可以达到400~500w。</p>
<p>2、LVS是一款开源且免费的软件，结合Linux使用可以大大降低企业的应用成本。</p>
<p>3、LVS具有可伸缩性。当一台服务器负载压力增长时，系统可以在不降低服务质量的情况下通过扩展来满足需求。</p>
<p>4、LVS具有高可靠性。这在国内很多大型的、关键性的Web站点实践中得到印证。</p>
<h3 id="LVS的三种搭建模型"><a href="#LVS的三种搭建模型" class="headerlink" title="LVS的三种搭建模型"></a>LVS的三种搭建模型</h3><ul>
<li><p><strong>NAT模式</strong><br>优点：集群中的物理服务器可以使用任何支持TCP/IP操作系统，物理服务器可以分配Internet的保留私有地址，只有负载均衡器需要一个合法的IP地址。</p>
<p>不足：扩展性有限。当服务器节点（普通PC服务器）数据增长到20个或更多时,负载均衡器将成为整个系统的瓶颈，因为所有的请求包和应答包都需要经过负载均衡器再生。假使TCP包的平均长度是536字节的话，平均包再生延迟时间大约为60us（在Pentium处理器上计算的，采用更快的处理器将使得这个延迟时间变短），负载均衡器的最大容许能力为8.93M/s，假定每台物理服务器的平台容许能力为400K/s来计算，负责均衡器能为22台物理服务器计算。<br><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/data/%E7%BD%91%E7%BB%9C/lvs%20nat%E6%A8%A1%E5%9E%8B.png" alt="NAT模式"></p>
</li>
<li><p><strong>TUN模式</strong><br>我们发现，许多Internet服务（例如WEB服务器）的请求包很短小，而应答包通常很大。<br>优点：负载均衡器只负责将请求包分发给物理服务器，而物理服务器将应答包直接发给用户。所以，负载均衡器能处理很巨大的请求量，这种方式，一台负载均衡能为超过100台的物理服务器服务，负载均衡器不再是系统的瓶颈。使用VS-TUN方式，如果你的负载均衡器拥有100M的全双工网卡的话，就能使得整个Virtual Server能达到1G的吞吐量。<br>不足：但是，这种方式需要所有的服务器支持”IP Tunneling”(IP Encapsulation)协议，我仅在Linux系统上实现了这个，如果你能让其它操作系统支持，还在探索之中。<br><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/data/%E7%BD%91%E7%BB%9C/lvs%20TUN.png" alt="TUN"></p>
</li>
<li><p><strong>DR模式</strong><br>优点：和VS-TUN一样，负载均衡器也只是分发请求，应答包通过单独的路由方法返回给客户端。与VS-TUN相比，VS-DR这种实现方式不需要隧道结构，因此可以使用大多数操作系统做为物理服务器，其中包括：Linux 2.0.36、2.2.9、2.2.10、2.2.12；Solaris 2.5.1、2.6、2.7；FreeBSD 3.1、3.2、3.3；NT4.0无需打补丁；IRIX 6.5；HPUX11等。<br>不足：要求负载均衡器的网卡必须与物理网卡在一个物理段上<br><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/data/%E7%BD%91%E7%BB%9C/lvs%20DR.png" alt="DR"></p>
</li>
</ul>
<h3 id="使用LVS搭建基于四层网络模型的负载均衡器-DR模式"><a href="#使用LVS搭建基于四层网络模型的负载均衡器-DR模式" class="headerlink" title="使用LVS搭建基于四层网络模型的负载均衡器 DR模式"></a>使用LVS搭建基于四层网络模型的负载均衡器 DR模式</h3><p><strong>命令解释</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rr:轮循</span><br><span class="line">wrr:</span><br><span class="line">dh:</span><br><span class="line">sh:</span><br><span class="line"></span><br><span class="line">动态调度方法：</span><br><span class="line">lc: 最少连接</span><br><span class="line">wlc: 加权最少连接</span><br><span class="line">sed: 最短期望延迟</span><br><span class="line">nq: never queue</span><br><span class="line">LBLC: 基于本地的最少连接</span><br><span class="line">LBLCR: 基于本地的带复制功能的最少连接</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><figcaption><span>：</span></figcaption><table><tr><td class="code"><pre><span class="line">kernel parameter:</span><br><span class="line">目标mac地址为全F，交换机触发广播</span><br><span class="line">  &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;*IF*&#x2F;</span><br><span class="line">arp_ignore: 定义接收到ARP请求时的响应级别；</span><br><span class="line">  0：只要本地配置的有相应地址，就给予响应；</span><br><span class="line">  1：仅在请求的目标(MAC)地址配置请求</span><br><span class="line">        到达的接口上的时候，才给予响应；</span><br><span class="line"></span><br><span class="line">arp_announce：定义将自己地址向外通告时的通告级别；</span><br><span class="line">  0：将本地任何接口上的任何地址向外通告；</span><br><span class="line">  1：试图仅向目标网络通告与其网络匹配的地址；</span><br><span class="line">  2：仅向与本地接口上地址匹配的网络进行通告；</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install ipvsadm -y</span><br><span class="line"></span><br><span class="line">管理集群服务</span><br><span class="line">添加：-A -t|u|f service-address [-s scheduler]</span><br><span class="line">-t: TCP协议的集群</span><br><span class="line">-u: UDP协议的集群</span><br><span class="line">service-address:     IP:PORT</span><br><span class="line">-f: FWM: 防火墙标记</span><br><span class="line">service-address: Mark Number</span><br><span class="line">修改：-E</span><br><span class="line">删除：-D -t|u|f service-address</span><br><span class="line"></span><br><span class="line">ipvsadm -A -t 192.168.9.100:80 -s rr</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加：ipvsadm  -a -t|u|f service-address -r server-address [-g|i|m] [-w weight]</span><br><span class="line">  -t|u|f service-address：事先定义好的某集群服务</span><br><span class="line">  -r server-address: 某RS的地址，在NAT模型中，可使用IP：PORT实现端口映射；</span><br><span class="line">  [-g|i|m]: LVS类型 </span><br><span class="line">  -g: DR</span><br><span class="line">  -i: TUN</span><br><span class="line">  -m: NAT</span><br><span class="line">  [-w weight]: 定义服务器权重</span><br><span class="line">修改：-e</span><br><span class="line">删除：-d -t|u|f service-address -r server-address</span><br><span class="line"># ipvsadm -a -t 172.16.100.1:80 -r 192.168.10.8 –g</span><br><span class="line"># ipvsadm -a -t 172.16.100.1:80 -r 192.168.10.9 -g</span><br><span class="line">查看</span><br><span class="line">  -L|l</span><br><span class="line">  -n: 数字格式显示主机地址和端口</span><br><span class="line">  --stats：统计数据</span><br><span class="line">  --rate: 速率</span><br><span class="line">  --timeout: 显示tcp、tcpfin和udp的会话超时时长</span><br><span class="line">  -:c 显示当前的ipvs连接状况</span><br><span class="line">删除所有集群服务</span><br><span class="line">  -C：清空ipvs规则</span><br><span class="line">保存规则</span><br><span class="line">  -S</span><br><span class="line"># ipvsadm -S &gt; &#x2F;path&#x2F;to&#x2F;somefile</span><br><span class="line">载入此前的规则：</span><br><span class="line">  -R</span><br><span class="line"># ipvsadm -R &lt; &#x2F;path&#x2F;form&#x2F;somefile </span><br></pre></td></tr></table></figure>

<ul>
<li><strong>拓扑图</strong><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/data/%E7%BD%91%E7%BB%9C/lvs-DR%E6%90%AD%E5%BB%BA%E6%A8%A1%E5%9E%8B.png" alt="lvs-DR拓扑图"></li>
<li><strong>开始搭建</strong></li>
</ul>
<p>1.在192.168.150.11 中添加192.168.150.100的网卡</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加网卡  ifconfig eth0:2 192.168.150.100&#x2F;24</span><br><span class="line"></span><br><span class="line">注意&#x2F;24代表子网掩码是255.255.255.1</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>   <font color='red'> 删除 eth0:2网卡 ifconfig eth0:2 down </font></p>
<p> 2.调192.168.150.12  和 192.168.150.13的内核协议</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo 1  &gt;  &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;eth0&#x2F;arp_ignore </span><br><span class="line">echo 1  &gt;  &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;all&#x2F;arp_ignore </span><br><span class="line">echo 2 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;eth0&#x2F;arp_announce </span><br><span class="line">echo 2 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;all&#x2F;arp_announce </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>3.配置192.168.150.12  和 192.168.150.13环行路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig lo:2 192.168.150.100 netmask 255.255.255.255</span><br></pre></td></tr></table></figure>
<p>4.在 192.168.150.12 和 192.168.150.13中安装 httpd</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install httpd -y</span><br><span class="line">启动  service httpd start</span><br><span class="line">创建主页vi &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html</span><br></pre></td></tr></table></figure>
<p>5在浏览器中输入192.168.150.12:80测试</p>
<p>6.在192.168.150.11 中安装 ipvsadm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install ipvsadm -y</span><br><span class="line">添加进包的规则：ipvsadm -A  -t  192.168.150.100:80  -s rr</span><br><span class="line">添加负载的规则:</span><br><span class="line">ipvsadm -a  -t 192.168.150.100:80  -r  192.168.150.12 -g -w 1</span><br><span class="line">ipvsadm -a  -t 192.168.150.100:80  -r  192.168.150.13 -g -w 1</span><br><span class="line"></span><br><span class="line">查看规则：ipvsadm  -ln</span><br></pre></td></tr></table></figure>
<p>7.验证：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">浏览器访问  192.168.150.100   看到负载  F5属性</span><br><span class="line">192.168.150.11：</span><br><span class="line">	netstat -natp   结论看不到socket连接</span><br><span class="line">192.168.150.12~192.168.150.13:</span><br><span class="line">	netstat -natp   结论看到很多的socket连接</span><br><span class="line">192.168.150.11:</span><br><span class="line">	ipvsadm -lnc    查看偷窥记录本</span><br><span class="line">	TCP 00:57  FIN_WAIT    192.168.150.1:51587 192.168.150.100:80 192.168.150.12:80</span><br><span class="line"></span><br><span class="line">	           FIN_WAIT： 连接过，偷窥了所有的包</span><br><span class="line">	           SYN_RECV： 基本上lvs都记录了，证明lvs没事，一定是后边网络层出问题</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>LVS三种搭建模式</title>
    <url>/2021/03/21/LVS%E4%B8%89%E7%A7%8D%E6%90%AD%E5%BB%BA%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="lvs的三种搭建模型"><a href="#lvs的三种搭建模型" class="headerlink" title="lvs的三种搭建模型"></a>lvs的三种搭建模型</h3><ul>
<li><p><strong>NAT模式</strong><br>优点：集群中的物理服务器可以使用任何支持TCP/IP操作系统，物理服务器可以分配Internet的保留私有地址，只有负载均衡器需要一个合法的IP地址。</p>
<p>不足：扩展性有限。当服务器节点（普通PC服务器）数据增长到20个或更多时,负载均衡器将成为整个系统的瓶颈，因为所有的请求包和应答包都需要经过负载均衡器再生。假使TCP包的平均长度是536字节的话，平均包再生延迟时间大约为60us（在Pentium处理器上计算的，采用更快的处理器将使得这个延迟时间变短），负载均衡器的最大容许能力为8.93M/s，假定每台物理服务器的平台容许能力为400K/s来计算，负责均衡器能为22台物理服务器计算。<br><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/data/%E7%BD%91%E7%BB%9C/lvs%20nat%E6%A8%A1%E5%9E%8B.png" alt="NAT模式"></p>
</li>
<li><p><strong>TUN模式</strong><br>我们发现，许多Internet服务（例如WEB服务器）的请求包很短小，而应答包通常很大。<br>优点：负载均衡器只负责将请求包分发给物理服务器，而物理服务器将应答包直接发给用户。所以，负载均衡器能处理很巨大的请求量，这种方式，一台负载均衡能为超过100台的物理服务器服务，负载均衡器不再是系统的瓶颈。使用VS-TUN方式，如果你的负载均衡器拥有100M的全双工网卡的话，就能使得整个Virtual Server能达到1G的吞吐量。<br>不足：但是，这种方式需要所有的服务器支持”IP Tunneling”(IP Encapsulation)协议，我仅在Linux系统上实现了这个，如果你能让其它操作系统支持，还在探索之中。<br><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/data/%E7%BD%91%E7%BB%9C/lvs%20TUN.png" alt="TUN"></p>
</li>
<li><p><strong>DR模式</strong><br>优点：和VS-TUN一样，负载均衡器也只是分发请求，应答包通过单独的路由方法返回给客户端。与VS-TUN相比，VS-DR这种实现方式不需要隧道结构，因此可以使用大多数操作系统做为物理服务器，其中包括：Linux 2.0.36、2.2.9、2.2.10、2.2.12；Solaris 2.5.1、2.6、2.7；FreeBSD 3.1、3.2、3.3；NT4.0无需打补丁；IRIX 6.5；HPUX11等。<br>不足：要求负载均衡器的网卡必须与物理网卡在一个物理段上<br><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/data/%E7%BD%91%E7%BB%9C/lvs%20DR.png" alt="DR"></p>
</li>
</ul>
<h3 id="使用LVS搭建基于四层网络模型的负载均衡器-DR模式"><a href="#使用LVS搭建基于四层网络模型的负载均衡器-DR模式" class="headerlink" title="使用LVS搭建基于四层网络模型的负载均衡器 DR模式"></a>使用LVS搭建基于四层网络模型的负载均衡器 DR模式</h3><p><strong>命令解释</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rr:轮循</span><br><span class="line">wrr:</span><br><span class="line">dh:</span><br><span class="line">sh:</span><br><span class="line"></span><br><span class="line">动态调度方法：</span><br><span class="line">lc: 最少连接</span><br><span class="line">wlc: 加权最少连接</span><br><span class="line">sed: 最短期望延迟</span><br><span class="line">nq: never queue</span><br><span class="line">LBLC: 基于本地的最少连接</span><br><span class="line">LBLCR: 基于本地的带复制功能的最少连接</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><figcaption><span>：</span></figcaption><table><tr><td class="code"><pre><span class="line">kernel parameter:</span><br><span class="line">目标mac地址为全F，交换机触发广播</span><br><span class="line">  &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;*IF*&#x2F;</span><br><span class="line">arp_ignore: 定义接收到ARP请求时的响应级别；</span><br><span class="line">  0：只要本地配置的有相应地址，就给予响应；</span><br><span class="line">  1：仅在请求的目标(MAC)地址配置请求</span><br><span class="line">        到达的接口上的时候，才给予响应；</span><br><span class="line"></span><br><span class="line">arp_announce：定义将自己地址向外通告时的通告级别；</span><br><span class="line">  0：将本地任何接口上的任何地址向外通告；</span><br><span class="line">  1：试图仅向目标网络通告与其网络匹配的地址；</span><br><span class="line">  2：仅向与本地接口上地址匹配的网络进行通告；</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install ipvsadm -y</span><br><span class="line"></span><br><span class="line">管理集群服务</span><br><span class="line">添加：-A -t|u|f service-address [-s scheduler]</span><br><span class="line">-t: TCP协议的集群</span><br><span class="line">-u: UDP协议的集群</span><br><span class="line">service-address:     IP:PORT</span><br><span class="line">-f: FWM: 防火墙标记</span><br><span class="line">service-address: Mark Number</span><br><span class="line">修改：-E</span><br><span class="line">删除：-D -t|u|f service-address</span><br><span class="line"></span><br><span class="line">ipvsadm -A -t 192.168.9.100:80 -s rr</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加：ipvsadm  -a -t|u|f service-address -r server-address [-g|i|m] [-w weight]</span><br><span class="line">  -t|u|f service-address：事先定义好的某集群服务</span><br><span class="line">  -r server-address: 某RS的地址，在NAT模型中，可使用IP：PORT实现端口映射；</span><br><span class="line">  [-g|i|m]: LVS类型 </span><br><span class="line">  -g: DR</span><br><span class="line">  -i: TUN</span><br><span class="line">  -m: NAT</span><br><span class="line">  [-w weight]: 定义服务器权重</span><br><span class="line">修改：-e</span><br><span class="line">删除：-d -t|u|f service-address -r server-address</span><br><span class="line"># ipvsadm -a -t 172.16.100.1:80 -r 192.168.10.8 –g</span><br><span class="line"># ipvsadm -a -t 172.16.100.1:80 -r 192.168.10.9 -g</span><br><span class="line">查看</span><br><span class="line">  -L|l</span><br><span class="line">  -n: 数字格式显示主机地址和端口</span><br><span class="line">  --stats：统计数据</span><br><span class="line">  --rate: 速率</span><br><span class="line">  --timeout: 显示tcp、tcpfin和udp的会话超时时长</span><br><span class="line">  -:c 显示当前的ipvs连接状况</span><br><span class="line">删除所有集群服务</span><br><span class="line">  -C：清空ipvs规则</span><br><span class="line">保存规则</span><br><span class="line">  -S</span><br><span class="line"># ipvsadm -S &gt; &#x2F;path&#x2F;to&#x2F;somefile</span><br><span class="line">载入此前的规则：</span><br><span class="line">  -R</span><br><span class="line"># ipvsadm -R &lt; &#x2F;path&#x2F;form&#x2F;somefile </span><br></pre></td></tr></table></figure>

<ul>
<li><strong>拓扑图</strong><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/data/%E7%BD%91%E7%BB%9C/lvs-DR%E6%90%AD%E5%BB%BA%E6%A8%A1%E5%9E%8B.png" alt="lvs-DR拓扑图"></li>
<li><strong>开始搭建</strong></li>
</ul>
<p>1.在192.168.150.11 中添加192.168.150.100的网卡</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加网卡  ifconfig eth0:2 192.168.150.100&#x2F;24</span><br><span class="line"></span><br><span class="line">注意&#x2F;24代表子网掩码是255.255.255.1</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>   <font color='red'> 删除 eth0:2网卡 ifconfig eth0:2 down </font></p>
<p> 2.调192.168.150.12  和 192.168.150.13的内核协议</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo 1  &gt;  &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;eth0&#x2F;arp_ignore </span><br><span class="line">echo 1  &gt;  &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;all&#x2F;arp_ignore </span><br><span class="line">echo 2 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;eth0&#x2F;arp_announce </span><br><span class="line">echo 2 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;all&#x2F;arp_announce </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>3.配置192.168.150.12  和 192.168.150.13环行路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig lo:2 192.168.150.100 netmask 255.255.255.255</span><br></pre></td></tr></table></figure>
<p>4.在 192.168.150.12 和 192.168.150.13中安装 httpd</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install httpd -y</span><br><span class="line">启动  service httpd start</span><br><span class="line">创建主页vi &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html</span><br></pre></td></tr></table></figure>
<p>5在浏览器中输入192.168.150.12:80测试</p>
<p>6.在192.168.150.11 中安装 ipvsadm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install ipvsadm -y</span><br><span class="line">添加进包的规则：ipvsadm -A  -t  192.168.150.100:80  -s rr</span><br><span class="line">添加负载的规则:</span><br><span class="line">ipvsadm -a  -t 192.168.150.100:80  -r  192.168.150.12 -g -w 1</span><br><span class="line">ipvsadm -a  -t 192.168.150.100:80  -r  192.168.150.13 -g -w 1</span><br><span class="line"></span><br><span class="line">查看规则：ipvsadm  -ln</span><br></pre></td></tr></table></figure>
<p>7.验证：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">浏览器访问  192.168.150.100   看到负载  F5属性</span><br><span class="line">192.168.150.11：</span><br><span class="line">	netstat -natp   结论看不到socket连接</span><br><span class="line">192.168.150.12~192.168.150.13:</span><br><span class="line">	netstat -natp   结论看到很多的socket连接</span><br><span class="line">192.168.150.11:</span><br><span class="line">	ipvsadm -lnc    查看偷窥记录本</span><br><span class="line">	TCP 00:57  FIN_WAIT    192.168.150.1:51587 192.168.150.100:80 192.168.150.12:80</span><br><span class="line"></span><br><span class="line">	           FIN_WAIT： 连接过，偷窥了所有的包</span><br><span class="line">	           SYN_RECV： 基本上lvs都记录了，证明lvs没事，一定是后边网络层出问题</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>http协议</title>
    <url>/2021/03/21/http%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h3><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p>
<p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p>
<p>HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。</p>
<p>HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p>
<h4 id="http协议的特点"><a href="#http协议的特点" class="headerlink" title="http协议的特点"></a>http协议的特点</h4><p>1、简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</p>
<p>2、灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</p>
<p>3.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p>
<p>4.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。<br>5、支持B/S及C/S模式。</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>java8之Stream</title>
    <url>/2020/11/28/java8%E4%B9%8BStream/</url>
    <content><![CDATA[<h3 id="1-Stream介绍"><a href="#1-Stream介绍" class="headerlink" title="1. Stream介绍"></a>1. Stream介绍</h3><p>Stream不是集合元素，它不是数据结构并不保存数据，它是有关算法和计算的，它更像一个高级版本的Iterator。原始版本的Iterator，用户只能显式地一个一个遍历元素并对其执行某些操作；高级版本的Stream，用户只要给出需要对其包含的元素执行什么操作，比如，“过滤掉长度大于 10 的字符串”、“获取每个字符串的首字母”等，Stream会隐式地在内部进行遍历，做出相应的数据转换。Stream就如同一个迭代器（Iterator），单向，不可往复，数据只能遍历一次，遍历过一次后即用尽了。<br>在Java8 中增加了Stream API ，简化了串行或者并行的大批量的操作 。<br>Stream中的数据元素可以是对象引用，或者基本数据类型的值： int  long double  </p>
<h3 id="2-Stream的具体用法"><a href="#2-Stream的具体用法" class="headerlink" title="2. Stream的具体用法"></a>2. Stream的具体用法</h3><h4 id="1-Stream-常用的创建方法"><a href="#1-Stream-常用的创建方法" class="headerlink" title="1. Stream 常用的创建方法"></a>1. Stream 常用的创建方法</h4><pre><code>   ***使用Collection下的 stream() 和 parallelStream() 方法***　　
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">       </span><br><span class="line"> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Returns a sequential &#123;@code Stream&#125; with this collection as its source.(返回一个顺序的流，将此集合作为其源。)</span></span><br><span class="line">  Stream&lt;String&gt; stream = list.stream(); </span><br><span class="line"> <span class="comment">//Returns a possibly parallel &#123;@code Stream&#125; with this collection as its (返回一个可能是并行的流，其中包含此集合)</span></span><br><span class="line">  Stream&lt;String&gt; parallelStream = list.parallelStream();</span><br></pre></td></tr></table></figure>
<ul>
<li><em><strong>使用Arrays 中的 stream() 方法，将数组转成流</strong></em></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] nums = <span class="keyword">new</span> Integer[<span class="number">10</span>];</span><br><span class="line">Stream&lt;Integer&gt; stream = Arrays.stream(nums);</span><br></pre></td></tr></table></figure>

<ul>
<li><em><strong>使用Stream中的静态方法：of()、iterate()、generate()</strong></em></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">Stream&lt;Integer&gt; stream2 = Stream.iterate(<span class="number">0</span>, (x) -&gt; x + <span class="number">2</span>).limit(<span class="number">6</span>);</span><br><span class="line">stream2.forEach(System.out::println); <span class="comment">// 0 2 4 6 8 10</span></span><br><span class="line"></span><br><span class="line">Stream&lt;Double&gt; stream3 = Stream.generate(Math::random).limit(<span class="number">2</span>);</span><br><span class="line">stream3.forEach(System.out::println);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p><em><strong>使用 BufferedReader.lines() 方法，将每行内容转成流</strong></em></p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;D:\\test_stream.txt&quot;</span>));</span><br><span class="line">Stream&lt;String&gt; lineStream = reader.lines();</span><br><span class="line">lineStream.forEach(System.out::println);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p><em><strong>使用 Pattern.splitAsStream() 方法，将字符串分隔成流</strong></em></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pattern pattern = Pattern.compile(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stringStream = pattern.splitAsStream(<span class="string">&quot;a,b,c,d&quot;</span>);</span><br><span class="line">stringStream.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h4 id="2-Stream的中间操作"><a href="#2-Stream的中间操作" class="headerlink" title="2 . Stream的中间操作"></a>2 . Stream的中间操作</h4><ul>
<li><em><strong>筛选与切片</strong></em></li>
</ul>
<p>​       filter：过滤流中的某些元素<br>　　 limit(n)：获取n个元素<br>　　 skip(n)：跳过n个元素，配合limit(n)可实现分页<br>　　 distinct：通过流中元素的 hashCode() 和 equals() 去除重复元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">14</span>);</span><br><span class="line">  </span><br><span class="line">Stream&lt;Integer&gt; newStream = stream.filter(s -&gt; s &gt; <span class="number">5</span>) <span class="comment">//6 6 7 9 8 10 12 14 14</span></span><br><span class="line">.distinct() <span class="comment">//6 7 9 8 10 12 14</span></span><br><span class="line">.skip(<span class="number">2</span>) <span class="comment">//9 8 10 12 14</span></span><br><span class="line">.limit(<span class="number">2</span>); <span class="comment">//9 8</span></span><br><span class="line">newStream.forEach(System.out::println);</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Student&gt; stuList = stuList();</span><br><span class="line"> </span><br><span class="line">	<span class="comment">// 需要筛选的条件：从stuList中筛选出年龄为21和22的学生</span></span><br><span class="line">	List&lt;Integer&gt; ageList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">	ageList.add(<span class="number">21</span>);</span><br><span class="line">	ageList.add(<span class="number">22</span>);</span><br><span class="line"> </span><br><span class="line">	<span class="comment">// JDK1.8提供了lambda表达式， 可以从stuList中过滤出符合条件的结果。</span></span><br><span class="line">	<span class="comment">// 定义结果集</span></span><br><span class="line">	List&lt;Student&gt; result = <span class="keyword">null</span>;</span><br><span class="line">	result = stuList.stream()</span><br><span class="line">			.filter((Student s) -&gt; ageList.contains(s.getAge()))</span><br><span class="line">			.collect(Collectors.toList());</span><br><span class="line">   </span><br><span class="line">	<span class="comment">// 打印原有stuList集合中的数据</span></span><br><span class="line">	System.out.println(<span class="string">&quot;原有stuList集合中的数据&quot;</span>);</span><br><span class="line">	stuList.forEach((Student s) -&gt; System.out.println(s.getName() + <span class="string">&quot;---&gt;&quot;</span> + s.getAge()));</span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<ul>
<li><em><strong>映射</strong></em></li>
</ul>
<p>​       map：接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。<br>　   flatMap：接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;a,b,c&quot;</span>, <span class="string">&quot;1,2,3&quot;</span>);</span><br><span class="line">  </span><br><span class="line"><span class="comment">//将每个元素转成一个新的且不带逗号的元素</span></span><br><span class="line">Stream&lt;String&gt; s1 = list.stream().map(s -&gt; s.replaceAll(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">s1.forEach(System.out::println); <span class="comment">// abc 123</span></span><br><span class="line">  </span><br><span class="line">Stream&lt;String&gt; s3 = list.stream().flatMap(s -&gt; &#123;</span><br><span class="line"><span class="comment">//将每个元素转换成一个stream</span></span><br><span class="line">String[] split = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; s2 = Arrays.stream(split);</span><br><span class="line"><span class="keyword">return</span> s2;</span><br><span class="line">&#125;);</span><br><span class="line">s3.forEach(System.out::println); <span class="comment">// a b c 1 2 3</span></span><br></pre></td></tr></table></figure>

<ul>
<li><em><strong>排序</strong></em> </li>
</ul>
<p>​        sorted()：自然排序，流中元素需实现Comparable接口<br>　　sorted(Comparator com)：定制排序，自定义Comparator排序器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;ff&quot;</span>, <span class="string">&quot;dd&quot;</span>);</span><br><span class="line"><span class="comment">//String 类自身已实现Compareable接口</span></span><br><span class="line">list.stream().sorted().forEach(System.out::println);<span class="comment">// aa dd ff</span></span><br><span class="line">  </span><br><span class="line">Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>);</span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;bb&quot;</span>, <span class="number">20</span>);</span><br><span class="line">Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;aa&quot;</span>, <span class="number">30</span>);</span><br><span class="line">Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;dd&quot;</span>, <span class="number">40</span>);</span><br><span class="line">List&lt;Student&gt; studentList = Arrays.asList(s1, s2, s3, s4);</span><br><span class="line">  </span><br><span class="line"><span class="comment">//自定义排序：先按姓名升序，姓名相同则按年龄升序</span></span><br><span class="line">studentList.stream().sorted(</span><br><span class="line">(o1, o2) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (o1.getName().equals(o2.getName())) &#123;</span><br><span class="line"><span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">).forEach(System.out::println);　</span><br></pre></td></tr></table></figure>
<ul>
<li><em><strong>消费</strong></em></li>
</ul>
<p>　　peek：如同于map，能得到流中的每一个元素。但map接收的是一个Function表达式，有返回值；而peek接收的是Consumer表达   式，没有返回值。</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>);</span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;bb&quot;</span>, <span class="number">20</span>);</span><br><span class="line">List&lt;Student&gt; studentList = Arrays.asList(s1, s2);</span><br><span class="line">  </span><br><span class="line">studentList.stream()</span><br><span class="line">.peek(o -&gt; o.setAge(<span class="number">100</span>))</span><br><span class="line">.forEach(System.out::println);</span><br><span class="line">  </span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line">Student&#123;name=<span class="string">&#x27;aa&#x27;</span>, age=<span class="number">100</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">&#x27;bb&#x27;</span>, age=<span class="number">100</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-Stream的终止操作-常用函数"><a href="#3-Stream的终止操作-常用函数" class="headerlink" title="3. Stream的终止操作 (常用函数)"></a>3. Stream的终止操作 (常用函数)</h4><ul>
<li><em><strong>匹配 聚合操作</strong></em></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">boolean</span> allMatch = list.stream().allMatch(e -&gt; e &gt; <span class="number">10</span>); <span class="comment">//false</span></span><br><span class="line"><span class="keyword">boolean</span> noneMatch = list.stream().noneMatch(e -&gt; e &gt; <span class="number">10</span>); <span class="comment">//true</span></span><br><span class="line"><span class="keyword">boolean</span> anyMatch = list.stream().anyMatch(e -&gt; e &gt; <span class="number">4</span>); <span class="comment">//true</span></span><br><span class="line">  </span><br><span class="line">Integer findFirst = list.stream().findFirst().get(); <span class="comment">//1</span></span><br><span class="line">Integer findAny = list.stream().findAny().get(); <span class="comment">//1</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">long</span> count = list.stream().count(); <span class="comment">//5</span></span><br><span class="line">Integer max = list.stream().max(Integer::compareTo).get(); <span class="comment">//5</span></span><br><span class="line">Integer min = list.stream().min(Integer::compareTo).get(); <span class="comment">//1　</span></span><br></pre></td></tr></table></figure>

<ul>
<li><em><strong>规约操作(reduce)</strong></em></li>
</ul>
<p> 三个重载的方法：</p>
<p>  1.Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator);</p>
<p>  2.T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</p>
<p>  3.&lt;U&gt; U reduce(U identity, BiFunction&lt;U, ? super T, U&gt; accumulator, BinaryOperator&lt;U&gt; combiner);用在流并发操作的时候，将每个线程前两个参数形成的结果result集合并为一个。所以第三个参数是一个BinaryOperator函数接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//reduce(String identity, BinaryOperator&lt;String&gt; accumulator) 第一个参数相当于起始值 ，第二个参数是二元运算函数接口</span></span><br><span class="line">String s1 = custs.stream().map(Cust::getCustName).reduce(<span class="string">&quot;&quot;</span>, (x,y)-&gt;x+<span class="string">&quot;,&quot;</span>+y).replaceFirst(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">System.out.println(s1);</span><br><span class="line">		</span><br><span class="line"><span class="comment">//reduce(BinaryOperator&lt;String&gt; accumulator) 参数是二元运算函数接口，因为没有给默认值，所以为了避免使用时空指针异常，返回的是Optional</span></span><br><span class="line">Optional&lt;String&gt; opt = custs.stream().map(Cust::getCustName).reduce((x,y)-&gt;x+<span class="string">&quot;,&quot;</span>+y);</span><br><span class="line">String s2 = opt.get().replaceFirst(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><em><strong>收集操作</strong></em><br><em><strong>collect:</strong></em> 接收一个Collector实例，将流中元素收集成另外一个数据结构。<br><em><strong>Collector&lt;T, A, R&gt;:</strong></em> 是一个接口，有以下5个抽象方法：<br>***Supplier&lt;A&gt; supplier():***创建一个结果容器A<br>***BiConsumer&lt;A, T&gt; accumulator():***消费型接口，第一个参数为容器A，第二个参数为流中元素T。<br>***BinaryOperator&lt;A&gt; combiner():***函数接口，该参数的作用跟上一个方法(reduce)中的combiner  参数一样，将并行流中各 个子进程          的运行结果(accumulator函数操作后的容器A)进行合并。<br>***Function&lt;A, R&gt; finisher():***函数式接口，参数为：容器A，返回类型为：collect方法最终想要的结果R。<br><em><strong>Set&lt;Characteristics&gt; characteristics():</strong></em>  返回一个不可变的Set集合，用来表明该Collector的特征。有以下三个特征：<br>***CONCURRENT:***表示此收集器支持并发。<br>***UNORDERED:***表示该收集操作不会保留流中元素原有的顺序。<br>***IDENTITY_FINISH:***表示finisher参数只是标识而已，可忽略。</li>
</ul>
<p><em><strong>Collector 工具库：Collectors</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;bb&quot;</span>, <span class="number">20</span>,<span class="number">2</span>);</span><br><span class="line">Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;cc&quot;</span>, <span class="number">10</span>,<span class="number">3</span>);</span><br><span class="line">List&lt;Student&gt; list = Arrays.asList(s1, s2, s3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//装成list</span></span><br><span class="line">List&lt;Integer&gt; ageList = list.stream().map(Student::getAge).collect(Collectors.toList()); <span class="comment">// [10, 20, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//转成set</span></span><br><span class="line">Set&lt;Integer&gt; ageSet = list.stream().map(Student::getAge).collect(Collectors.toSet()); <span class="comment">// [20, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//转成map,注:key不能相同，否则报错</span></span><br><span class="line">Map&lt;String, Integer&gt; studentMap = list.stream().collect(Collectors.toMap(Student::getName, Student::getAge)); <span class="comment">// &#123;cc=10, bb=20, aa=10&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//转成map 如何key相同 是否覆盖  (oldVal ,newVal)-&gt;newVal ? oldVal</span></span><br><span class="line"> Map&lt;String, Integer&gt; studentMap = list.stream().collect(Collectors.toMap(Student::getName, Student::getAge, (oldVal ,newVal)-&gt;newVal)); </span><br><span class="line"></span><br><span class="line"><span class="comment">//转为 LinkedHashMap   (LinkedHashMap::new)</span></span><br><span class="line">LinkedHashMap&lt;String, Integer&gt; collect = list.stream().collect(Collectors.toMap(Student::getName, Student::getAge, (oldVal, newVal) -&gt; newVal, LinkedHashMap::<span class="keyword">new</span>));<span class="comment">// &#123;cc=10, bb=20, aa=10&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串分隔符连接</span></span><br><span class="line">String joinName = list.stream().map(Student::getName).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;(&quot;</span>, <span class="string">&quot;)&quot;</span>)); <span class="comment">// (aa,bb,cc)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//聚合操作</span></span><br><span class="line"><span class="comment">//1.学生总数</span></span><br><span class="line">Long count = list.stream().collect(Collectors.counting()); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">//2.最大年龄 (最小的minBy同理)</span></span><br><span class="line">Integer maxAge = list.stream().map(Student::getAge).collect(Collectors.maxBy(Integer::compare)).get(); <span class="comment">// 20</span></span><br><span class="line"><span class="comment">//3.所有人的年龄</span></span><br><span class="line">Integer sumAge = list.stream().collect(Collectors.summingInt(Student::getAge)); <span class="comment">// 40</span></span><br><span class="line"><span class="comment">//4.平均年龄</span></span><br><span class="line">Double averageAge = list.stream().collect(Collectors.averagingDouble(Student::getAge)); <span class="comment">// 13.333333333333334</span></span><br><span class="line"><span class="comment">// 带上以上所有方法</span></span><br><span class="line">DoubleSummaryStatistics statistics = list.stream().collect(Collectors.summarizingDouble(Student::getAge));</span><br><span class="line">System.out.println(<span class="string">&quot;count:&quot;</span> + statistics.getCount() + <span class="string">&quot;,max:&quot;</span> + statistics.getMax() + <span class="string">&quot;,sum:&quot;</span> + statistics.getSum() + <span class="string">&quot;,average:&quot;</span> + statistics.getAverage());</span><br><span class="line"></span><br><span class="line"><span class="comment">//分组</span></span><br><span class="line">Map&lt;Integer, List&lt;Student&gt;&gt; ageMap = list.stream().collect(Collectors.groupingBy(Student::getAge));</span><br><span class="line"><span class="comment">//多重分组,先根据类型分再根据年龄分</span></span><br><span class="line">Map&lt;Integer, Map&lt;Integer, List&lt;Student&gt;&gt;&gt; typeAgeMap = list.stream().collect(Collectors.groupingBy(Student::getType, Collectors.groupingBy(Student::getAge)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//分区</span></span><br><span class="line"><span class="comment">//分成两部分，一部分大于10岁，一部分小于等于10岁</span></span><br><span class="line">Map&lt;Boolean, List&lt;Student&gt;&gt; partMap = list.stream().collect(Collectors.partitioningBy(v -&gt; v.getAge() &gt; <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//规约</span></span><br><span class="line">Integer allAge = list.stream().map(Student::getAge).collect(Collectors.reducing(Integer::sum)).get(); <span class="comment">//40　</span></span><br></pre></td></tr></table></figure>

<h3 id="3-补充"><a href="#3-补充" class="headerlink" title="3.补充"></a>3.补充</h3><p>​     <em><strong>并行流：</strong></em>并行流就是把一个内容分成多个数据库卡，并用不同的线程分别处理每个数据块的流  </p>
<p>​    <em><strong>顺序流：</strong></em> 单线程执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * parallel（）  开启并行流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Instant start = Instant.now();</span><br><span class="line">LongStream.rangeClosed(<span class="number">1</span>,<span class="number">10000000000L</span>).parallel().reduce(<span class="number">0</span>,Long::sum);</span><br><span class="line">System.out.println(<span class="string">&quot;系统执行时间:&quot;</span>+ Duration.between(start,Instant.now()).toMillis());</span><br></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sequential()  开启顺序流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Instant start1 = Instant.now();</span><br><span class="line">LongStream.rangeClosed(<span class="number">1</span>,<span class="number">10000000000L</span>).sequential().reduce(<span class="number">0</span>,Long::sum);</span><br><span class="line">System.out.println(<span class="string">&quot;系统执行时间:&quot;</span>+Duration.between(start1,Instant.now()).toMillis());</span><br></pre></td></tr></table></figure>

<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>​     <em><strong>并行流 ：</strong></em>  </p>
<p>​               使用并行流并不是一定会提高效率，因为jvm对数据进行切片和切换线程也是需要时间的。</p>
<p>​               所以数据量越小，串行操作越快；数据量越大，并行操作效果越好。</p>
<p>​              并行流内部使用了默认的ForkJoinPool线程池，所以它默认的线程数量就是处理器的数量，通过它可以得到这个值。<br>​              <em><strong>System.out.println(Runtime.getRuntime().availableProcessors())。</strong></em></p>
<p>​                通过这个方法可以修改这个值，而且这个还是全局属性，不过建议一般不修改</p>
<p>​               <em><strong>System.setProperty(“java.util.concurrent.ForkJoinPool.common.parallelism”, “12”);</strong></em></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java基础知识</category>
      </categories>
      <tags>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title>java8之Stream补充</title>
    <url>/2021/03/16/java8%E4%B9%8BStream%E8%A1%A5%E5%85%85/</url>
    <content><![CDATA[<h3 id="java8之Stream补充"><a href="#java8之Stream补充" class="headerlink" title="java8之Stream补充"></a>java8之Stream补充</h3><p><strong>.findFirst()：</strong>  返回流中的第一个元素<br><strong>.findAny()</strong>   返回Stream中的任何元素<br><strong>.orElse(null)</strong>  表示如果一个都没找到返回null. 【orElse()中可以塞默认值。如果找不到就会返回orElse中你自己设置的默认值。】</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java基础知识</category>
      </categories>
      <tags>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title>java中的位和位移运算符</title>
    <url>/2021/04/05/java%E4%B8%AD%E7%9A%84%E4%BD%8D%E5%92%8C%E4%BD%8D%E7%A7%BB%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h3 id="位和位移运算符"><a href="#位和位移运算符" class="headerlink" title="位和位移运算符"></a>位和位移运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>如果相对应的位数都是1，则结果为1，否则为0</td>
<td>(1100&amp;1101) = 1100</td>
</tr>
<tr>
<td>|</td>
<td>如果对应的位数有一个是1，则结果是1，否则为0</td>
<td>(1100&amp;1101) = 1101</td>
</tr>
<tr>
<td>^</td>
<td>如果相对应 位的值相同则取0，否则取1</td>
<td>(1100&amp;1101) = 0001</td>
</tr>
<tr>
<td>~</td>
<td>按位取反运算符，反转操作数的每一位，即0变成1，1变成0</td>
<td>~ 1100 = 0011</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>按位左移运算符，按照指定的位数左移,不分正负数，低位补0,带符号位移，高位移出，低位补0，移动位数超过该类型的最大位数，则进行取模，如对Integer型左移34位，实际上只移动了两位。左移一位相当于乘以2的一次方，左移n位相当于乘以2的n次方。</td>
<td>1100 &lt;&lt; 1 = 1000</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>按位右移运算符。按照指定的位数右移并以符号位填空 ,如果该数为正，则高位补0，若为负数，则高位补1；</td>
<td>1100 &gt;&gt;1 = 1110</td>
</tr>
<tr>
<td>&gt;&gt;&gt;</td>
<td>按位右移补0操作,按照指定的位数右移并以零填空位,无符号右移，也叫逻辑右移，即若该数为正，则高位补0，而若该数为负数，则右移后高位同样补0</td>
<td>1100 &gt;&gt;&gt; 1 =  0110</td>
</tr>
</tbody></table>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Java基础知识</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>java好的开源项目</title>
    <url>/2021/01/08/java%E5%A5%BD%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h4 id="好的开源项目"><a href="#好的开源项目" class="headerlink" title="好的开源项目"></a>好的开源项目</h4><ul>
<li><strong>项目简介</strong></li>
</ul>
<p>一个基于 Spring Boot 2.1.0 、 Spring Boot Jpa、 JWT、Spring Security、Redis、Vue的前后端分离的后台管理系统</p>
<p>  <a href="https://el-admin.vip/">开发文档</a></p>
<p> <a href="https://doc.el-admin.xin/">备用文档</a></p>
<p><strong>账号密码：</strong> <code>admin / 123456</code></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>随笔记录</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>java模拟浏览器做文件上传</title>
    <url>/2021/01/02/java%E6%A8%A1%E6%8B%9F%E6%B5%8F%E8%A7%88%E5%99%A8%E5%81%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h4 id="java模拟浏览器做文件上传"><a href="#java模拟浏览器做文件上传" class="headerlink" title="java模拟浏览器做文件上传"></a>java模拟浏览器做文件上传</h4><p><strong>所需jar:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;httpclient.version&gt;4.5.13&lt;/httpclient.version&gt;</span><br><span class="line">    &lt;httpcore.version&gt;4.4.14&lt;/httpcore.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;httpclient.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;httpcore&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.4.14&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;httpmime&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.5.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>代码示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yzw.http;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.mime.HttpMultipartMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.mime.MultipartEntityBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.mime.content.FileBody;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yzw</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">httpClientUploadFile</span><span class="params">(String url, File file, Map&lt;String,String&gt; params)</span> </span>&#123;</span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line">        String result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//每个post参数之间的分隔。随意设定，只要不会和其他的字符串重复即可。</span></span><br><span class="line">        String boundary =<span class="string">&quot;--------------20200103121104567&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HttpPost httpPost = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line">            <span class="comment">//设置请求头</span></span><br><span class="line">            httpPost.setHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;multipart/form-data; boundary=&quot;</span>+boundary);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//HttpEntity builder</span></span><br><span class="line">            MultipartEntityBuilder builder = MultipartEntityBuilder.create();</span><br><span class="line">            <span class="comment">//字符编码</span></span><br><span class="line">            builder.setCharset(Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="comment">//模拟浏览器</span></span><br><span class="line">            builder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);</span><br><span class="line">            <span class="comment">//boundary</span></span><br><span class="line">            builder.setBoundary(boundary);</span><br><span class="line">            <span class="comment">//multipart/form-data</span></span><br><span class="line">            builder.addPart(<span class="string">&quot;uploadimg&quot;</span>,<span class="keyword">new</span> FileBody(file));<span class="comment">//相当于&lt;input name=&#x27;file&#x27; type=&#x27;file&#x27;/&gt;</span></span><br><span class="line">            <span class="comment">// binary</span></span><br><span class="line"><span class="comment">//            builder.addBinaryBody(&quot;name=\&quot;file\&quot;; filename=\&quot;test.txt\&quot;&quot;, new FileInputStream(file), ContentType.MULTIPART_FORM_DATA, file.getName());// 文件流</span></span><br><span class="line">            <span class="comment">//其他参数</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : params.entrySet()) &#123;</span><br><span class="line">                builder.addTextBody(entry.getKey(), entry.getValue() );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//HttpEntity</span></span><br><span class="line">            HttpEntity entity = builder.build();</span><br><span class="line">            httpPost.setEntity(entity);</span><br><span class="line">            <span class="comment">// 执行提交</span></span><br><span class="line">            HttpResponse response = httpClient.execute(httpPost);</span><br><span class="line">            <span class="comment">//响应</span></span><br><span class="line">            HttpEntity responseEntity = response.getEntity();</span><br><span class="line">            <span class="keyword">if</span> (responseEntity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 将响应内容转换为字符串</span></span><br><span class="line">                result = EntityUtils.toString(responseEntity, Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                httpClient.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.err.println(<span class="string">&quot;result&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//main 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        String filePath = <span class="keyword">new</span> String(<span class="string">&quot;C:\\Users\\27184\\Desktop\\项目\\新建文件夹\\的文案.png&quot;</span>);</span><br><span class="line">        <span class="comment">// 把一个普通参数和文件上传给下面这个地址 是一个servlet</span></span><br><span class="line">        String httpPost = <span class="string">&quot;http://1.w2wz.com/upload.php&quot;</span>;</span><br><span class="line">        httpClientUploadFile(httpPost,<span class="keyword">new</span> File(filePath),params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
      <tags>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis相关笔记</title>
    <url>/2020/12/10/mybatis%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="mybatis中inster一条数据后返回数据库自增的主键值"><a href="#mybatis中inster一条数据后返回数据库自增的主键值" class="headerlink" title="mybatis中inster一条数据后返回数据库自增的主键值"></a>mybatis中inster一条数据后返回数据库自增的主键值</h4><ul>
<li>相关sql的写法<ol>
<li> keyProperty=”tid” 对应的是实体映射</li>
<li> keyColumn=”typing_test_id” 对应的是表中的字段自增主键 id</li>
</ol>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&lt;insert id=&quot;insterTypingTest&quot; parameterType=&quot;com.mwt.oes.dto.TypingTestDTO&quot; useGeneratedKeys=&quot;true&quot;                 keyProperty=&quot;tid&quot;  keyColumn=&quot;typing_test_id&quot;&gt;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> typing_test ( title, test_user_role, typing_content_id, start_time, end_time, <span class="keyword">duration</span>,                create_user,create_time, update_time )</span><br><span class="line"> <span class="keyword">VALUES</span></span><br><span class="line">       (<span class="comment">#&#123;typingTestDTO.title&#125;,#&#123;typingTestDTO.userRole&#125;,#&#123;typingTestDTO.typingContentId&#125;,#          &#123;typingTestDTO.startTime&#125;,#&#123;typingTestDTO.endTime&#125;,#&#123;typingTestDTO.duration&#125;,#   &#123;typingTestDTO.createUser&#125;,now(),now())</span></span><br><span class="line">&lt;/<span class="keyword">insert</span>&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>service层的调用写法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insterTypingTest</span><span class="params">(TypingTestDTO typingTestDTO)</span> </span>&#123;</span><br><span class="line">     typingTestMapper.insterTypingTest(typingTestDTO); <span class="comment">//执行完inster语句之后mybatis会自动封装到你的参数对象中</span></span><br><span class="line">     System.out.println(typingTestDTO.getTid())</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql存储过程分割字符串</title>
    <url>/2021/01/07/mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%88%86%E5%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h4 id="mysql存储过程循环分割字符串示例："><a href="#mysql存储过程循环分割字符串示例：" class="headerlink" title="mysql存储过程循环分割字符串示例："></a>mysql存储过程循环分割字符串示例：</h4><p><strong>业务逻辑：</strong> 在sys_menu表中 inster添加菜单数据，在sys_roles_menus表中给菜单分配权限     </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建菜单的存储过程 并为菜单赋权限  默认权限admin roleId = 1   </span></span><br><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">PROCEDURE</span> <span class="string">`kq`</span>(<span class="keyword">IN</span> roleId <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> i <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">declare</span> j <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">  <span class="comment">-- 记录所有的inster 之后的自增主键id	</span></span><br><span class="line">  <span class="keyword">declare</span> k   <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	</span><br><span class="line">  <span class="comment">-- 定义用于分割字符串的变量	</span></span><br><span class="line">  <span class="keyword">declare</span> _next <span class="built_in">TEXT</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">declare</span> _nextlen <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">declare</span> _value <span class="built_in">TEXT</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`sys_menu`</span>(<span class="string">`pid`</span>, <span class="string">`sub_count`</span>, <span class="string">`type`</span>, <span class="string">`title`</span>, <span class="string">`name`</span>, <span class="string">`component`</span>, <span class="string">`menu_sort`</span>, <span class="string">`icon`</span>, <span class="string">`path`</span>, <span class="string">`i_frame`</span>, <span class="string">`cache`</span>, <span class="string">`hidden`</span>, <span class="string">`permission`</span>, <span class="string">`create_by`</span>, <span class="string">`update_by`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>) <span class="keyword">VALUES</span> ( <span class="literal">NULL</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="string">&#x27;人员温度管理&#x27;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">999</span>, <span class="string">&#x27;anq&#x27;</span>, <span class="string">&#x27;kq&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="literal">NULL</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="keyword">now</span>(), <span class="literal">null</span>);</span><br><span class="line"><span class="comment">-- 拿到inster 之后的自增主键id  以下数据依赖它的id</span></span><br><span class="line"><span class="keyword">set</span> i = <span class="keyword">LAST_INSERT_ID</span>();</span><br><span class="line"><span class="comment">-- 记录每一条的主键id k 用于sys_roles_menus表的角色分配</span></span><br><span class="line"><span class="keyword">set</span> k = i; </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`sys_menu`</span>( <span class="string">`pid`</span>, <span class="string">`sub_count`</span>, <span class="string">`type`</span>, <span class="string">`title`</span>, <span class="string">`name`</span>, <span class="string">`component`</span>, <span class="string">`menu_sort`</span>, <span class="string">`icon`</span>, <span class="string">`path`</span>, <span class="string">`i_frame`</span>, <span class="string">`cache`</span>, <span class="string">`hidden`</span>, <span class="string">`permission`</span>, <span class="string">`create_by`</span>, <span class="string">`update_by`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>) <span class="keyword">VALUES</span> (i, <span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;异常记录&#x27;</span>, <span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;kq/error/index&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;Steve-Jobs&#x27;</span>, <span class="string">&#x27;error&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;errorRecord:list&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="keyword">now</span>(), <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">set</span> k = <span class="keyword">CONCAT</span>(k , <span class="string">&#x27;,&#x27;</span> ,<span class="keyword">LAST_INSERT_ID</span>()); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`sys_menu`</span>( <span class="string">`pid`</span>, <span class="string">`sub_count`</span>, <span class="string">`type`</span>, <span class="string">`title`</span>, <span class="string">`name`</span>, <span class="string">`component`</span>, <span class="string">`menu_sort`</span>, <span class="string">`icon`</span>, <span class="string">`path`</span>, <span class="string">`i_frame`</span>, <span class="string">`cache`</span>, <span class="string">`hidden`</span>, <span class="string">`permission`</span>, <span class="string">`create_by`</span>, <span class="string">`update_by`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>) <span class="keyword">VALUES</span> (i, <span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;测温异常 &#x27;</span>, <span class="string">&#x27;temperature&#x27;</span>, <span class="string">&#x27;kq/temperature/index&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;temperature&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;temperatureError:list&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="keyword">now</span>(), <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">set</span> k = <span class="keyword">CONCAT</span>(k , <span class="string">&#x27;,&#x27;</span> ,<span class="keyword">LAST_INSERT_ID</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`sys_menu`</span>( <span class="string">`pid`</span>, <span class="string">`sub_count`</span>, <span class="string">`type`</span>, <span class="string">`title`</span>, <span class="string">`name`</span>, <span class="string">`component`</span>, <span class="string">`menu_sort`</span>, <span class="string">`icon`</span>, <span class="string">`path`</span>, <span class="string">`i_frame`</span>, <span class="string">`cache`</span>, <span class="string">`hidden`</span>, <span class="string">`permission`</span>, <span class="string">`create_by`</span>, <span class="string">`update_by`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>) <span class="keyword">VALUES</span> (i, <span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;出入记录&#x27;</span>, <span class="string">&#x27;inOut&#x27;</span>, <span class="string">&#x27;kq/inOut/index&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;link&#x27;</span>, <span class="string">&#x27;inOut&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;inOutRecord:list&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="keyword">now</span>(), <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">set</span> k = <span class="keyword">CONCAT</span>(k , <span class="string">&#x27;,&#x27;</span> ,<span class="keyword">LAST_INSERT_ID</span>()); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`sys_menu`</span>(<span class="string">`pid`</span>, <span class="string">`sub_count`</span>, <span class="string">`type`</span>, <span class="string">`title`</span>, <span class="string">`name`</span>, <span class="string">`component`</span>, <span class="string">`menu_sort`</span>, <span class="string">`icon`</span>, <span class="string">`path`</span>, <span class="string">`i_frame`</span>, <span class="string">`cache`</span>, <span class="string">`hidden`</span>, <span class="string">`permission`</span>, <span class="string">`create_by`</span>, <span class="string">`update_by`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>) <span class="keyword">VALUES</span> (i, <span class="number">2</span>, <span class="number">1</span>, <span class="string">&#x27;考勤统计&#x27;</span>, <span class="string">&#x27;errorPerson&#x27;</span>, <span class="string">&#x27;kq/errorPerson/index&#x27;</span>, <span class="number">4</span>, <span class="string">&#x27;permission&#x27;</span>, <span class="string">&#x27;errorPerson&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;kqCount:list&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="keyword">now</span>(), <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">set</span> j = <span class="keyword">LAST_INSERT_ID</span>();</span><br><span class="line"><span class="keyword">set</span> k = <span class="keyword">CONCAT</span>(k , <span class="string">&#x27;,&#x27;</span> ,j);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`sys_menu`</span>(<span class="string">`pid`</span>, <span class="string">`sub_count`</span>, <span class="string">`type`</span>, <span class="string">`title`</span>, <span class="string">`name`</span>, <span class="string">`component`</span>, <span class="string">`menu_sort`</span>, <span class="string">`icon`</span>, <span class="string">`path`</span>, <span class="string">`i_frame`</span>, <span class="string">`cache`</span>, <span class="string">`hidden`</span>, <span class="string">`permission`</span>, <span class="string">`create_by`</span>, <span class="string">`update_by`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>) <span class="keyword">VALUES</span> (j, <span class="number">0</span>, <span class="number">2</span>, <span class="string">&#x27;缺勤列表&#x27;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">999</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;notPerson:list&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="keyword">now</span>(), <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">set</span> k = <span class="keyword">CONCAT</span>(k , <span class="string">&#x27;,&#x27;</span> ,<span class="keyword">LAST_INSERT_ID</span>()); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`sys_menu`</span>(<span class="string">`pid`</span>, <span class="string">`sub_count`</span>, <span class="string">`type`</span>, <span class="string">`title`</span>, <span class="string">`name`</span>, <span class="string">`component`</span>, <span class="string">`menu_sort`</span>, <span class="string">`icon`</span>, <span class="string">`path`</span>, <span class="string">`i_frame`</span>, <span class="string">`cache`</span>, <span class="string">`hidden`</span>, <span class="string">`permission`</span>, <span class="string">`create_by`</span>, <span class="string">`update_by`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>) <span class="keyword">VALUES</span> (j, <span class="number">0</span>, <span class="number">2</span>, <span class="string">&#x27;异常列表&#x27;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">999</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;errorPerson:list&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="keyword">now</span>(), <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">set</span> k = <span class="keyword">CONCAT</span>(k , <span class="string">&#x27;,&#x27;</span> ,<span class="keyword">LAST_INSERT_ID</span>()); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- k = &#x27;151,152,153,154,155,156,157&#x27;</span></span><br><span class="line"><span class="comment">-- 循环分割 k 字符串</span></span><br><span class="line">iterator:</span><br><span class="line">LOOP</span><br><span class="line">  IF LENGTH(TRIM(k)) = 0 OR k IS NULL THEN</span><br><span class="line">    LEAVE iterator;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">SET</span> _next = SUBSTRING_INDEX(k,<span class="string">&#x27;,&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">SET</span> _nextlen = <span class="keyword">LENGTH</span>(_next);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">SET</span> _value = <span class="keyword">TRIM</span>(_next);</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 拿到分割好的字符串插入表中</span></span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`sys_roles_menus`</span>(<span class="string">`menu_id`</span>, <span class="string">`role_id`</span>) <span class="keyword">VALUES</span> (_value, roleId );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">SET</span> k = <span class="keyword">INSERT</span>(k,<span class="number">1</span>,_nextlen + <span class="number">1</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用存储过程插入菜单 传入你要分配的角色id   默认admin角色id 是1  </span></span><br><span class="line"><span class="keyword">call</span> kq(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除存储过程</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> kq;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2021/04/07/redis/</url>
    <content><![CDATA[<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a><a href="http://www.redis.cn/">redis</a></h1><h2 id="redis介绍"><a href="#redis介绍" class="headerlink" title="redis介绍"></a>redis介绍</h2><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p>
<h2 id="redis常用的数据类型"><a href="#redis常用的数据类型" class="headerlink" title="redis常用的数据类型"></a>redis常用的数据类型</h2><div class="markmap-container" style="height:300px;" ><svg class="markmap-svg">{"t":"root","d":0,"v":"","c":[{"t":"paragraph","d":1,"v":"<strong># redis常用的数据类型</strong>"},{"t":"paragraph","d":1,"v":"<strong>## </strong><a href=\"http://www.redis.cn/topics/data-types-intro.html#strings\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>String</strong></a>"},{"t":"bullet_list","d":1,"v":"","c":[{"t":"list_item","d":2,"v":"<a href=\"http://www.redis.cn/topics/data-types-intro.html#strings\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">字符串</a>"},{"t":"list_item","d":2,"v":"<a href=\"http://www.redis.cn/topics/data-types-intro.html#strings\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">数值</a>"}]},{"t":"paragraph","d":1,"v":"<strong>### </strong><a href=\"http://www.redis.cn/commands.html\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>bitmap</strong></a>"},{"t":"bullet_list","d":1,"v":"","c":[{"t":"list_item","d":2,"v":"<a href=\"http://www.redis.cn/commands/bitcount.html\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">使用场景1</a>"},{"t":"list_item","d":2,"v":"<a href=\"https://blog.getspool.com/2011/11/29/fast-easy-realtime-metrics-using-redis-bitmaps/\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\">使用场景2</a>"}]},{"t":"paragraph","d":1,"v":"<strong>## </strong><a href=\"http://www.redis.cn/topics/data-types-intro.html#sets\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>set</strong></a>"},{"t":"paragraph","d":1,"v":"<strong>## </strong><a href=\"http://www.redis.cn/topics/data-types-intro.html#hashes\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>hash</strong></a>"},{"t":"paragraph","d":1,"v":"<strong>## </strong><a href=\"http://www.redis.cn/topics/data-types-intro.html#sorted-sets\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>sorted_set</strong></a>"},{"t":"paragraph","d":1,"v":"<strong>## </strong><a href=\"http://www.redis.cn/topics/data-types-intro.html#lists\" title=\"\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>list</strong></a>"}]}</svg></div>


<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul>
<li> <strong>字符串</strong></li>
</ul>
<p>  <a href="http://www.redis.cn/commands.html#string">1.常用的命令</a></p>
<p>  ​        set<br>  ​        get<br>  ​       append<br>  ​        strlen</p>
<p>  ​       type 查看vlue的类型 </p>
<p>  2.正负向索引</p>
<p>  setrange<br>  getrange</p>
<p>  3.<a href="http://www.redis.cn/commands/object.html">object</a></p>
<ul>
<li>**数值 **</li>
</ul>
<p>incr</p>
<p>INCR 命令将字符串值解析成整型，将其加一，最后将结果保存为新的字符串值，类似的命令有</p>
<p>对一个k 加 n</p>
<p>INCRBY n</p>
<p>减一</p>
<p> DECR </p>
<p>减n</p>
<p> DECRBY n</p>
<p>实际上他们在内部就是同一个命令，只是看上去有点儿不同。</p>
<p>INCR是原子操作意味着什么呢？就是说即使多个客户端对同一个key发出INCR命令，也决不会导致竞争的情况。例如如下情况永远不可能发生：『客户端1和客户端2同时读出“10”，他们俩都对其加到11，然后将新值设置为11』。最终的值一定是12，read-increment-set操作完成时，其他客户端不会在同一时间执行任何命令。</p>
<p>对字符串，另一个的令人感兴趣的操作是GETSET命令，行如其名：他为key设置新值并且返回原值。这有什么用处呢？例如：你的系统每当有新用户访问时就用INCR命令操作一个Redis key。你希望每小时对这个信息收集一次。你就可以GETSET这个key并给其赋值0并读取原值。<br>为减少等待时间，也可以一次存储或获取多个key对应的值，使用MSET和MGET命令:</p>
<p>  <em><strong>使用场景</strong></em></p>
<p>  抢购，秒杀，详情页，点赞，评论<br>  规避并发下，<br>  对数据库的事务操作<br>  完全由redis内存操作代替</p>
<ul>
<li><strong>bitmap</strong></li>
</ul>
<p>1.常用命令</p>
<p>setbit<br>bitcount<br>bitpos<br>bitop</p>
<ol start="2">
<li><a href="http://www.redis.cn/commands/bitcount.html">使用场景1</a></li>
</ol>
<p>1,有用户系统，统计用户登录天数，<br>setbit sean 1 1<br>setbit sean 7 1<br>setbit sean 364 1<br>STRLEN sean<br>BITCOUNT sean -2 -1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">01 02 03 04</span><br></pre></td></tr></table></figure>

<p>sean    0    1   0   1   010101<br>json     0    1   0   1   011111</p>
<p>每用户46B *  用户数 10000000  =460 000 000</p>
<ol start="3">
<li><a href="https://blog.getspool.com/2011/11/29/fast-easy-realtime-metrics-using-redis-bitmaps/">使用场景2</a></li>
</ol>
<p>2618做活动：送礼物<br>大库备货多少礼物<br>假设京东有2E用户</p>
<p>僵尸用户<br>冷热用户/忠诚用户</p>
<p>活跃用户统计！1号<del>3号 都有哪些用户进行了登录<br>比如说 1号</del>3号  连续登录要     去重</p>
<p>  setbit 20190101   1  1<br>  setbit 20190102   1  1<br>  setbit 20190102   7  1<br>  bitop  or   destkey 20190101  20190102<br>  BITCOUNT  destkey  0 -1</p>
<h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>Redis Set 是 String 的无序排列。SADD 指令把新的元素添加到 set 中。对 set 也可做一些其他的操作，比如测试一个给定的元素是否存在，对不同 set 取交集，并集或差，等等。</p>
<p>Sets 适合用于表示对象间的关系。 例如，我们可以轻易使用 set 来表示标记。</p>
<p>一个简单的建模方式是，对每一个希望标记的对象使用 set。这个 set 包含和对象相关联的标签的 ID。</p>
<p>假设我们想要给新闻打上标签。 假设新闻 ID 1000 被打上了 1,2,5 和 77 四个标签，我们可以使用一个 set 把 tag ID 和新闻条目关联起来：</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>set中的随机事件</p>
<p>SRANDMEMBER  key  count<br>正数：取出一个去重的结果集（不能超过已有集）<br>负数：取出一个带重复的结果集，一定满足你要的数量<br>如果：0，不返回</p>
<h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p>Hash 便于表示 objects，实际上，你可以放入一个 hash 的域数量实际上没有限制（除了可用内存以外）。所以，你可以在你的应用中以不同的方式使用 hash。</p>
<p>HMSET 指令设置 hash 中的多个域，而 HGET 取回单个域。HMGET 和 HGET 类似，但返回一系列值：</p>
<h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><p>场景：点赞，收藏，详情页</p>
<h2 id="sorted-set"><a href="#sorted-set" class="headerlink" title="sorted_set"></a>sorted_set</h2><p>当您只需要获取随机元素而不将其从集合中删除时，可以使用SRANDMEMBER适合该任务的命令。它还具有返回重复和非重复元素的功能。</p>
<p>Redis排序集—</p>
<p>排序集是一种数据类型，类似于集合和哈希之间的混合。像集合一样，排序集合由唯一的，非重复的字符串元素组成，因此从某种意义上说，排序集合也是一个集合。</p>
<p>但是，虽然不对集合内的元素进行排序，但是排序后的集合中的每个元素都与一个称为得分的浮点值相关联 （这就是为什么该类型也类似于哈希的原因，因为每个元素都映射到一个值）。</p>
<p>此外，已排序集合中的元素是按顺序进行的（因此，它们不是应请求而排序的，顺序是用于表示已排序集合的数据结构的特殊性）。它们按照以下规则排序：</p>
<p>如果A和B是两个具有不同分数的元素，那么如果A.score是&gt; B.score，则A&gt;B。<br>如果A和B的得分完全相同，那么如果A字符串在字典上大于B字符串，则A&gt;B。A和B字符串不能相等，因为排序集仅具有唯一元素。</p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>集合操作<br>并集，交集<br>权重/聚合指令</p>
<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>Lists: 按插入顺序排序的字符串元素的集合。他们基本上就是链表（linked lists）</p>
<p>Redis lists基于Linked Lists实现。这意味着即使在一个list中有数百万个元素，在头部或尾部添加一个元素的操作，其时间复杂度也是常数级别的。用LPUSH 命令在十个元素的list头部添加新元素，和在千万元素list头部添加新元素的速度相同。</p>
<p>那么，坏消息是什么？在数组实现的list中利用索引访问元素的速度极快，而同样的操作在linked list实现的list上没有那么快。</p>
<p>Redis Lists用linked list实现的原因是：对于数据库系统来说，至关重要的特性是：能非常快的在很大的列表上添加元素。另一个重要因素是，正如你将要看到的：Redis lists能在常数时间取得常数长度。</p>
<h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><p>栈 同向命令</p>
<p>队列 反向命令</p>
<p>数组</p>
<p>阻塞，单播队列 FIFO</p>
<h3 id="redis的发布-订阅"><a href="#redis的发布-订阅" class="headerlink" title="redis的发布/订阅"></a>redis的发布/订阅</h3><h3 id="redis的key过期设置"><a href="#redis的key过期设置" class="headerlink" title="redis的key过期设置"></a>redis的key过期设置</h3><h3 id="redis的事务"><a href="#redis的事务" class="headerlink" title="redis的事务"></a>redis的事务</h3><h3 id="redis的缓存穿透"><a href="#redis的缓存穿透" class="headerlink" title="redis的缓存穿透"></a>redis的缓存穿透</h3><h3 id="redis的缓存穿透解决办法-布隆过滤器"><a href="#redis的缓存穿透解决办法-布隆过滤器" class="headerlink" title="redis的缓存穿透解决办法(布隆过滤器)"></a>redis的缓存穿透解决办法(布隆过滤器)</h3><h3 id="redis中的持久化"><a href="#redis中的持久化" class="headerlink" title="redis中的持久化"></a>redis中的持久化</h3><ul>
<li><p>  <strong>rdb</strong></p>
</li>
<li><p>  <strong>aof</strong></p>
</li>
</ul>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>springBoot整合 jpa数据源+mybatis数据源</title>
    <url>/2021/03/18/springBoot%E6%95%B4%E5%90%88%20jpa%E6%95%B0%E6%8D%AE%E6%BA%90+mybatis%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
    <content><![CDATA[<h3 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">dynamic:</span></span><br><span class="line">      <span class="attr">primary:</span> <span class="string">toc</span> <span class="comment">#设置默认的数据源或者数据源组,默认值即为master</span></span><br><span class="line">      <span class="attr">strict:</span> <span class="literal">false</span> <span class="comment">#设置严格模式,默认false不启动. 启动后在未匹配到指定数据源时候回抛出异常,不启动会使用默认数据源.</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">admin:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://xx.xx.xx.xx:3306/xx?autoReconnect=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">xx</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">xxxx</span></span><br><span class="line">          <span class="attr">dbcp2:</span></span><br><span class="line">            <span class="attr">min-idle:</span> <span class="number">5</span>             <span class="comment"># 数据库连接池的最小维持连接数</span></span><br><span class="line">            <span class="attr">initial-size:</span> <span class="number">5</span>         <span class="comment"># 初始化连接数</span></span><br><span class="line">            <span class="attr">max-total:</span> <span class="number">5</span>            <span class="comment"># 最大连接数</span></span><br><span class="line">            <span class="attr">max-wait-millis:</span> <span class="number">150</span>    <span class="comment"># 等待连接获取的最大超时时间</span></span><br><span class="line">          <span class="attr">druid:</span></span><br><span class="line">            <span class="comment"># 初始连接数</span></span><br><span class="line">            <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">            <span class="comment"># 最小连接数</span></span><br><span class="line">            <span class="attr">min-idle:</span> <span class="number">10</span></span><br><span class="line">            <span class="comment"># 最大连接数</span></span><br><span class="line">            <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">            <span class="comment"># 获取连接超时时间</span></span><br><span class="line">            <span class="attr">max-wait:</span> <span class="number">5000</span></span><br><span class="line">            <span class="comment"># 连接有效性检测时间</span></span><br><span class="line">            <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">            <span class="comment"># 连接在池中最小生存的时间</span></span><br><span class="line">            <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">            <span class="comment"># 连接在池中最大生存的时间</span></span><br><span class="line">            <span class="attr">max-evictable-idle-time-millis:</span> <span class="number">900000</span></span><br><span class="line">            <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">            <span class="comment"># 检测连接是否有效</span></span><br><span class="line">            <span class="attr">validation-query:</span> <span class="string">select</span> <span class="number">1</span></span><br><span class="line">            <span class="comment"># 配置监控统计</span></span><br><span class="line">            <span class="attr">webStatFilter:</span></span><br><span class="line">              <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">stat-view-servlet:</span></span><br><span class="line">              <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">              <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">              <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">filter:</span></span><br><span class="line">              <span class="attr">stat:</span></span><br><span class="line">                <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">                <span class="comment"># 记录慢SQL</span></span><br><span class="line">                <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">                <span class="attr">slow-sql-millis:</span> <span class="number">1000</span></span><br><span class="line">                <span class="attr">merge-sql:</span> <span class="literal">true</span></span><br><span class="line">              <span class="attr">wall:</span></span><br><span class="line">                <span class="attr">config:</span></span><br><span class="line">                  <span class="attr">multi-statement-allow:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">toc:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://xx.xx.xx.xx:3306/xx?autoReconnect=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">xx</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">xx</span></span><br><span class="line">          <span class="attr">dbcp2:</span></span><br><span class="line">            <span class="attr">min-idle:</span> <span class="number">5</span>             <span class="comment"># 数据库连接池的最小维持连接数</span></span><br><span class="line">            <span class="attr">initial-size:</span> <span class="number">5</span>         <span class="comment"># 初始化连接数</span></span><br><span class="line">            <span class="attr">max-total:</span> <span class="number">5</span>            <span class="comment"># 最大连接数</span></span><br><span class="line">            <span class="attr">max-wait-millis:</span> <span class="number">150</span>    <span class="comment"># 等待连接获取的最大超时时间</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>spring校验注解</title>
    <url>/2021/03/16/spring%E6%A0%A1%E9%AA%8C%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="NotNull-NotBlank和-NotEmpty的区别"><a href="#NotNull-NotBlank和-NotEmpty的区别" class="headerlink" title="@NotNull,@NotBlank和 @NotEmpty的区别"></a>@NotNull,@NotBlank和 @NotEmpty的区别</h3><ul>
<li>@NotEmpty 用在集合上面(不能注释枚举) 对象不能是 null 并且相关对象的 size 大于 0。</li>
<li>@NotBlank用在String上面  String 不能是 null 且去除两端空白字符后的长度(trimmed length)大于 0。</li>
<li>@NotNull用在所有类型上面  对象不能是 null, 但可以是空集(size = 0)。</li>
</ul>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>spring的注解</title>
    <url>/2021/03/16/spring%E7%9A%84%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="NotNull-NotBlank和-NotEmpty的区别"><a href="#NotNull-NotBlank和-NotEmpty的区别" class="headerlink" title="@NotNull,@NotBlank和 @NotEmpty的区别"></a>@NotNull,@NotBlank和 @NotEmpty的区别</h3><ul>
<li>@NotEmpty 用在集合上面(不能注释枚举) 对象不能是 null 并且相关对象的 size 大于 0。</li>
<li>@NotBlank用在String上面  String 不能是 null 且去除两端空白字符后的长度(trimmed length)大于 0。</li>
<li>@NotNull用在所有类型上面  对象不能是 null, 但可以是空集(size = 0)。</li>
</ul>
<h3 id="springMvc-使用LocalDate接收页面请求过来的参数时需要的注解"><a href="#springMvc-使用LocalDate接收页面请求过来的参数时需要的注解" class="headerlink" title="springMvc 使用LocalDate接收页面请求过来的参数时需要的注解"></a>springMvc 使用LocalDate接收页面请求过来的参数时需要的注解</h3><ul>
<li>  @DateTimeFormat(pattern = “yyyy-MM-dd”)</li>
</ul>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>tcpip协议</title>
    <url>/2021/03/21/tcpip%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h3 id="Tcp-ip协议"><a href="#Tcp-ip协议" class="headerlink" title="Tcp/ip协议"></a>Tcp/ip协议</h3><p>   <strong>TCP/IP传输协议，即传输控制/网络协议，也叫作网络通讯协议</strong></p>
<ul>
<li><p><strong>三次握手</strong><br><strong>为了对每次发送的数据量进行跟踪与协商，确保数据段的发送和接收同步，根据所接收到的数据量而确认数据发送、接收完毕后何时撤消联系，并建立虚连接。<br>为了提供可靠的传送，TCP在发送新的数据之前，以特定的顺序将数据包的序号，并需要这些包传送给目标机之后的确认消息。TCP总是用来发送大批量的数据。当应用程序在收到数据后要做出确认时也要用到TCP</strong><br><strong>第一次握手：</strong> 建立连接时，客户端发送syn包（seq=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。<br><strong>第二次握手：</strong>　服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（seq=k），即SYN+ACK包，此时服务器进入SYN_RECV状态。<br><strong>第三次握手：</strong> 客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</p>
</li>
<li><p><strong>为什么需要三次握手，两次不行吗</strong><br>1.通过以上我们知道，<br>  客户端——-syn(seq=j)——-&gt;服务器 <strong>此时服务器知道客户端的发送功能是正常的</strong><br>  客户端&lt;——-syn+ack———-服务器 <strong>此时客户端知道服务器的接收和发送的功能是正常的</strong></p>
<p><strong>以上的两次握手并不能满足Tcp/ip协议的可靠性，因为服务器只知道客户端的发送功能是正常的，并不知道客户端的接收功能是否正常，所以此时就需要第三次的握手来让服务器知道客户端的接收功能是否正常</strong></p>
</li>
<li><p><strong>四次挥手</strong><br><strong>对于一个已经建立的连接，TCP使用改进的四次握手来释放连接（使用一个带有FIN附加标记的报文段）。TCP关闭连接的步骤如下：</strong></p>
<p><strong>第一步:</strong> 当主机A的应用程序通知TCP数据已经发送完毕时，TCP向主机B发送一个带有FIN附加标记的报文段（FIN表示英文finish)<br><strong>第二步:</strong> 主机B收到这个FIN报文段之后，并不立即用FIN报文段回复主机A，而是先向主机A发送一个确认序号ACK，同时通知自己相应的应用程序：对方要求关闭连接（先发送ACK的目的是为了防止在这段时间内，对方重传FIN报文段）<br><strong>第三步</strong> 主机B的应用程序告诉TCP：我要彻底的关闭连接，TCP向主机A送一个FIN报文段。<br><strong>第四步</strong> 主机A收到这个FIN报文段后，向主机B发送一个ACK表示连接彻底释放。 </p>
</li>
<li><p><strong>为什么需要四次挥手</strong><br>因为当服务端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当服务端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉客户端，“你发的FIN报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四次挥手</p>
</li>
</ul>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>web安全笔记</title>
    <url>/2021/03/14/web%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="关于web端安全笔记"><a href="#关于web端安全笔记" class="headerlink" title="关于web端安全笔记"></a>关于web端安全笔记</h3><p>   <a href="https://websec.readthedocs.io/zh/latest/index.html">web安全地址</a></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>上网攻略</title>
    <url>/2021/01/14/%E4%B8%8A%E7%BD%91%E6%94%BB%E7%95%A5/</url>
    <content><![CDATA[<h4 id="上网攻略"><a href="#上网攻略" class="headerlink" title="上网攻略"></a>上网攻略</h4><p><strong>centos6+ wget链接到外网</strong></p>
<ul>
<li>执行以下命令修改文件</li>
</ul>
<p>​       vi /etc/resolv.conf</p>
<ul>
<li>把resolv.conf里面的文件替换为以下：</li>
</ul>
<p>​        nameserver 8.8.8.8<br>​         nameserver 114.114.114.114search localdomain</p>
<p><strong>注意：是用以上的配置替换文件中的所有配置</strong></p>
<p><a href="https://github.com/ruolanaces/kxsw">详情攻略</a></p>
<p>上网攻略：<a href="https://github.com/ruolanaces/kxsw">https://github.com/ruolanaces/kxsw</a></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>中介者设计模式</title>
    <url>/2020/12/24/%E4%B8%AD%E4%BB%8B%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="中介者设计模式-Mediator-Pattern"><a href="#中介者设计模式-Mediator-Pattern" class="headerlink" title="中介者设计模式(Mediator Pattern)"></a>中介者设计模式(Mediator Pattern)</h4><p><strong>描述：</strong> 中介者设计模式是用来降低多个对象和类之间通信的复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，代码易于维护。中介模式属于行为型模式</p>
<p><strong>核心思想：</strong> 对象与对象之间存在大量的关联关系，这样势必会导致系统结构变的很复杂，同时若一个对象发生变化，我们也需要跟踪与之相关联的对象，同时做出相应的处理</p>
<p><strong>使用场景：</strong> </p>
<ul>
<li>系统中对对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以服用改对象</li>
<li>想通过一个中间类来封装多个类中的行为，而不像生成太多的子类</li>
</ul>
<p><strong>中介者设计模式的优点：</strong></p>
<ul>
<li>降低了类的复杂度将一对多转化为一对一</li>
<li>各个类之间解耦</li>
<li>符合迪米特法则</li>
</ul>
<p><strong>中介者设计模式的缺点：</strong></p>
<ul>
<li>中介者会变得庞大， 变得复杂难以维护</li>
</ul>
<p><strong>示例：</strong> </p>
<ul>
<li>抽象中介者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(String message, Colleague colleague)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>中介者具体实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">implements</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConcreteColleague1 colleague1;</span><br><span class="line">    <span class="keyword">private</span> ConcreteColleague2 colleague2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColleague1</span><span class="params">(ConcreteColleague1 colleague1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.colleague1 = colleague1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColleague2</span><span class="params">(ConcreteColleague2 colleague2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.colleague2 = colleague2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message, Colleague colleague)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (colleague == colleague1) &#123;</span><br><span class="line">            colleague2.notify(message);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            colleague1.notify(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>抽象出用户对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象同事类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Colleague</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>用户的实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague1</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleague1</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        mediator.send(message, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;同事1得到消息：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague2</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleague2</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        mediator.send(message, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;同事1得到消息：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       ConcreteMediator mediator = <span class="keyword">new</span> ConcreteMediator();</span><br><span class="line"></span><br><span class="line">       ConcreteColleague1 colleague1 = <span class="keyword">new</span> ConcreteColleague1(mediator);</span><br><span class="line">       ConcreteColleague2 colleague2 = <span class="keyword">new</span> ConcreteColleague2(mediator);</span><br><span class="line"></span><br><span class="line">       mediator.setColleague1(colleague1);</span><br><span class="line">       mediator.setColleague2(colleague2);</span><br><span class="line"></span><br><span class="line">       colleague1.send(<span class="string">&quot;Nice to meet u.&quot;</span>);</span><br><span class="line">       colleague2.send(<span class="string">&quot;Nice to meet u too.&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>享元设计模式</title>
    <url>/2020/12/21/%E4%BA%AB%E5%85%83%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="享元设计模式-Flyweight-Pattern"><a href="#享元设计模式-Flyweight-Pattern" class="headerlink" title="享元设计模式(Flyweight Pattern)"></a>享元设计模式(Flyweight Pattern)</h4><p><strong>描述：</strong> 享元设计模式主要用于减少对象的创建，以减少内存的占用提高性能这种类型的设计模式属于结构型模式，它减少了对象的数量从而改善应用所需的对象结构的方式</p>
<p><strong>核心思想：</strong> 主要的思想和池化技术的概念类似。当我们取对象时如果有就返回，没有就创建。</p>
<p><strong>使用场景：</strong> </p>
<ul>
<li>系统有大量的相似对象</li>
<li>有缓冲池的场景</li>
</ul>
<p><strong>享元设计模式的优点：</strong></p>
<ul>
<li>降低内存的消耗，提高使用率</li>
</ul>
<p><strong>享元设计模式的缺点：</strong></p>
<ul>
<li>提高了系统的复杂度，需要分理处外部状态和内部的状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。</li>
</ul>
<p><strong>示例：</strong></p>
<ul>
<li>抽象享元对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">borrow</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>享元对象的实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateBook</span> <span class="keyword">implements</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CreateBook</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">borrow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;借出一本书 书名是：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>享元工厂</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Llibrary</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Book&gt; books;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Llibrary llibrary = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Llibrary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        books = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用单例 图书馆必须是一个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Llibrary <span class="title">getLlibrary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (llibrary == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Llibrary.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (llibrary == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    llibrary = <span class="keyword">new</span> Llibrary();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> llibrary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//此处借助于map 将享元对象存入map </span></span><br><span class="line">    <span class="comment">//传进来一个书的名字 此时如果有就直接返回这本书 如果没有就  添加一本书进来</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">libToBorrow</span><span class="params">(String bookName)</span> </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (books.containsKey(bookName)) &#123;</span><br><span class="line">            book = books.get(bookName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            book = <span class="keyword">new</span> CreateBook(bookName);</span><br><span class="line">            books.put(bookName, book);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBookSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> books.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Book&gt; books = <span class="keyword">new</span> ArrayList&lt;Book&gt;();</span><br><span class="line">    <span class="keyword">static</span> Llibrary llibrary = Llibrary.getLlibrary();</span><br><span class="line">   <span class="comment">//调用book工厂 返回book对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">studentBorrow</span><span class="params">(String bookName)</span> </span>&#123;</span><br><span class="line">        books.add(llibrary.libToBorrow(bookName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        studentBorrow(<span class="string">&quot;java编程思想&quot;</span>);</span><br><span class="line">        studentBorrow(<span class="string">&quot;java核心卷一&quot;</span>);</span><br><span class="line">        studentBorrow(<span class="string">&quot;java核心卷二&quot;</span>);</span><br><span class="line"></span><br><span class="line">        studentBorrow(<span class="string">&quot;java核心卷一&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Book book : books) &#123;</span><br><span class="line">            book.borrow();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>代理设计模式</title>
    <url>/2020/12/22/%E4%BB%A3%E7%90%86%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="代理设计模式-Proxy-Pattern"><a href="#代理设计模式-Proxy-Pattern" class="headerlink" title="代理设计模式(Proxy Pattern)"></a>代理设计模式(Proxy Pattern)</h4><p><strong>描述：</strong> 代理设计模式就是一个对象代表另外一个对象的功能， 也就是指客户端并不直接调用实际的对象，而是通过中间的代理对象来间接的调用实际对象,  这种设计设计模式属于结构模式。</p>
<p><strong>核心思想：</strong> 为对象提供一种以代理对象控制这个对象的访问</p>
<p><strong>使用场景：</strong> 想访问一个类时做一些额外的操作，比如添加日志等</p>
<p><strong>代理设计模式的优点：</strong> </p>
<ul>
<li>职责清晰</li>
<li>高扩展</li>
</ul>
<p><strong>代理设计模式的缺点：</strong></p>
<ul>
<li>由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。</li>
<li>实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</li>
</ul>
<p><strong>示例：</strong></p>
<ul>
<li>创建一个接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建实现接口的类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealImage</span> <span class="keyword">implements</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> String fileName;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">RealImage</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">      loadFromDisk(fileName);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Displaying &quot;</span> + fileName);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadFromDisk</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Loading &quot;</span> + fileName);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>代理类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyImage</span> <span class="keyword">implements</span> <span class="title">Image</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> RealImage realImage;</span><br><span class="line">   <span class="keyword">private</span> String fileName;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ProxyImage</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(realImage == <span class="keyword">null</span>)&#123;</span><br><span class="line">         realImage = <span class="keyword">new</span> RealImage(fileName);</span><br><span class="line">      &#125;</span><br><span class="line">      realImage.display();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyPatternDemo</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Image image = <span class="keyword">new</span> ProxyImage(<span class="string">&quot;test_10mb.jpg&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 图像将从磁盘加载</span></span><br><span class="line">      image.display(); </span><br><span class="line">      System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">      <span class="comment">// 图像不需要从磁盘加载</span></span><br><span class="line">      image.display();  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>使用jacob实现word转pdf</title>
    <url>/2021/01/01/%E4%BD%BF%E7%94%A8jacob%E5%AE%9E%E7%8E%B0word%E8%BD%ACpdf/</url>
    <content><![CDATA[<h4 id="使用jacob实现word转pdf-WPS版"><a href="#使用jacob实现word转pdf-WPS版" class="headerlink" title="使用jacob实现word转pdf WPS版"></a>使用jacob实现word转pdf WPS版</h4><p><strong>准备：</strong></p>
<ul>
<li>java用到的jar包：jacob-1.18</li>
<li>jacob-1.18-x64.dll、jacob-1.18-x86.dll</li>
</ul>
<p><strong>根据您的操作系统的需要将jacob-1.18-x64.dll或jacob-1.18-x86.dll放置你的jdk/jre的bin目录下</strong></p>
<p><strong>在你的项目中引入jacob-1.18 jar</strong></p>
<p><strong>本下载压缩包内包含jacob-1.18和jacob-1.18-x64.dll、jacob-1.18-x86.dll</strong></p>
<p><a href="http://sourceforge.net/projects/jacob-project/"><strong>下载：官网</strong></a></p>
<p><strong>补充：</strong></p>
<ul>
<li><p>需要安装wps </p>
</li>
<li><p>jacob不得低于1.18</p>
</li>
<li><p>jdk1.8</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yzw;</span><br><span class="line"><span class="keyword">import</span> com.jacob.activeX.ActiveXComponent;</span><br><span class="line"><span class="keyword">import</span> com.jacob.com.Dispatch;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yzw</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1111</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> wdDoNotSaveChanges = <span class="number">0</span>;<span class="comment">// 不保存待定的更改。</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> wdFormatPDF = <span class="number">17</span>;<span class="comment">// PDF 格式</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toPDF</span><span class="params">(String filename, String toFilename)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;启动Word&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        ActiveXComponent app = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            app = <span class="keyword">new</span> ActiveXComponent(<span class="string">&quot;KWPS.Application&quot;</span>);</span><br><span class="line">            app.setProperty(<span class="string">&quot;Visible&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            Dispatch docs = app.getProperty(<span class="string">&quot;Documents&quot;</span>).toDispatch();</span><br><span class="line">            System.out.println(<span class="string">&quot;打开文档&quot;</span> + filename);</span><br><span class="line">            Dispatch doc = Dispatch.call(docs,<span class="comment">//</span></span><br><span class="line">                    <span class="string">&quot;Open&quot;</span>, <span class="comment">//</span></span><br><span class="line">                    filename,<span class="comment">// FileName</span></span><br><span class="line">                    <span class="keyword">false</span>,<span class="comment">// ConfirmConversions</span></span><br><span class="line">                    <span class="keyword">true</span> <span class="comment">// ReadOnly</span></span><br><span class="line">            ).toDispatch();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;转换文档到PDF&quot;</span> + toFilename);</span><br><span class="line">            File tofile = <span class="keyword">new</span> File(toFilename);</span><br><span class="line">            <span class="keyword">if</span> (tofile.exists()) &#123;</span><br><span class="line">                tofile.delete();</span><br><span class="line">            &#125;</span><br><span class="line">            Dispatch.call(doc,<span class="comment">//</span></span><br><span class="line">                    <span class="string">&quot;SaveAs&quot;</span>, <span class="comment">//</span></span><br><span class="line">                    toFilename, <span class="comment">// FileName</span></span><br><span class="line">                    wdFormatPDF);</span><br><span class="line"></span><br><span class="line">            Dispatch.call(doc, <span class="string">&quot;Close&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;转换完成..用时：&quot;</span> + (end - start) + <span class="string">&quot;ms.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;========Error:文档转换失败：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (app != <span class="keyword">null</span>)</span><br><span class="line">                app.invoke(<span class="string">&quot;Quit&quot;</span>, wdDoNotSaveChanges);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String wordFile =<span class="string">&quot;C:\\Users\\27184\\Desktop\\项目\\新建文件夹\\CG20120719.docx&quot;</span>;</span><br><span class="line">        String pdfFile = <span class="string">&quot;C:\\Users\\27184\\Desktop\\项目\\新建文件夹\\成功.pdf&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Test1111 test1111 = <span class="keyword">new</span> Test1111();</span><br><span class="line">        Long  startTime = System.currentTimeMillis();</span><br><span class="line">        test1111.toPDF(wordFile, pdfFile);</span><br><span class="line">        Long  endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;office转换pdf耗时：&quot;</span>+ (endTime - startTime) + <span class="string">&quot;毫秒。&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;Office 转 PDF成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
      <tags>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title>单例设计模式</title>
    <url>/2020/12/07/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="单例设计模式-（Singleton）"><a href="#单例设计模式-（Singleton）" class="headerlink" title="单例设计模式 （Singleton）"></a>单例设计模式 （Singleton）</h4><p><strong>描述：</strong> 一个类有且仅有一个实例的类</p>
<p><strong>特点：</strong> 单例类只有一个实例，单例必须自己创建自己的唯一实例，必须给其他的访问对象提供自己的试列 。这样的好处就是避免了内存的频繁的创建和销毁实例。</p>
<p><strong>饿汉式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/*饿汉式</span></span><br><span class="line"><span class="comment">类加载到内存之后就一个实例 ， jvm保证线程的安全</span></span><br><span class="line"><span class="comment">缺点就是不管用到与否 都会在内存中产生一个实列*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="comment">//构造器私有，不能被外界随便调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span>  <span class="title">Test</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>  <span class="keyword">final</span>  Test t = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供访问接口 只能是  类名.的方式调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Test <span class="title">getTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>懒汉式</strong>(线程不安全)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/*懒汉式 </span></span><br><span class="line"><span class="comment">    线程不安全*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Test t = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器私有，不能被外界随便调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供访问接口 只能是  类名.的方式调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">getTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//在这里有可能发生线程不安全 假如t1执行到了这，此时cpu被另外的一个线程t2抢走 就会发生在内存中会有两个实例的存在</span></span><br><span class="line">            t = <span class="keyword">new</span> Test();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>懒汉式/双重检查机制</strong>(线程安全的 DCL)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/*懒汉式</span></span><br><span class="line"><span class="comment">    线程安全*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span>  <span class="keyword">static</span> Test t = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//注意 此处的 volatile  用来防止指令重排序的</span></span><br><span class="line">    <span class="comment">//当我们创建一个对象的时候 分为3步完成 1.在内存开辟空间  2.调用构造函数初始化成员变量  3.调用对象的&lt;init&gt; 指向内存空间</span></span><br><span class="line">    <span class="comment">//在cpu指令的优化下 此时可以看到  2和3 没有  逻辑上的顺序 所以此时有可能 1 3 2顺序执行  就在此时cpu指令执行到了 1 3         // 有一个线程抢走cpu 执行下方的第一个if代码 此时t 已经 !=null 但是成员变量并未初始化 所以报错</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造器私有，不能被外界随便调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供访问接口 只能是  类名.的方式调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">getTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;  <span class="comment">//此处的判断是为了考虑到运行的效率，假如此时有100个线程，如果在这里不加判断的情况就是100个线程都                           // 会在这里抢锁，消耗资源。  </span></span><br><span class="line">                          <span class="comment">// 加上锁之后 当一个线程执行完之后 t ！= null 所以就不用抢占资源 ，直接return</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Test.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(t== <span class="keyword">null</span>)&#123;</span><br><span class="line">                    t = <span class="keyword">new</span> Test();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>静态内部类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/*静态内部类</span></span><br><span class="line"><span class="comment">  * jvm帮我们保证线程安全</span></span><br><span class="line"><span class="comment">  *jvm帮我们保证单例</span></span><br><span class="line"><span class="comment">  *外部类加载时 内部类不会加载（懒加载模式）</span></span><br><span class="line"><span class="comment">  * */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">//构造器私有，不能被外界随便调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>    <span class="class"><span class="keyword">class</span> <span class="title">Test1</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span>  <span class="keyword">final</span> <span class="keyword">static</span>   Test t1 = <span class="keyword">new</span> Test();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提供访问接口 只能是  类名.的方式调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">getTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  Test1.t1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="基于枚举单列模式-推荐使用"><a href="#基于枚举单列模式-推荐使用" class="headerlink" title="基于枚举单列模式(推荐使用)"></a>基于枚举单列模式(推荐使用)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span>  <span class="title">Test</span> </span>&#123;</span><br><span class="line">    TEST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p> 注意: <strong>其中只有枚举方式的单例不会被破坏，其他都能够使用反射或者序列化的方式破坏单例</strong> </p>
<p><strong>实例: 使用反射破坏单例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        <span class="comment">//通过静态方法获取单例</span></span><br><span class="line">        Test test = Test.getTest();</span><br><span class="line">        <span class="comment">//获取Singleton的无参构造器</span></span><br><span class="line">        Constructor&lt;Test&gt; constructor = Test.class.getDeclaredConstructor();</span><br><span class="line">        <span class="comment">//因为构造器是私有的，需要设置权限</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//使用构造器创建对象</span></span><br><span class="line">        Test t1 = constructor.newInstance();</span><br><span class="line">        <span class="comment">//比较是否相等，答案是false</span></span><br><span class="line">        System.out.println(test.equals(t1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>避免反射破坏</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="comment">//构造器私有，不能被外界随便调用</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>  <span class="keyword">final</span>  Test t = <span class="keyword">new</span> Test();</span><br><span class="line">    <span class="function"><span class="keyword">private</span>  <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;请使用getSingleton()方法获取单例对象&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供访问接口 只能是  类名.的方式调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Test <span class="title">getTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用序列化破坏（须实现序列化接口  Serializable）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Singleton instance = Singleton.getInstance();</span><br><span class="line">       <span class="keyword">byte</span>[] serialize = SerializationUtils.serialize(instance);</span><br><span class="line">       Singleton newInstance = SerializationUtils.deserialize(serialize);</span><br><span class="line">       System.out.println(instance == newInstance);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><strong>避免反序列化破坏  就是不实现反序列化接口</strong></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>原型设计模式</title>
    <url>/2020/12/18/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="原型设计模式-Prototype-Pattern"><a href="#原型设计模式-Prototype-Pattern" class="headerlink" title="原型设计模式(Prototype Pattern)"></a>原型设计模式(Prototype Pattern)</h4><p><strong>描述：</strong> 它是用来创建重复对象的，首先创建一个实例然后通过这个实例拷贝创建新的实例</p>
<p><strong>核心思想：</strong> 使用克隆的方式进行对象的创建</p>
<p><strong>使用场景：</strong> </p>
<ul>
<li><p>一个复杂的对象，包含多种数据和结构，层次较深时，适用与原型模式（当需要创建一个与复杂对象部分数据相同的对象）</p>
</li>
<li><p> 当复杂对象需要独立于系统运行，而不破坏本系统中的结构</p>
</li>
<li><p>一个对象多个修改者的场景。</p>
</li>
</ul>
<p><strong>原型设计模式的优点：</strong> </p>
<ul>
<li>性能提高。 </li>
<li>逃避构造函数的约束。</li>
</ul>
<p><strong>原型设计模式的缺点：</strong></p>
<ul>
<li>引用含有循环引用如何处理</li>
<li>必须实现 Cloneable 接口。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clone = <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">teacher</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//老师有学生 的属性</span></span><br><span class="line">    <span class="keyword">private</span> student stu;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clone = <span class="keyword">super</span>.clone();</span><br><span class="line">            student clone1 = (student) <span class="keyword">this</span>.getStu().clone();</span><br><span class="line">            <span class="keyword">this</span>.setStu(clone1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        teacher tea = <span class="keyword">new</span> teacher();</span><br><span class="line">        tea.setName(<span class="string">&quot;老师&quot;</span>);</span><br><span class="line">        student student = <span class="keyword">new</span> student();</span><br><span class="line">        student.setAge(<span class="number">33</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;学生&quot;</span>);</span><br><span class="line">        tea.setAge(<span class="number">56</span>);</span><br><span class="line">        tea.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        tea.setStu(student);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        teacher clone = (teacher) tea.clone();</span><br><span class="line">        clone.setAge(<span class="number">78</span>);</span><br><span class="line">        clone.setName(<span class="string">&quot;克隆老师&quot;</span>);</span><br><span class="line">        clone.getStu().setAge(<span class="number">99</span>);</span><br><span class="line">        clone.getStu().setName(<span class="string">&quot;小学生&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(tea);</span><br><span class="line">        System.out.println(clone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>输出结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">teacher(name=老师, age=<span class="number">56</span>, sex=男, stu=student(name=学生, age=<span class="number">33</span>))</span><br><span class="line">teacher(name=克隆老师, age=<span class="number">78</span>, sex=男, stu=student(name=小学生, age=<span class="number">99</span>))</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>命令设计模式</title>
    <url>/2020/12/22/%E5%91%BD%E4%BB%A4%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="命令设计模式-Command-Pattern"><a href="#命令设计模式-Command-Pattern" class="headerlink" title="命令设计模式(Command Pattern)"></a>命令设计模式(Command Pattern)</h4><p><strong>描述：</strong> 命令设计模式是一种数据驱动的设计模式，它属于行为模式，请求以命令的方式包裹在对象中，并传递给调用对象，调用对象寻找可以处理改命令的合适对象，并把该命令传递给相应的对象，该对象执行命令。</p>
<p><strong>核心思想：</strong> 将一个情求封装为一个对象，从而可以使用不同的请求对客户进行参数化</p>
<p><strong>使用场景：</strong> 认为是命令的地方可以使用命令设计模式</p>
<p><strong>命令设计模式的优点：</strong> </p>
<ul>
<li>降低系统的耦合</li>
<li>新的命令可以很容易的添加到系统中去</li>
</ul>
<p><strong>命令设计模式是缺点：</strong></p>
<ul>
<li>会导致某些系统过多的具体命名的类，不符合依赖倒置原则</li>
</ul>
<p><strong>示例：</strong></p>
<ul>
<li>抽象命令接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//命令接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="comment">//执行任务</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建一个请求类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> quantity = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Stock [ Name: &quot;</span> + name +</span><br><span class="line">                <span class="string">&quot;  Quantity: &quot;</span> + quantity + <span class="string">&quot; ] bought&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Stock [ Name: &quot;</span> + name +</span><br><span class="line">                <span class="string">&quot;  Quantity: &quot;</span> + quantity + <span class="string">&quot; ] sold&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现命令的接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyStock</span> <span class="keyword">implements</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stock abcStock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BuyStock</span><span class="params">(Stock abcStock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.abcStock = abcStock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        abcStock.buy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SellStock</span> <span class="keyword">implements</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stock abcStock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SellStock</span><span class="params">(Stock abcStock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.abcStock = abcStock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        abcStock.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>创建命令调用类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Broker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orderList = <span class="keyword">new</span> ArrayList&lt;Order&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeOrder</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        orderList.add(order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">placeOrders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Order order : orderList) &#123;</span><br><span class="line">            order.execute();</span><br><span class="line">        &#125;</span><br><span class="line">        orderList.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stock abcStock = <span class="keyword">new</span> Stock();</span><br><span class="line"></span><br><span class="line">        BuyStock buyStockOrder = <span class="keyword">new</span> BuyStock(abcStock);</span><br><span class="line">        SellStock sellStockOrder = <span class="keyword">new</span> SellStock(abcStock);</span><br><span class="line"></span><br><span class="line">        Broker broker = <span class="keyword">new</span> Broker();</span><br><span class="line">        broker.takeOrder(buyStockOrder);</span><br><span class="line">        broker.takeOrder(sellStockOrder);</span><br><span class="line"></span><br><span class="line">        broker.placeOrders();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>备忘录设计模式</title>
    <url>/2020/12/24/%E5%A4%87%E5%BF%98%E5%BD%95%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="备忘录设计模式-Memento-Pattern"><a href="#备忘录设计模式-Memento-Pattern" class="headerlink" title="备忘录设计模式(Memento Pattern)"></a>备忘录设计模式(Memento Pattern)</h4><p><strong>描述：</strong> 备忘录设计模式是行为型设计模式之一，该设计模式用于保存对象当前的状态，并且在之后可以再次恢复到此状态，以便在适当的时候恢复此状态</p>
<p><strong>核心思想：</strong> 在不破坏封装的前提， 保存一个对象在某一个时刻的状态或者部分状态</p>
<p><strong>使用场景：</strong> </p>
<ul>
<li>需要保存恢复数据的相关状态场景</li>
<li>提供一个可回滚的操作</li>
<li>可以使用于快照功能</li>
</ul>
<p><strong>备忘录设计模式的优点</strong></p>
<ul>
<li>给用户提供了一种可以恢复状态的机制，可以使用户比较方便的回滚到某个历史状态</li>
<li>实现了历史的封装，使用户不用关心状态保存的细节</li>
</ul>
<p><strong>备忘录设计模式的缺点：</strong></p>
<ul>
<li>消耗资源，如果类的成员过多会占用比较大的资源，每一次保存都会消耗一定的内存</li>
</ul>
<p><strong>示例：</strong> </p>
<ul>
<li>备忘录</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> menoy;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; fruits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//窄接口，访问部分信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMenoy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menoy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//宽接口，本包之内皆可访问</span></span><br><span class="line">    Memento(<span class="keyword">int</span> menoy) &#123;</span><br><span class="line">        <span class="keyword">this</span>.menoy = menoy;</span><br><span class="line">        fruits = <span class="keyword">new</span> ArrayList();<span class="comment">//每次调用的时候重新生成，很重要</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//宽接口，本包之内皆可访问</span></span><br><span class="line">    <span class="function">List <span class="title">getFruits</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (List) fruits.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//宽接口，本包之内皆可访问</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addFruits</span><span class="params">(String fruit)</span> </span>&#123;</span><br><span class="line">        fruits.add(fruit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Menoy：&quot;</span> + menoy + <span class="string">&quot; ,Fruits:&quot;</span> + fruits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>原对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gamer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> menoy;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; fruits;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMenoy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menoy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Gamer</span><span class="params">(<span class="keyword">int</span> menoy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menoy = menoy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Memento m = <span class="keyword">new</span> Memento(menoy);</span><br><span class="line">        fruits.stream().filter(x -&gt; x.startsWith(<span class="string">&quot;好吃&quot;</span>)).forEach(x -&gt; &#123;</span><br><span class="line">            m.addFruits(x);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menoy = memento.getMenoy();</span><br><span class="line">        <span class="keyword">this</span>.fruits = memento.getFruits();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>客户端使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Gamer gamer = <span class="keyword">new</span> Gamer(<span class="number">100</span>);</span><br><span class="line">        Memento memento = <span class="keyword">null</span>;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;好吃的苹果&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;梨&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;好吃的橘子&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line">        gamer.setFruits(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;我是原本的&quot;</span> + gamer);</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = scanner.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                memento = gamer.createMemento();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">                gamer.restoreMemento(memento);</span><br><span class="line">                System.out.println(<span class="string">&quot;我是回退的:&quot;</span> + gamer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>外观设计模式</title>
    <url>/2020/12/21/%E5%A4%96%E8%A7%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="外观设计模式-Facade-pattern"><a href="#外观设计模式-Facade-pattern" class="headerlink" title="外观设计模式(Facade pattern)"></a>外观设计模式(Facade pattern)</h4><p><strong>描述：</strong> 外观设计模式就是隐藏系统的复杂性，向客户端提供一个客户端可以访问系统的接口，这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂度</p>
<p><strong>核心思想：</strong> 封装系统的复杂度，对外提供简单的接口</p>
<p><strong>使用场景：</strong> </p>
<ul>
<li>为复杂的模块或者子系统提供外界访问的接口</li>
<li>子系统相对的独立</li>
</ul>
<p><strong>外观设计模式的优点：</strong></p>
<ul>
<li>减少系统相互依赖</li>
<li>提高灵活性</li>
<li>提高安全性</li>
</ul>
<p><strong>外观设计模式的缺点：</strong> </p>
<ul>
<li>不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</li>
</ul>
<p><strong>示例：</strong></p>
<ul>
<li>接口类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Rectangle::draw()&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Square::draw()&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Circle::draw()&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>外观类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeMaker</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Shape circle;</span><br><span class="line">   <span class="keyword">private</span> Shape rectangle;</span><br><span class="line">   <span class="keyword">private</span> Shape square;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ShapeMaker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      circle = <span class="keyword">new</span> Circle();</span><br><span class="line">      rectangle = <span class="keyword">new</span> Rectangle();</span><br><span class="line">      square = <span class="keyword">new</span> Square();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">()</span></span>&#123;</span><br><span class="line">      circle.draw();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawRectangle</span><span class="params">()</span></span>&#123;</span><br><span class="line">      rectangle.draw();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawSquare</span><span class="params">()</span></span>&#123;</span><br><span class="line">      square.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FacadePatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      ShapeMaker shapeMaker = <span class="keyword">new</span> ShapeMaker();</span><br><span class="line"> </span><br><span class="line">      shapeMaker.drawCircle();</span><br><span class="line">      shapeMaker.drawRectangle();</span><br><span class="line">      shapeMaker.drawSquare();      </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>享元设计模式</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂设计模式</title>
    <url>/2020/12/10/%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="工厂设计模式-Factory-Pattern"><a href="#工厂设计模式-Factory-Pattern" class="headerlink" title="工厂设计模式(Factory Pattern)"></a>工厂设计模式(Factory Pattern)</h4><p><strong>描述：</strong> 工厂设计模式是用来生产对象的，在java中万般皆对象，如果创建的时候使用new 关键字会出现耦合严重，如果我们的对象名称换了那么所有出现此对象的地方都要进行修改。维护起来会十分的麻烦，所以就会使用工厂设计模式。</p>
<p><strong>工厂设计模式的种类：</strong></p>
<ul>
<li>简单工厂(Simple Factory Pattern)</li>
<li>工厂方法(Factory Method)</li>
<li>抽象工厂(Abstract Factory)</li>
</ul>
<h5 id="简单工厂设计模式-Simple-Factory-Pattern-静态工厂方法"><a href="#简单工厂设计模式-Simple-Factory-Pattern-静态工厂方法" class="headerlink" title="简单工厂设计模式(Simple Factory Pattern) /静态工厂方法"></a>简单工厂设计模式(Simple Factory Pattern) /静态工厂方法</h5><p><strong>示例：</strong></p>
<ul>
<li>电脑的抽象类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">interface</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">     <span class="function">String <span class="title">getRAM</span><span class="params">()</span></span>;<span class="comment">//内存</span></span><br><span class="line">     <span class="function">String <span class="title">getCPU</span><span class="params">()</span></span>;<span class="comment">//cpu</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>联想电脑厂家</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lianxiang</span>  <span class="keyword">implements</span>  <span class="title">Computer</span></span>&#123;</span><br><span class="line">    String ram;</span><br><span class="line">    String cpu;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">Lianxiang</span><span class="params">(String ram,String cpu)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu=cpu;</span><br><span class="line">        <span class="keyword">this</span>.ram=ram;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRAM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;联想的cpu是&quot;</span>+cpu;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;联想的ram是&quot;</span>+ram;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>华为电脑厂家</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Huawei</span> <span class="keyword">implements</span>   <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    String ram;</span><br><span class="line">    String cpu;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">Huawei</span><span class="params">(String ram,String cpu)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu=cpu;</span><br><span class="line">        <span class="keyword">this</span>.ram=ram;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRAM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;华为的cpu是&quot;</span>+cpu;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;华为的ram是&quot;</span>+ram;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>电脑工厂生产电脑对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> Computer <span class="title">getComputer</span><span class="params">(String type,String cpu,String ram)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;Huawei&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> Huawei(ram,cpu);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;Lianxiang&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> Lianxiang(ram,cpu);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端的调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Computer computer = ComputerFactory.getComputer(<span class="string">&quot;Huawei&quot;</span>, <span class="string">&quot;32G&quot;</span>, <span class="string">&quot;Inter&quot;</span>);</span><br><span class="line">        System.out.println(computer.getCPU()+computer.getRAM());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优点：</strong> 上下解耦， 如联想的命名改变，则客户端是不需要知道的</p>
<p><strong>缺点：</strong> 违反开闭原则，当我要增加一种品牌的电脑时休要修改工厂类，因此它只适用于产品对象较少的需求。</p>
<p><strong>附图：</strong></p>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82UML.png" alt="简单工厂设计模式UML"></p>
<h5 id="工厂方法设计模式-Factory-Method"><a href="#工厂方法设计模式-Factory-Method" class="headerlink" title="工厂方法设计模式(Factory Method)"></a>工厂方法设计模式(Factory Method)</h5><p><strong>描述：</strong> 主要用来创建单个产品的</p>
<p><strong>示例：</strong></p>
<ul>
<li>电脑的抽象类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">interface</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">     <span class="function">String <span class="title">getRAM</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function">String <span class="title">getCPU</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>电脑工厂的抽象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ComputerFactory</span> </span>&#123;</span><br><span class="line">     <span class="function">Computer <span class="title">getComputer</span><span class="params">( String cpu, String ram)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>华为电脑厂家</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Huawei</span> <span class="keyword">implements</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    String ram;</span><br><span class="line">    String cpu;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">Huawei</span><span class="params">(String ram,String cpu)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu=cpu;</span><br><span class="line">        <span class="keyword">this</span>.ram=ram;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRAM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;华为的cpu是&quot;</span>+cpu;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;华为的ram是&quot;</span>+ram;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li> 电脑工厂生产华为电脑厂家</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaweiFactory</span> <span class="keyword">implements</span>  <span class="title">ComputerFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">getComputer</span><span class="params">(String cpu, String ram)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Huawei(ram , cpu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端的调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HuaweiFactory huaweiFactory = <span class="keyword">new</span> HuaweiFactory();</span><br><span class="line">        Computer inter = huaweiFactory.getComputer(<span class="string">&quot;inter&quot;</span>, <span class="string">&quot;32G&quot;</span>);</span><br><span class="line">        System.out.println(inter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优点：</strong> 符合开闭原则 ， 上下解耦 。 如果要增加一个电脑工厂不用修改任何代码，直接实现Computer 和 ComputerFactory 即可</p>
<p><strong>缺点：</strong> 如果电脑的厂家很多的话会造成类的爆炸式增长，</p>
<p><strong>附图：</strong></p>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82UML.png" alt="工厂方法设计模式UML"></p>
<h5 id="抽象工厂设计模式-Abstract-Factory"><a href="#抽象工厂设计模式-Abstract-Factory" class="headerlink" title="抽象工厂设计模式(Abstract Factory)"></a>抽象工厂设计模式(Abstract Factory)</h5><p><strong>描述：</strong> 抽象工厂设计模式主要是用来创建 一系列的产品 </p>
<p><strong>应用场景：</strong> 当我们的一系列的产品簇趋向于稳定的时候，生产厂家可以变动，也就是华为只生产电脑和手机，不在扩展其他业务的时候使用它，而生产厂家可以有多个，不只华为一家 </p>
<p><strong>示例：</strong></p>
<ul>
<li>各种类型电脑的抽象类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DianNaoFactory</span> </span>&#123;</span><br><span class="line"><span class="comment">//各种系列的电脑</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hdiannao</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ldiannao</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">qdiannao</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">xdiannao</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>各种手机的抽象类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ShowJiFactory</span> </span>&#123;</span><br><span class="line">   <span class="comment">//各种系列的手机</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">p9shouji</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">p3shouji</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">p4shouji</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">p8shouji</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>华为厂家造电脑</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaweiDiaNao</span> <span class="keyword">implements</span>  <span class="title">DianNaoFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdiannao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;h系类的电脑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ldiannao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;l系类的电脑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">qdiannao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;q系类的电脑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xdiannao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;x系类的电脑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>华为厂家造手机</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaweiShouJi</span> <span class="keyword">implements</span> <span class="title">ShowJiFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">p9shouji</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;p9系类的手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">p3shouji</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;p3系类的手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">p4shouji</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;p4系类的手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">p8shouji</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;p8系类的手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>电子产品类的 抽象接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JiadainFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//电脑的生产者</span></span><br><span class="line">    <span class="function">DianNaoFactory   <span class="title">dianNaoFactory</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//手机的生产者</span></span><br><span class="line">    <span class="function">ShowJiFactory   <span class="title">showJiFactory</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>华为生产电子产品</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Huawei</span> <span class="keyword">implements</span>  <span class="title">JiadainFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DianNaoFactory <span class="title">dianNaoFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HuaweiDiaNao() ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShowJiFactory <span class="title">showJiFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HuaweiShouJi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端的调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JiadainFactory jiadain = <span class="keyword">new</span> Huawei();</span><br><span class="line">             jiadain.dianNaoFactory().hdiannao();</span><br><span class="line">             jiadain.showJiFactory().p3shouji();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优点：</strong> 具体的产品代码隔离，无需关注创建的细节，将一个系列的产品在一起创建。也就是我们增加生产厂家的时候是很容易的。</p>
<p><strong>缺点：</strong> 显而易见，当我们要怎加一个产平簇的时候是很麻烦的，我们要修改生产厂家的接口，违反开闭原则。</p>
<p><strong>附图：</strong></p>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82UML.png" alt="抽象工厂设计模式UML"></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的批处理命令</title>
    <url>/2020/12/05/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%89%B9%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="常用的批处理命令"><a href="#常用的批处理命令" class="headerlink" title="常用的批处理命令"></a>常用的批处理命令</h2><h4 id="1-启动jar"><a href="#1-启动jar" class="headerlink" title="1.启动jar"></a>1.启动jar</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start javaw -jar oes.jar</span><br><span class="line"></span><br><span class="line">echo ------------启动成功!--------------------</span><br><span class="line">pause</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<h4 id="2-停止服务-杀死进程"><a href="#2-停止服务-杀死进程" class="headerlink" title="2. 停止服务 杀死进程"></a>2. 停止服务 杀死进程</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off &amp; setlocal EnableDelayedExpansion</span><br><span class="line"></span><br><span class="line">set obj[0]&#x3D;9111</span><br><span class="line"></span><br><span class="line">set port&#x3D;0</span><br><span class="line">set pid&#x3D;0</span><br><span class="line"></span><br><span class="line">for &#x2F;f &quot;usebackq delims&#x3D;&#x3D; tokens&#x3D;1-2&quot; %%a in (&#96;set obj&#96;) do (</span><br><span class="line">    set port&#x3D;%%b</span><br><span class="line">    for &#x2F;f &quot;tokens&#x3D;5&quot; %%m in (&#39;netstat -aon ^| findstr &quot;:%%b&quot;&#39;) do (</span><br><span class="line">        set pid&#x3D;%%m</span><br><span class="line">    )</span><br><span class="line">    if &quot;!pid!&quot;&#x3D;&#x3D;&quot;0&quot; (</span><br><span class="line">        echo 端口号【!port!】没有占用</span><br><span class="line">    ) else (</span><br><span class="line">        echo 端口号【!port!】相关进程以杀死</span><br><span class="line">        taskkill &#x2F;f &#x2F;pid !pid!</span><br><span class="line">    )</span><br><span class="line">    set pid&#x3D;0</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<h4 id="3-部署hexo"><a href="#3-部署hexo" class="headerlink" title="3.部署hexo"></a>3.部署hexo</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off &amp; setlocal EnableDelayedExpansion</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D:</span><br><span class="line">cd D:\hexo</span><br><span class="line"></span><br><span class="line">echo.  </span><br><span class="line">echo.     </span><br><span class="line">echo.            </span><br><span class="line">echo ************************************ 美好的一天从敲代码开始 ********************************************************</span><br><span class="line">:s</span><br><span class="line">echo.    </span><br><span class="line">echo.     </span><br><span class="line">set &#x2F;p operation&#x3D;请输入你要的操作 n 代表你要新建一个markdown文件 d 代表你要部署项目到服务 :</span><br><span class="line">if &quot;%operation%&quot; &#x3D;&#x3D; &quot;n&quot; (</span><br><span class="line">echo.    </span><br><span class="line">echo.</span><br><span class="line">set &#x2F;p name&#x3D;请输入你要创建的文件名称:</span><br><span class="line">echo.    </span><br><span class="line">echo.</span><br><span class="line">echo 文件名称:!name!</span><br><span class="line">echo.    </span><br><span class="line">echo.</span><br><span class="line">echo 请稍候......</span><br><span class="line">goto n</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if &quot;%operation%&quot; &#x3D;&#x3D; &quot;d&quot; (</span><br><span class="line">goto d</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if &quot;%operation%&quot; NEQ  &quot;n&quot;  ( </span><br><span class="line">if &quot;%operation%&quot; NEQ  &quot;d&quot; (</span><br><span class="line">if &quot;%operation%&quot; &#x3D;&#x3D;  &quot;&quot; (</span><br><span class="line">echo 输入错误，请重新输入 &amp; pause</span><br><span class="line">goto s</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">:n</span><br><span class="line">echo.    </span><br><span class="line">echo.   </span><br><span class="line">hexo new  !name! &amp;  start D:\App\app\Typora\Typora.exe   &quot;D:\hexo\source\_posts\%name%.md&quot;  </span><br><span class="line"></span><br><span class="line">:d</span><br><span class="line">echo.    </span><br><span class="line">echo.   </span><br><span class="line">hexo clean | hexo g &amp; gulp | hexo d </span><br><span class="line">echo.</span><br><span class="line">echo 部署完成</span><br><span class="line">echo.</span><br><span class="line">pause</span><br><span class="line">goto s</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
  <entry>
    <title>建造者设计模式</title>
    <url>/2020/12/08/%E5%BB%BA%E9%80%A0%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="建造者设计模式-（BuilderPattern）"><a href="#建造者设计模式-（BuilderPattern）" class="headerlink" title="建造者设计模式 （BuilderPattern）"></a>建造者设计模式 （BuilderPattern）</h4><p><strong>描述：</strong> 首先建造者设计模式是用来构建复杂的对象的，它主要强调的是当对于一个复杂对象的构建，比如当一个类的构造函数的参数超过4个的时候，且都是可变参数时侯考虑使用建造者设计模式。</p>
<p><strong>核心思想:</strong>  当你的一个类需要很多的参数来构建时就可以把这些参数提取出来放在另一个类中进行构建</p>
<p><strong>建造者设计模式的优点：</strong></p>
<ul>
<li>封装性</li>
<li>独立 ， 易于扩展</li>
<li>便于控制细节风险，对建造过程逐步细化</li>
</ul>
<p><strong>建造者设计模式的使用场景：</strong></p>
<p>-　相同的方法，不同的执行顺序产生不同的结果<br>-　多个零件或者部件，可以配置到多个对象中产生不同的效果<br>-　产品类中调用的顺序不同会产生不同的结果</p>
<p><strong>示例:</strong></p>
<ul>
<li>构建 制茶模型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TeaModel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">caiZhai</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">weiTiao</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">hunGan</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">nianRou</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">faJiao</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">ganZao</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">baoCun</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourse</span><span class="params">(ArrayList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildTea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.forEach(x -&gt; &#123;</span><br><span class="line">            <span class="keyword">switch</span> (x) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;采摘&quot;</span>:</span><br><span class="line">                    <span class="keyword">this</span>.caiZhai();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;萎调&quot;</span>:</span><br><span class="line">                    <span class="keyword">this</span>.weiTiao();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;烘干&quot;</span>:</span><br><span class="line">                    <span class="keyword">this</span>.hunGan();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;保存&quot;</span>:</span><br><span class="line">                    <span class="keyword">this</span>.baoCun();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;干燥&quot;</span>:</span><br><span class="line">                    <span class="keyword">this</span>.ganZao();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;发酵&quot;</span>:</span><br><span class="line">                    <span class="keyword">this</span>.faJiao();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;揉捻&quot;</span>:</span><br><span class="line">                    <span class="keyword">this</span>.nianRou();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;未知的操作&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>红茶实现模型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackTeaModel</span> <span class="keyword">extends</span> <span class="title">TeaModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">caiZhai</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;红茶：采摘&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">weiTiao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;红茶：萎调&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hunGan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;红茶：烘干&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nianRou</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;红茶：揉捻&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">faJiao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;红茶：发酵&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ganZao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;红茶：干燥&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">baoCun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;红茶： 保存&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>抽象制茶的建造者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractTeaBuild</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置调制茶的顺序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setCourse</span><span class="params">(ArrayList&lt;String&gt; list)</span></span>;</span><br><span class="line">     </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取茶叶</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> TeaModel <span class="title">getTea</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>具体茶叶的建造者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackTeaBuilder</span> <span class="keyword">extends</span> <span class="title">AbstractTeaBuild</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 红茶的构建者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TeaModel tm = <span class="keyword">new</span> BlackTeaModel();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourse</span><span class="params">(ArrayList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        tm.setCourse(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TeaModel <span class="title">getTea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调制茶叶</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeaMakeDirector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AbstractTeaBuild ab = <span class="keyword">new</span> BlackTeaBuilder();</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//制作红茶 红茶制作工序 ：采摘 → 萎调 → 揉捻 → 发酵 → 干燥</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BlackTeaModel <span class="title">getBlackTea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.clear();</span><br><span class="line">        list.add(<span class="string">&quot;采摘&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;萎调&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;揉捻&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;发酵&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;干燥&quot;</span>);</span><br><span class="line">        ab.setCourse(list);</span><br><span class="line">        <span class="keyword">return</span> (BlackTeaModel) ab.getTea();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>需求来了 要三个红茶</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="comment">//来三杯绿茶</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TeaMakeDirector teaMakeDirector = <span class="keyword">new</span> TeaMakeDirector();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++)&#123;</span><br><span class="line">            teaMakeDirector.getBlackTea().buildTea();</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+i+ <span class="string">&quot;杯红茶已好&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结:</strong></p>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/%E5%BB%BA%E9%80%A0%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fuml.jpg" alt="建造者设计模式UML"></p>
<p><strong>product就是最终要生成的对象  例如:(BlackTeaModel)</strong></p>
<p><strong>Builde就是建造者的抽象基类  例如:( AbstractTeaBuild )</strong> </p>
<p><strong>ConcreteBuilde实现 Builde  例如:( BlackTeaBuilder)</strong> </p>
<p><strong>Director: 决定如何构建最终产品的算法. 其会包含一个负责组装的方法(getBlackTea) 调用这个方法就相当于组装好了一个产品  例如(TeaMakeDirector)</strong></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>桥接设计模式</title>
    <url>/2020/12/20/%E6%A1%A5%E6%8E%A5%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="桥接设计模式-Bridge-Pattern"><a href="#桥接设计模式-Bridge-Pattern" class="headerlink" title="桥接设计模式(Bridge Pattern)"></a>桥接设计模式(Bridge Pattern)</h4><p><strong>描述：</strong> 桥接设计模式是用于把抽象化于实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型设计模式，它通过提供抽象化和实现化之间的桥接结构来实现二者的解耦。</p>
<p><strong>核心思想：</strong> 将抽象部分与实现部分分离，使它们可以独立的变化</p>
<p><strong>使用场景：</strong> </p>
<ul>
<li>如果一个系统需要在构建的抽象和具体角色化之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系通过桥接模式可以使它们在抽象层建立一个关联关系。</li>
<li>对于那些不希望使用继承或者因为多层次导致导致的系统类的个数急剧增加的系统，桥接模式尤为适用</li>
<li>一个类存在两个独立变化的维度，且这两个类都需要进行扩展。</li>
</ul>
<p><strong>桥接设计模式的优点：</strong></p>
<ul>
<li> 抽象和实现的分离。 </li>
<li>优秀的扩展能力。 </li>
<li>实现细节对客户透明。</li>
</ul>
<p><strong>桥接设计模式的缺点：</strong></p>
<ul>
<li>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</li>
</ul>
<p><strong>示例：</strong></p>
<ul>
<li>目标接口。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建实现了 <em>DrawAPI</em> 接口的实体桥接实现类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedCircle</span> <span class="keyword">implements</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Drawing Circle[ color: red, radius: &quot;</span></span><br><span class="line">         + radius +<span class="string">&quot;, x: &quot;</span> +x+<span class="string">&quot;, &quot;</span>+ y +<span class="string">&quot;]&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenCircle</span> <span class="keyword">implements</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Drawing Circle[ color: green, radius: &quot;</span></span><br><span class="line">         + radius +<span class="string">&quot;, x: &quot;</span> +x+<span class="string">&quot;, &quot;</span>+ y +<span class="string">&quot;]&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>抽象桥接接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="keyword">protected</span> DrawAPI drawAPI;</span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="title">Shape</span><span class="params">(DrawAPI drawAPI)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.drawAPI = drawAPI;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现桥接接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> x, y, radius;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> radius, DrawAPI drawAPI)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(drawAPI);</span><br><span class="line">      <span class="keyword">this</span>.x = x;  </span><br><span class="line">      <span class="keyword">this</span>.y = y;  </span><br><span class="line">      <span class="keyword">this</span>.radius = radius;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      drawAPI.drawCircle(radius,x,y);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BridgePatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Shape redCircle = <span class="keyword">new</span> Circle(<span class="number">100</span>,<span class="number">100</span>, <span class="number">10</span>, <span class="keyword">new</span> RedCircle());</span><br><span class="line">      Shape greenCircle = <span class="keyword">new</span> Circle(<span class="number">100</span>,<span class="number">100</span>, <span class="number">10</span>, <span class="keyword">new</span> GreenCircle());</span><br><span class="line"> </span><br><span class="line">      redCircle.draw();</span><br><span class="line">      greenCircle.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>模板设计模式</title>
    <url>/2021/01/07/%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="模板设计模式-Template-Pattern"><a href="#模板设计模式-Template-Pattern" class="headerlink" title="模板设计模式(Template Pattern)"></a>模板设计模式(Template Pattern)</h4><p><strong>描述：</strong> 定义一个操作中的算法骨架，而将具体的步骤延迟到子类当中。模板方法子类不改变一个算法的结构即可重新定义算法的实现</p>
<p><strong>核心思想：</strong> 在父类中定义算法的执行步骤顺序，由子类来具体实现，但不能改变执行顺序</p>
<p><strong>使用场景：</strong>  </p>
<ul>
<li>有多个子类共有的方法，且逻辑相同。 </li>
<li>重要的、复杂的方法，可以考虑作为模板方法。</li>
</ul>
<p><strong>模板设计模式的优点：</strong></p>
<ul>
<li>封装不变部分，扩展可变部分。</li>
<li>提取公共代码，便于维护。 </li>
<li>行为由父类控制，子类实现。</li>
</ul>
<p><strong>模板设计模式的缺点</strong></p>
<ul>
<li>每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大</li>
</ul>
<p><strong>示例：</strong></p>
<ul>
<li>抽象出一个模板对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模板</span></span><br><span class="line"> <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//初始化游戏</span></span><br><span class="line">        initialize();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始游戏</span></span><br><span class="line">        startPlay();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//结束游戏</span></span><br><span class="line">        endPlay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>不同对象的实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Cricket</span> <span class="keyword">implements</span>  <span class="title">Game</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cricket  初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cricket  开始&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cricket  退出结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Football</span> <span class="keyword">implements</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Football 初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Football 开始&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Football 退出结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Game game = <span class="keyword">new</span> Cricket();</span><br><span class="line">        game.play();</span><br><span class="line">        System.out.println();</span><br><span class="line">        game = <span class="keyword">new</span> Football();</span><br><span class="line">        game.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>状态设计模式</title>
    <url>/2020/12/25/%E7%8A%B6%E6%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="状态设计模式-State-Pattern"><a href="#状态设计模式-State-Pattern" class="headerlink" title="状态设计模式(State Pattern)"></a>状态设计模式(State Pattern)</h4><p><strong>描述：</strong> 在状态设计模式中类的行为是基于状态改变的，这种类型的模式属于行为设计模式。在状态上设计模式中我们创建表示各种状态和一个行为随这状态对象改变而改变</p>
<p><strong>核心思想：</strong> 允许对象在内部状态发生改变时改变它的行为，对象看起来好像改变了它的类</p>
<p><strong>使用场景：</strong></p>
<ul>
<li>行为随状态的改变而改变的场景</li>
<li>条件，分支语句的代替者</li>
</ul>
<p><strong>状态设计模式的优点：</strong></p>
<ul>
<li>封装了转换规则。 </li>
<li> 枚举可能的状态，在枚举状态之前需要确定状态种类。 </li>
<li>将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 </li>
<li>允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 </li>
<li>可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。</li>
</ul>
<p><strong>状态设计模式的缺点：</strong></p>
<ul>
<li>状态模式的使用必然会增加系统类和对象的个数。 </li>
<li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 </li>
<li>状态模式对”开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。</li>
</ul>
<p><strong>示例：</strong></p>
<p><strong>需求：</strong></p>
<p>我们考虑设计一个金库警报系统，这个系统会根据白天晚上做出不同的响应。</p>
<p>有一个金库<br> 金库与警报中心相连<br> 金库里有警铃和电话<br> 金库里有时钟</p>
<p>金库只能在白天使用<br> 白天使用金库，会在警报中心留下记录<br> 晚上使用金库，会向警报中心发送紧急事态通知</p>
<p>警铃白天晚上都能用<br> 使用警铃，会向警报中心发送紧急事态通知</p>
<p>电话都可以使用<br> 白天使用电话，会呼叫警报中心<br> 晚上使用电话，会呼叫警报中心的留言电话</p>
<p>基本就是以上的需求逻辑。</p>
<p><strong>分析：</strong></p>
<p>状态模式会发现，这些不同的行为，主要依赖于两个状态，就是白天和晚上。所以状态模式会抽象出这两种状态，每个状态就会有自己的行为实现，比如白天这个状态会实现自己的使用金库的方法，通话的方法，晚上的类也会实现自己的行为逻辑，最后我们只要取得状态对象的委托调用他们的方法就行了，不管他们具体是怎么实现的。</p>
<ul>
<li>抽象状态接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doClock</span><span class="params">(Context context, <span class="keyword">int</span> hour)</span></span>;    <span class="comment">// 设置时间</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doUse</span><span class="params">(Context context)</span></span>;                <span class="comment">// 使用金库</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doAlarm</span><span class="params">(Context context)</span></span>;              <span class="comment">// 按下警铃</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doPhone</span><span class="params">(Context context)</span></span>;              <span class="comment">// 正常通话</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>实现状态接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NightState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> NightState singleton = <span class="keyword">new</span> NightState();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NightState</span><span class="params">()</span> </span>&#123;                              <span class="comment">// 构造函数的可见性是private</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> State <span class="title">getInstance</span><span class="params">()</span> </span>&#123;                 <span class="comment">// 获取唯一实例</span></span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doClock</span><span class="params">(Context context, <span class="keyword">int</span> hour)</span> </span>&#123;    <span class="comment">// 设置时间</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">9</span> &lt;= hour &amp;&amp; hour &lt; <span class="number">17</span>) &#123;</span><br><span class="line">            context.changeState(DayState.getInstance());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doUse</span><span class="params">(Context context)</span> </span>&#123;                <span class="comment">// 使用金库</span></span><br><span class="line">        context.callSecurityCenter(<span class="string">&quot;紧急：晚上使用金库！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAlarm</span><span class="params">(Context context)</span> </span>&#123;              <span class="comment">// 按下警铃</span></span><br><span class="line">        context.callSecurityCenter(<span class="string">&quot;按下警铃(晚上)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPhone</span><span class="params">(Context context)</span> </span>&#123;              <span class="comment">// 正常通话</span></span><br><span class="line">        context.recordLog(<span class="string">&quot;晚上的通话录音&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;                          <span class="comment">// 显示表示类的文字</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[晚上]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DayState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DayState singleton = <span class="keyword">new</span> DayState();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DayState</span><span class="params">()</span> </span>&#123;                                <span class="comment">// 构造函数的可见性是private</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> State <span class="title">getInstance</span><span class="params">()</span> </span>&#123;                 <span class="comment">// 获取唯一实例</span></span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doClock</span><span class="params">(Context context, <span class="keyword">int</span> hour)</span> </span>&#123;    <span class="comment">// 设置时间</span></span><br><span class="line">        <span class="keyword">if</span> (hour &lt; <span class="number">9</span> || <span class="number">17</span> &lt;= hour) &#123;</span><br><span class="line">            context.changeState(NightState.getInstance());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doUse</span><span class="params">(Context context)</span> </span>&#123;                <span class="comment">// 使用金库</span></span><br><span class="line">        context.recordLog(<span class="string">&quot;使用金库(白天)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAlarm</span><span class="params">(Context context)</span> </span>&#123;              <span class="comment">// 按下警铃</span></span><br><span class="line">        context.callSecurityCenter(<span class="string">&quot;按下警铃(白天)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPhone</span><span class="params">(Context context)</span> </span>&#123;              <span class="comment">// 正常通话</span></span><br><span class="line">        context.callSecurityCenter(<span class="string">&quot;正常通话(白天)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;                          <span class="comment">// 显示表示类的文字</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[白天]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>抽象 出上下文 和 白天晚上要干的事情</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setClock</span><span class="params">(<span class="keyword">int</span> hour)</span></span>;                <span class="comment">// 设置时间</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changeState</span><span class="params">(State state)</span></span>;          <span class="comment">// 改变状态</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">callSecurityCenter</span><span class="params">(String msg)</span></span>;    <span class="comment">// 联系警报中心</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordLog</span><span class="params">(String msg)</span></span>;             <span class="comment">// 在警报中心留下记录</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现抽象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SafeFrame</span> <span class="keyword">implements</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> State state = DayState.getInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置时间</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClock</span><span class="params">(<span class="keyword">int</span> hour)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        state.doClock(<span class="keyword">this</span>, hour);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(Integer e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="number">1</span>) &#123;           <span class="comment">// 金库使用按钮</span></span><br><span class="line">            state.doUse(<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e == <span class="number">2</span>) &#123;  <span class="comment">// 按下警铃按钮</span></span><br><span class="line">            state.doAlarm(<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e == <span class="number">3</span>) &#123;  <span class="comment">// 正常通话按钮</span></span><br><span class="line">            state.doPhone(<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e == <span class="number">4</span>) &#123;   <span class="comment">// 结束按钮</span></span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改变状态</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeState</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        System.out.println(<span class="string">&quot;从&quot;</span> + <span class="keyword">this</span>.state + <span class="string">&quot;状態变为了&quot;</span> + state + <span class="string">&quot;状态。&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 联系警报中心</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callSecurityCenter</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;call! &quot;</span> + msg + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在警报中心留下记录</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recordLog</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;record ... &quot;</span> + msg + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SafeFrame frame = <span class="keyword">new</span> SafeFrame();</span><br><span class="line">        frame.setClock(<span class="number">18</span>);</span><br><span class="line">        frame.actionPerformed(<span class="number">1</span>);</span><br><span class="line">        frame.actionPerformed(<span class="number">2</span>);</span><br><span class="line">        frame.actionPerformed(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>策略者设计模式</title>
    <url>/2020/12/08/%E7%AD%96%E7%95%A5%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="策略者设计模式-StrategyPattern"><a href="#策略者设计模式-StrategyPattern" class="headerlink" title="策略者设计模式 (StrategyPattern)"></a>策略者设计模式 (StrategyPattern)</h4><p><strong>描述：</strong>  策略者解决的是在多种算法相似的情况下，使用if….else…ss等所带来的的复杂代码。解决的思路是，将这些算法的代码封装成一个一个的类，实现统一接口。</p>
<p><strong>核心思想：</strong> 策略设计模式就是 实现一种策略 展示不同的结果</p>
<p><strong>使用场景：</strong> 有多种动物需要对它们进行排序，但每种动物的排序规则都不一样 此时我们就会写很多的if() 判断语句  此时就可以使用策略者设计模式</p>
<p><strong>策略者设计模式的优点：</strong></p>
<ul>
<li>算法可以自由的切换</li>
<li>减少多重判断的使用</li>
<li>扩展性好</li>
</ul>
<p><strong>策略者设计模式的缺点：</strong></p>
<ul>
<li>策略类都会暴露在外，客户端都要知道每个策略算法的区别</li>
<li>如果系统中的的算法种类很多的话 策略类会爆炸式增长，不便于维护</li>
</ul>
<p><strong>示例：</strong></p>
<ul>
<li>猫的对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">Cat</span><span class="params">(Integer age,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li> 抽象算法规则</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(T o1, T o2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>猫的算法规则实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatSort</span> <span class="keyword">implements</span>  <span class="title">Comparator</span>&lt;<span class="title">Cat</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Cat o1, Cat o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o1.getName().compareTo(o2.getName())&gt;<span class="number">0</span>)  <span class="keyword">return</span>  <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>  <span class="keyword">if</span>(o1.getName().compareTo(o2.getName())==<span class="number">0</span>)&#123;</span><br><span class="line">             <span class="keyword">if</span>(o1.getAge().compareTo(o2.getAge())&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">             <span class="keyword">else</span>  <span class="keyword">if</span>(o1.getAge().compareTo(o2.getAge())&lt;<span class="number">0</span>) <span class="keyword">return</span>  -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>统一的算法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(T[] arr, Comparator&lt;T&gt; comparator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            T temp = arr[i];</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">for</span> (; j &gt; <span class="number">0</span> &amp;&amp; comparator.compare(arr[j - <span class="number">1</span>], temp) &gt; <span class="number">0</span>; ) &#123;</span><br><span class="line">                arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j != i) &#123;</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端的调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    test&lt;Cat&gt; cattest = <span class="keyword">new</span> test&lt;Cat&gt;();</span><br><span class="line">    Cat[] cat = &#123;<span class="keyword">new</span> Cat(<span class="number">2</span>, <span class="string">&quot;a&quot;</span>), <span class="keyword">new</span> Cat(<span class="number">3</span>, <span class="string">&quot;d&quot;</span>), <span class="keyword">new</span> Cat(<span class="number">4</span>, <span class="string">&quot;b&quot;</span>), <span class="keyword">new</span> Cat(<span class="number">6</span>, <span class="string">&quot;a&quot;</span>), <span class="keyword">new</span> Cat(<span class="number">3</span>, <span class="string">&quot;c&quot;</span>)&#125;;</span><br><span class="line">    cattest.insertSort(cat, <span class="keyword">new</span> CatSort());</span><br><span class="line">    System.out.println(Arrays.toString(cat));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<p>此处的主要思想就是使用的向上转型的思想，比如我以上的方法想要在加几个猫的排序规则，那么此时我只需要实现排序规则的接口就可以了，不需要改动其他的代码，主要就是我的排序算法insertSort（）使用是父类的Comparator接收的参数，只要实现了它，是它的子类，那么你就可以自由任意切换各种算法。</p>
<p><strong>附图：</strong></p>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/%E7%AD%96%E7%95%A5%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FUml.png" alt="策略者设计模式UML"></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>组合设计模式</title>
    <url>/2020/12/20/%E7%BB%84%E5%90%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="组合设计模式-Composite-Pattern"><a href="#组合设计模式-Composite-Pattern" class="headerlink" title="组合设计模式(Composite Pattern)"></a>组合设计模式(Composite Pattern)</h4><p><strong>描述：</strong> 组合设计模式又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表时部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象的树形结构</p>
<p><strong>核心思想：</strong> 将对象组合成树形结构以表示“部分—整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用一致性。</p>
<p><strong>使用场景：</strong></p>
<ul>
<li>您想表示的部分-整体层次结构</li>
<li>您希望用户忽略组合对象与单个对象的不同，用户将统一的使用组合结构中的所有对象</li>
</ul>
<p><strong>组合设计模式的优点：</strong> </p>
<ul>
<li>高层模块表用简单</li>
<li>节点自由增加</li>
</ul>
<p><strong>组合设计模式的缺点：</strong></p>
<ul>
<li>在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。</li>
</ul>
<p><strong>示例：</strong></p>
<ul>
<li>创建一个对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String dept;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> salary;</span><br><span class="line">   <span class="keyword">private</span> List&lt;Employee&gt; subordinates;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//构造函数</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name,String dept, <span class="keyword">int</span> sal)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.dept = dept;</span><br><span class="line">      <span class="keyword">this</span>.salary = sal;</span><br><span class="line">      subordinates = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Employee e)</span> </span>&#123;</span><br><span class="line">      subordinates.add(e);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Employee e)</span> </span>&#123;</span><br><span class="line">      subordinates.remove(e);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getSubordinates</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> subordinates;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="string">&quot;Employee :[ Name : &quot;</span>+ name </span><br><span class="line">      +<span class="string">&quot;, dept : &quot;</span>+ dept + <span class="string">&quot;, salary :&quot;</span></span><br><span class="line">      + salary+<span class="string">&quot; ]&quot;</span>);</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositePatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Employee CEO = <span class="keyword">new</span> Employee(<span class="string">&quot;John&quot;</span>,<span class="string">&quot;CEO&quot;</span>, <span class="number">30000</span>);</span><br><span class="line"> </span><br><span class="line">      Employee headSales = <span class="keyword">new</span> Employee(<span class="string">&quot;Robert&quot;</span>,<span class="string">&quot;Head Sales&quot;</span>, <span class="number">20000</span>);</span><br><span class="line"> </span><br><span class="line">      Employee headMarketing = <span class="keyword">new</span> Employee(<span class="string">&quot;Michel&quot;</span>,<span class="string">&quot;Head Marketing&quot;</span>, <span class="number">20000</span>);</span><br><span class="line"> </span><br><span class="line">      Employee clerk1 = <span class="keyword">new</span> Employee(<span class="string">&quot;Laura&quot;</span>,<span class="string">&quot;Marketing&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">      Employee clerk2 = <span class="keyword">new</span> Employee(<span class="string">&quot;Bob&quot;</span>,<span class="string">&quot;Marketing&quot;</span>, <span class="number">10000</span>);</span><br><span class="line"> </span><br><span class="line">      Employee salesExecutive1 = <span class="keyword">new</span> Employee(<span class="string">&quot;Richard&quot;</span>,<span class="string">&quot;Sales&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">      Employee salesExecutive2 = <span class="keyword">new</span> Employee(<span class="string">&quot;Rob&quot;</span>,<span class="string">&quot;Sales&quot;</span>, <span class="number">10000</span>);</span><br><span class="line"> </span><br><span class="line">      CEO.add(headSales);</span><br><span class="line">      CEO.add(headMarketing);</span><br><span class="line"> </span><br><span class="line">      headSales.add(salesExecutive1);</span><br><span class="line">      headSales.add(salesExecutive2);</span><br><span class="line"> </span><br><span class="line">      headMarketing.add(clerk1);</span><br><span class="line">      headMarketing.add(clerk2);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//打印该组织的所有员工</span></span><br><span class="line">      System.out.println(CEO); </span><br><span class="line">      <span class="keyword">for</span> (Employee headEmployee : CEO.getSubordinates()) &#123;</span><br><span class="line">         System.out.println(headEmployee);</span><br><span class="line">         <span class="keyword">for</span> (Employee employee : headEmployee.getSubordinates()) &#123;</span><br><span class="line">            System.out.println(employee);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;        </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>网络OSI七层模型理解</title>
    <url>/2021/03/21/%E7%BD%91%E7%BB%9COSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="网络OSI七层模型"><a href="#网络OSI七层模型" class="headerlink" title="网络OSI七层模型"></a>网络OSI七层模型</h3><p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/data/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9Cosi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B.png" alt="网络osi七层模型"></p>
<ul>
<li>应用层<br>网络服务与最终用户的一个接口。<br>协议有：HTTP FTP TFTP SMTP SNMP DNS TELNET HTTPS POP3 DHCP</li>
<li>表示层<br>数据的表示、安全、压缩。（在五层模型里面已经合并到了应用层）<br>格式有，JPEG、ASCll、EBCDIC、加密格式等 [2]</li>
<li>会话层<br>建立、管理、终止会话。（在五层模型里面已经合并到了应用层）<br>对应主机进程，指本地主机与远程主机正在进行的会话</li>
<li>传输层<br>定义传输数据的协议端口号，以及流控和差错校验。<br>协议有：TCP UDP，数据包一旦离开网卡即进入网络传输层</li>
<li>网络层<br>进行逻辑地址寻址，实现不同网络之间的路径选择。<br>协议有：ICMP IGMP IP（IPV4 IPV6）</li>
<li>数据链路层<br>建立逻辑连接、进行硬件地址寻址、差错校验 [3]  等功能。（由底层网络定义协议）<br>将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正。</li>
<li>物理层<br>建立、维护、断开物理连接。（由底层网络定义协议）</li>
</ul>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰器设计模式</title>
    <url>/2020/12/13/%E8%A3%85%E9%A5%B0%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="装饰器设计模式-Decorator-Pattern"><a href="#装饰器设计模式-Decorator-Pattern" class="headerlink" title="装饰器设计模式(Decorator Pattern)"></a>装饰器设计模式(Decorator Pattern)</h4><p><strong>描述：</strong> 装饰器设计模式就是给对象动态的添加职责，行为的，它是用来代替继承的。相比于继承它更显得灵活。</p>
<p><strong>核心思想：</strong> 一般情况下当我们要扩展一个类的时候会使用继承，但这不是很安全，随着功能的增加子类会爆炸式的增长。</p>
<p><strong>装饰器设计模式的优点：</strong> 装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能</p>
<p><strong>装饰器设计模式的缺点：</strong> 多层装饰比较复杂。</p>
<p><strong>装饰器设计模式的使用场景：</strong>  </p>
<ul>
<li>扩展一个类的功能。 </li>
<li>动态增加功能，动态撤销</li>
</ul>
<p><strong>示例:</strong></p>
<ul>
<li>动物的抽象接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 一个吃的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>  <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>猫实现动物接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span>  <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wo是猫，在吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>装饰器的抽象类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CatDecoractor</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Animal animal;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">CatDecoractor</span><span class="params">(Animal animal)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.animal=animal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        animal.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li> 现在给猫扩展一个喝水的方法  </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatDecoractorImpl</span>  <span class="keyword">extends</span>  <span class="title">CatDecoractor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  Animal animal;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CatDecoractorImpl</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(animal);</span><br><span class="line">        <span class="keyword">this</span>.animal=animal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        animal.eat();</span><br><span class="line">        drinking(animal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">drinking</span><span class="params">(Animal animal)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃完之后在喝水&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">        CatDecoractorImpl catDecoractor = <span class="keyword">new</span> CatDecoractorImpl(cat);</span><br><span class="line">        catDecoractor.eat();</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>附图：</strong></p>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/%E8%A3%85%E9%A5%B0%E5%99%A8%E7%B1%BB%E5%9B%BE.png" alt="装饰器设计模式UML"></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者设计模式</title>
    <url>/2020/12/14/%E8%A7%82%E5%AF%9F%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="观察者设计模式-Observer-Pattern"><a href="#观察者设计模式-Observer-Pattern" class="headerlink" title="观察者设计模式(Observer Pattern)"></a>观察者设计模式(Observer Pattern)</h4><p><strong>描述：</strong> 当对象存在一对多的关系时，使用观察者设计模式。比如一个对象被修改时，则会通知依赖他的对象。观察者设计模式属于行为行设计模式</p>
<p><strong>核心思想：</strong> 当一个对象发生变化时通知其他依赖它的对象</p>
<p><strong>使用场景：</strong> </p>
<ul>
<li><p>一个对象改变一个或多个对象也发生变化，而不知道有多少对象发生变化，降低对象之间的耦合度。</p>
</li>
<li><p>一个对象必须通知其他的对象，而不知道这些对象都有谁</p>
</li>
<li><p>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制</p>
</li>
<li><p>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。</p>
</li>
</ul>
<p><strong>观察者设计模式优点：</strong> </p>
<ul>
<li>观察者和被观察者时抽象解耦的</li>
<li>建立一套触发机制</li>
</ul>
<p><strong>观察者设计模式缺点：</strong></p>
<ul>
<li>如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。</li>
<li>如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。</li>
<li>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</li>
</ul>
<p><strong>注意事项：</strong></p>
<ul>
<li>JAVA 中已经有了对观察者模式的支持类</li>
<li>避免循环引用</li>
<li>如果顺序执行，某一观察者会导致系统卡壳，一般采用异步的方式</li>
</ul>
<p><strong>示例：</strong></p>
<p>现有一个需求，有一个天气预报系统，获取天气对象，三个字段，温度 ， 湿度， 气压，当它们的数值发生变化时通知到布告板展现出来 </p>
<ul>
<li>抽象出主题接口对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主题（发布者、被观察者）</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注册一个观察者进来</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一个观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通知其他观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>抽象观察者的对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;   </span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>抽象布告对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DisplayElement</span> </span>&#123;    <span class="comment">// 更换布告</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>被观察者的具体实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList observers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;<span class="comment">//温度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;<span class="comment">//湿度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;<span class="comment">//气压</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        observers = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册观察者     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        observers.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = observers.indexOf(o);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            observers.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知各个观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; observers.size(); i++) &#123;</span><br><span class="line">            Observer observer = (Observer) observers.get(i);</span><br><span class="line">            observer.update(temperature, humidity, pressure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measurementsChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurements</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        measurementsChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>显示当前天气的公告牌CurrentConditionsDisplay</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前温度为：&quot;</span> + <span class="keyword">this</span>.temperature + <span class="string">&quot;℃&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前湿度为：&quot;</span> + <span class="keyword">this</span>.humidity);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前气压为：&quot;</span> + <span class="keyword">this</span>.pressure);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>只显示温度和湿度的公告牌</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Current</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前温度为：&quot;</span> + <span class="keyword">this</span>.temperature + <span class="string">&quot;℃&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前湿度为：&quot;</span> + <span class="keyword">this</span>.humidity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line">    weatherData.registerObserver(<span class="keyword">new</span> CurrentConditionsDisplay());</span><br><span class="line">    weatherData.registerObserver(<span class="keyword">new</span> Current());</span><br><span class="line">    weatherData.setMeasurements(<span class="number">80</span>, <span class="number">65</span>, <span class="number">30.4f</span>);</span><br><span class="line">    weatherData.setMeasurements(<span class="number">82</span>, <span class="number">70</span>, <span class="number">29.2f</span>);</span><br><span class="line">    weatherData.setMeasurements(<span class="number">78</span>, <span class="number">90</span>, <span class="number">29.2f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>附图：</strong></p>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/%E8%A7%82%E5%AF%9F%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FUML.png" alt="观察者设计模式UML"></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>解释器设计模式</title>
    <url>/2020/12/25/%E8%A7%A3%E9%87%8A%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="解释器设计模式-Interpreter-Pattern"><a href="#解释器设计模式-Interpreter-Pattern" class="headerlink" title="解释器设计模式(Interpreter Pattern)"></a>解释器设计模式(Interpreter Pattern)</h4><p><strong>描述：</strong> 解释器设计模式就是提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。</p>
<p><strong>核心思想：</strong> 对于一些固定语法构建一个解释 语法 的解释器</p>
<p><strong>使用场景：</strong></p>
<ul>
<li>可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。</li>
<li> 一些重复出现的问题可以用一种简单的语言来进行表达。 </li>
<li>一个简单语法需要解释的场景。</li>
</ul>
<p><strong>解释器设计模式的优点：</strong></p>
<ul>
<li>可扩展性比较好，灵活。 </li>
<li> 增加了新的解释表达式的方式。</li>
<li>易于实现简单文法。</li>
</ul>
<p><strong>解释器设计模式的缺点：</strong></p>
<ul>
<li>可利用场景比较少。 </li>
<li>对于复杂的文法比较难维护。 </li>
<li>解释器模式会引起类膨胀。 </li>
<li>解释器模式采用递归调用方法。</li>
</ul>
<p><strong>示例：</strong></p>
<ul>
<li>抽象出  表达式接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interpreter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>相加表达式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">AddInterpreter</span> <span class="keyword">implements</span> <span class="title">Interpreter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Interpreter firstExpression, secondExpression;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddInterpreter</span> <span class="params">(Interpreter firstExpression, Interpreter secondExpression)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstExpression = firstExpression;</span><br><span class="line">        <span class="keyword">this</span>.secondExpression = secondExpression;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstExpression.interpret() + <span class="keyword">this</span>.secondExpression.interpret();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;+&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>相乘表达式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiInterpreter</span> <span class="keyword">implements</span> <span class="title">Interpreter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Interpreter firstExpression, secondExpression;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MultiInterpreter</span><span class="params">(Interpreter firstExpression, Interpreter secondExpression)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstExpression = firstExpression;</span><br><span class="line">        <span class="keyword">this</span>.secondExpression = secondExpression;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstExpression.interpret() * <span class="keyword">this</span>.secondExpression.interpret();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;*&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>数值表达式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">NumberInterpreter</span> <span class="keyword">implements</span> <span class="title">Interpreter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumberInterpreter</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumberInterpreter</span><span class="params">(String number)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = Integer.parseInt(number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>格式化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpressionParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Interpreter&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">parse</span> <span class="params">(String expression)</span> </span>&#123;</span><br><span class="line">        String[] itemArray = expression.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String symbol : itemArray) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!OperatorUtil.isOperator(symbol)) &#123;</span><br><span class="line">                Interpreter numberExpression = <span class="keyword">new</span> NumberInterpreter(symbol);</span><br><span class="line">                stack.push(numberExpression);</span><br><span class="line">                System.out.println(String.format(<span class="string">&quot;入栈： %d&quot;</span>, numberExpression.interpret()));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//是运算符可以计算</span></span><br><span class="line">                Interpreter firstExpression = stack.pop();</span><br><span class="line">                Interpreter secondExpression = stack.pop();</span><br><span class="line">                System.out.println(String.format(<span class="string">&quot;出栈：%d 和 %d&quot;</span>, firstExpression.interpret(),</span><br><span class="line">                        secondExpression.interpret()));</span><br><span class="line">                Interpreter operator = OperatorUtil.getExpression(firstExpression, secondExpression, symbol);</span><br><span class="line">                System.out.println(String.format(<span class="string">&quot;应用运算符: %s&quot;</span>, operator));</span><br><span class="line">                <span class="keyword">int</span> result = operator.interpret();</span><br><span class="line">                NumberInterpreter numberInterpreter = <span class="keyword">new</span> NumberInterpreter(result);</span><br><span class="line">                stack.push(numberInterpreter);</span><br><span class="line">                System.out.println(String.format(<span class="string">&quot;阶段结果入栈: %d&quot;</span>, result));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop().interpret();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>工具类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lass OperatorUtil &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isOperator</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (symbol.equals(<span class="string">&quot;+&quot;</span>) || symbol.equals(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Interpreter <span class="title">getExpression</span><span class="params">(Interpreter first,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            Interpreter second,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            String symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (symbol) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> AddInterpreter(first, second);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> MultiInterpreter(first, second);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String input = <span class="string">&quot;6 100 11 + *&quot;</span>;</span><br><span class="line">        ExpressionParser parser = <span class="keyword">new</span> ExpressionParser();</span><br><span class="line">        <span class="keyword">int</span> result = parser.parse(input);</span><br><span class="line">        System.out.println(<span class="string">&quot;解释器运算结果：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>访问者设计模式</title>
    <url>/2021/01/07/%E8%AE%BF%E9%97%AE%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="访问者设计模式-Vistor-Pattern"><a href="#访问者设计模式-Vistor-Pattern" class="headerlink" title="访问者设计模式(Vistor Pattern)"></a>访问者设计模式(Vistor Pattern)</h4><p><strong>描述：</strong></p>
<p><strong>核心思想：</strong></p>
<p><strong>使用场景：</strong></p>
<p><strong>访问者设计模式的优点：</strong></p>
<p><strong>访问者设计模式的缺点：</strong></p>
<p><strong>示例：</strong></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>责任链设计模式</title>
    <url>/2020/12/14/%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="责任链设计模式-Chain-of-Responsibility-Pattern"><a href="#责任链设计模式-Chain-of-Responsibility-Pattern" class="headerlink" title="责任链设计模式(Chain of Responsibility Pattern)"></a>责任链设计模式(Chain of Responsibility Pattern)</h4><p><strong>描述：</strong> 责任链设计模式属于行为型模式，在这种模式中通常每个接收者都包含对另一个接收者的调用。</p>
<p>从而形成链式调用</p>
<p><strong>核心思想：</strong> 避免请求发送者于接收者耦合在一起，让多个都有可能接收请求，将这些对象链接成一条链，并且沿着这条链传递请求。直到对象处理完为止。</p>
<p><strong>使用场景：</strong> </p>
<ul>
<li>有多个对象可以处理同一个请求，具体那个对象处理改请求由运行时决定</li>
<li>在不明确指定接收者的情况下，向多个对象中的一个对象提交一个请求</li>
<li>可动态的指定一组对象处理请求</li>
</ul>
<p><strong>责任链设计模式的优点：</strong></p>
<ul>
<li>降低耦合度。它将请求的发送者和接收者解耦。 </li>
<li>简化了对象。使得对象不需要知道链的结构。 </li>
<li>增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 </li>
<li>增加新的请求处理类很方便。</li>
</ul>
<p><strong>责任链设计模式的缺点：</strong></p>
<ul>
<li>不能保证请求一定被接收。</li>
<li>系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 </li>
<li>可能不容易观察运行时的特征，有碍于除错。</li>
</ul>
<p><strong>示例：</strong></p>
<p><strong>现在有需求有一个字符串需要对它进行处理， 替换敏感字符， 特殊符号进行特殊的处理</strong></p>
<ul>
<li>定义一个字符串</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Msg</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String msg;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Msg&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;msg=&#x27;&quot;</span> + msg + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>字符串处理的抽象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Msg m)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>做一个链式调用的类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterChain</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">    List&lt;Filter&gt; filters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterChain <span class="title">add</span><span class="params">(Filter f)</span></span>&#123;</span><br><span class="line">        filters.add(f);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doFilter</span><span class="params">(Msg m)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Filter f : filters)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!f.doFilter(m)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>特殊符号进行特殊的处理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTMLFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doFilter</span><span class="params">(Msg m)</span> </span>&#123;</span><br><span class="line">        String r = m.getMsg();</span><br><span class="line">        <span class="keyword">if</span>(r == <span class="keyword">null</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        r = r.replace(<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">        r = r.replace(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">        m.setMsg(r);</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>敏感字符进行处理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SensitiveFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doFilter</span><span class="params">(Msg msg)</span> </span>&#123;</span><br><span class="line">        String r = msg.getMsg();</span><br><span class="line">        <span class="keyword">if</span>(r == <span class="keyword">null</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理msg，对敏感词进行替换</span></span><br><span class="line">        r = r.replaceAll(<span class="string">&quot;996&quot;</span>,<span class="string">&quot;955&quot;</span>);</span><br><span class="line">        msg.setMsg(r);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Msg msg = <span class="keyword">new</span> Msg();</span><br><span class="line">        msg.setMsg(<span class="string">&quot;大家好,&lt;我是智翁&gt;,欢迎访问 www.yaozw.top,大家都是996&quot;</span>);</span><br><span class="line">        FilterChain filterChain = <span class="keyword">new</span> FilterChain();</span><br><span class="line">        filterChain.add(<span class="keyword">new</span> HTMLFilter()).add(<span class="keyword">new</span> SensitiveFilter());</span><br><span class="line">        <span class="keyword">boolean</span> ss = filterChain.doFilter(msg);</span><br><span class="line">        System.out.println(msg.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<p><strong>封装需要进行变化的地方，在现在的实例中，我们需要封装的是字符串的处理逻辑。我们可以将这个逻辑抽象出来，并对其进行封装。</strong></p>
<p><strong>附图：</strong></p>
<p><img src="https://yaozhiwen-1304431220.cos.ap-beijing.myqcloud.com/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images/%E8%B4%A3%E4%BB%BB%E9%93%BEUML.png" alt="责任链设计模式"></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器设计模式</title>
    <url>/2020/12/23/%E8%BF%AD%E4%BB%A3%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="迭代器设计模式-Iterator-Pattern"><a href="#迭代器设计模式-Iterator-Pattern" class="headerlink" title="迭代器设计模式(Iterator Pattern)"></a>迭代器设计模式(Iterator Pattern)</h4><p><strong>描述：</strong> 提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。</p>
<p><strong>核心思想：</strong> 使用不同的方式来遍历整个整合对象。 </p>
<p><strong>使用场景：</strong></p>
<ul>
<li>访问聚合对象的内容而无需暴露他的内部表示</li>
<li>需要为聚合对象提供多种访问方式</li>
<li>为便利不同的聚合结构提供一个统一的接口</li>
</ul>
<p><strong>迭代器设计模式的优点：</strong></p>
<ul>
<li>支持一不同的方式遍历一个聚合对象</li>
<li>迭代器简化了聚合类</li>
<li>在同一个聚合上可以有多个遍历</li>
<li>在迭代器设计模式中怎加新的聚合类和迭代类都很方便，无需修改源代码 , 符合开闭原则</li>
</ul>
<p><strong>迭代器设计模式的缺点：</strong></p>
<ul>
<li>由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</li>
</ul>
<p><strong>示例：</strong></p>
<ul>
<li>定义迭代器接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">E  <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现迭代器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    E[] e;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyIterator</span><span class="params">(E[] e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.e = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; e.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.hasNext())&#123;</span><br><span class="line">            <span class="keyword">return</span> e[index++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] str = &#123;<span class="string">&quot;nn&quot;</span>, <span class="string">&quot;jj&quot;</span>, <span class="string">&quot;PP&quot;</span>&#125;;</span><br><span class="line">        MyIterator nameRepository = <span class="keyword">new</span> MyIterator(str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (nameRepository.hasNext()) &#123;</span><br><span class="line">            System.out.println(nameRepository.next());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>适配器设计模式</title>
    <url>/2020/12/19/%E9%80%82%E9%85%8D%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="适配器设计模式-adapter-pattern"><a href="#适配器设计模式-adapter-pattern" class="headerlink" title="适配器设计模式(adapter pattern)"></a>适配器设计模式(adapter pattern)</h4><p><strong>描述：</strong> 适配器设计模式主要用于接口的转化或者将接口不兼容的类对象组合在一起形成对外统一的接口，是一种结构性模式其本质是一种中间件，适用于类和对象。</p>
<p><strong>核心思想：</strong> 对现有的接口进行转化以符合新的需求</p>
<p><strong>使用场景：</strong> </p>
<ul>
<li>想用一个已经存在的类，但其接口不符合需求；</li>
<li>想创建一个可以复用的类，该类可以与其他不相关的类协同工作；</li>
<li>想使用一些已经存在的子类，但是不能对每一个都进行子类化以匹配它们的接口（仅适用于对象Adapter）。对象适配器可以适配他的父类接口。</li>
</ul>
<p><strong>适配器设计模式的优点：</strong> </p>
<ul>
<li>提高了类的复用；</li>
<li>组合若干关联对象形成对外提供统一服务的接口；</li>
<li>扩展性、灵活性好。</li>
</ul>
<p><strong>适配器设计模式的缺点：</strong></p>
<ul>
<li>过多使用适配模式容易造成代码功能和逻辑意义的混淆。</li>
<li>部分语言对继承的限制，可能至多只能适配一个适配者类，而且目标类必须是抽象类。</li>
</ul>
<p><strong>适配器设计模式的分类：</strong></p>
<ul>
<li>类适配器</li>
<li>对象适配器</li>
<li>接口适配器</li>
</ul>
<p><strong>示例：</strong></p>
<h5 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h5><ul>
<li> 定义目标接口类：Target</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li> 被适配的类：Adaptee</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">adapteeRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;adapteeRequest method of Adaptee! &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>适配类Adapter，实现Target的接口request，同时继承Adaptee的实现adapteeRequest</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">super</span>.adapteeRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">        Target target = <span class="keyword">new</span> Adapter();</span><br><span class="line">        target.request(); <span class="comment">// result: adapteeRequest method of Adaptee! </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h5><ul>
<li>对象适配器和类适配器的主要区别就是<strong>类适配器的适配器类是继承被适配的类，对象适配器的适配器类是依赖被适配的类</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适配器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Adaptee adaptee;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(Adaptee adaptee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adaptee = adaptee;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        adaptee.operation1();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;operation2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Adaptee adaptee = <span class="keyword">new</span> Adaptee();</span><br><span class="line">        Adapter adapter = <span class="keyword">new</span> Adapter(adaptee);</span><br><span class="line">        Client client = <span class="keyword">new</span> Client();</span><br><span class="line">        client.use(adapter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">(Target target)</span></span>&#123;</span><br><span class="line">        target.operation1();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="接口适配器"><a href="#接口适配器" class="headerlink" title="接口适配器"></a>接口适配器</h5><ul>
<li><p><strong>核心思路：</strong>当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可<strong>有选择地</strong>覆盖父类的某些方法来实现需求</p>
</li>
<li><p><strong>使用场景：</strong> 适用于一个接口不想使用其所有的方法的情况。</p>
</li>
<li><p> 定义目标接口类：Target</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interface4</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>定义一个适配的中间抽象类 默认实现目标接口 以便它的子类有选择的实现</li>
</ul>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsAdapter</span> <span class="keyword">implements</span> <span class="title">Interface4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//默认实现</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		AbsAdapter absAdapter = <span class="keyword">new</span> AbsAdapter() &#123;</span><br><span class="line">			<span class="comment">//只需要去覆盖我们 有需要地使用 接口方法</span></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">				System.out.println(<span class="string">&quot;使用了m1的方法&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		</span><br><span class="line">		absAdapter.m1();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>23种设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象的七大设计原则</title>
    <url>/2020/12/07/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%83%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h3 id="七大设计原则"><a href="#七大设计原则" class="headerlink" title="七大设计原则"></a>七大设计原则</h3><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">英文名称</th>
<th align="center">简称</th>
</tr>
</thead>
<tbody><tr>
<td align="center">单一职责原则</td>
<td align="center">Single Responsibility Principle</td>
<td align="center">SRP</td>
</tr>
<tr>
<td align="center">里氏替换原则</td>
<td align="center">Liskov Substitution Principle</td>
<td align="center">LSP</td>
</tr>
<tr>
<td align="center">依赖倒置原则</td>
<td align="center">Dependence Inversion Principle</td>
<td align="center">DIP</td>
</tr>
<tr>
<td align="center">开闭原则</td>
<td align="center">OPen Closed Priciple</td>
<td align="center">OCP</td>
</tr>
<tr>
<td align="center">接口隔离原则</td>
<td align="center">Interface Segregation Principle</td>
<td align="center">ISP</td>
</tr>
<tr>
<td align="center">迪米特法则</td>
<td align="center">Law of Demete</td>
<td align="center">LOD</td>
</tr>
<tr>
<td align="center">组合/聚合复用原则</td>
<td align="center">Composite/Aggregate Reuse Principle</td>
<td align="center">CRP</td>
</tr>
</tbody></table>
<h4 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1. 单一职责原则"></a>1. 单一职责原则</h4><p>​    <strong>描述：</strong> 一个方法只干一件事，一个类只干一件事，甚至一个模块专注于一件事。</p>
<p>​    <strong>特点：</strong> 一个类 一个方法被修改的机率很大，如果一个方法或者类中有好几个功能相互关联，修改一个功能会带来其他功能的变动， 因此在实现的过程中一个类或者一个方法因该只专注于做好一件事情，降低功能之间的关联。<strong>（高内聚，低耦合）</strong></p>
<h4 id="2-里氏替换原则"><a href="#2-里氏替换原则" class="headerlink" title="2.里氏替换原则"></a>2.里氏替换原则</h4><p>​    <strong>描述：</strong> 任何父类出现的地方都可以透明的替换为子类。</p>
<p>​    <strong>特点：</strong> 在继承的过程中子类可以扩展其特有的方法属性，但尽量不要重写父类的方法，继承给程序的设计带来了变利，但也带来的弊端，降低了类的可移值性，增加了对象间的耦合性，如果一个类被另外的一个类继承，那么此时修改父类必然要考虑到所有的子类会出现的故障。因此在使用继承的过程中必遵守里氏替换原则。<strong>（用来检验继承的正确性，约束继承在使用上的泛滥）</strong></p>
<h4 id="3-依赖倒置原则"><a href="#3-依赖倒置原则" class="headerlink" title="3. 依赖倒置原则"></a>3. 依赖倒置原则</h4><p>​     <strong>描述：</strong> 依赖于抽象， 抽象不能依赖于细节，细节应该依赖于抽象 ，高层模块不能依赖低层模块，二者都应该依赖抽象。</p>
<p>​     <strong>特点：</strong> 主要是针对接口编程， 而不是针对实现编程。通过抽象来搭建框架， 建立类和类之间的联系，<strong>减少类之间的耦合性，提高框架的扩展性，同时以便于框架的维护性</strong></p>
<h4 id="4-开闭原则"><a href="#4-开闭原则" class="headerlink" title="4. 开闭原则"></a>4. 开闭原则</h4><p>​      <strong>描述：</strong> 对于扩展开放， 修改关闭</p>
<p>​      <strong>特点：</strong> 当需要一个新功能的时候我们应改首先想到的是 在这个旧的功能上扩展一个新的功能出来，而不是修改原有的旧功，如果修改原有的旧功能这样做的风险很大，可能会导致系统的瘫痪。<strong>增强了程序的扩展性，同时也降低了程序的维护性</strong></p>
<h4 id="5-接口隔离原则"><a href="#5-接口隔离原则" class="headerlink" title="5. 接口隔离原则"></a>5. 接口隔离原则</h4><p>​        <strong>描述：</strong> 客户端的接口是分散的多个接口，而不是一个总的接口</p>
<p>​        **特点:  **  实现类不应该依赖于它不需要的接口，不要建立一个庞大且臃肿的接口，接口该改按照不同的功能或者业务尽可能的建立多个接口。注意也不能太过于的细化，这样会使设计复杂化。好处就是  <strong>避免一个接口中出现不同职责的方法，符合高内聚，低耦合的思想。</strong></p>
<h4 id="6-迪米特法则"><a href="#6-迪米特法则" class="headerlink" title="6.  迪米特法则"></a>6.  迪米特法则</h4><p>​         <strong>描述：</strong> 一个对象尽可能的少接触其他的对象，只和需要接触的对象进行接触</p>
<p>​         <strong>特点：</strong>  使用迪米特法则可以使类与类 之间的耦合降低，减少类与类之间的关联程度，让类与类之间的协作更加直接，提高了类的复用性。</p>
<h4 id="7-组合-聚合复用原则"><a href="#7-组合-聚合复用原则" class="headerlink" title="7.   组合/聚合复用原则"></a>7.   组合/聚合复用原则</h4><p>​          <strong>描述：</strong> 组合或者聚合优于继承</p>
<p>​         <strong>特点：</strong> 在类的构建过程中优先考虑组合或者聚合，继承的时候父类暴露给子类的信息太多，或导致如果需要修改父类，必然要考虑到子类，这也可以提高类的复用性。</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>七大设计原则</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql锁机制</title>
    <url>/2020/11/24/mysql%E9%94%81%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h3 id="1、MySQL锁的基本介绍"><a href="#1、MySQL锁的基本介绍" class="headerlink" title="1、MySQL锁的基本介绍"></a>1、MySQL锁的基本介绍</h3><p>​        <strong>锁是计算机协调多个进程或线程并发访问某一资源的机制。</strong>在数据库中，除传统的 计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一 个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p>
<p>​        相对其他数据库而言，MySQL的锁机制比较简单，其最 显著的特点是不同的<strong>存储引擎</strong>支持不同的锁机制。比如，MyISAM和MEMORY存储引擎采用的是表级锁（table-level locking）；InnoDB存储引擎既支持行级锁（row-level locking），也支持表级锁，但默认情况下是采用行级锁。 </p>
<p>​        <strong>表级锁：</strong>开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。<br>​        <strong>行级锁：</strong>开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。  </p>
<p>​        从上述特点可见，很难笼统地说哪种锁更好，只能就具体应用的特点来说哪种锁更合适！仅从锁的角度 来说：表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有 并发查询的应用，如一些在线事务处理（OLTP）系统。 </p>
<h3 id="2、MyISAM表锁"><a href="#2、MyISAM表锁" class="headerlink" title="2、MyISAM表锁"></a>2、MyISAM表锁</h3><p>MySQL的表级锁有两种模式：<strong>表共享读锁（Table Read Lock）</strong>和<strong>表独占写锁（Table Write Lock）</strong>。  </p>
<p>对MyISAM表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求；对 MyISAM表的写操作，则会阻塞其他用户对同一表的读和写操作；MyISAM表的读操作与写操作之间，以及写操作之间是串行的！ </p>
<p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`mylock`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`NAME`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=MyISAM <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`mylock`</span> (<span class="string">`id`</span>, <span class="string">`NAME`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`mylock`</span> (<span class="string">`id`</span>, <span class="string">`NAME`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`mylock`</span> (<span class="string">`id`</span>, <span class="string">`NAME`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`mylock`</span> (<span class="string">`id`</span>, <span class="string">`NAME`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;d&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>MyISAM写锁阻塞读的案例：</strong></p>
<p>​        当一个线程获得对一个表的写锁之后，只有持有锁的线程可以对表进行更新操作。其他线程的读写操作都会等待，直到锁释放为止。</p>
<table>
<thead>
<tr>
<th>session1</th>
<th align="center">session2</th>
</tr>
</thead>
<tbody><tr>
<td>获取表的write锁定<br />lock table mylock write;</td>
<td align="center"></td>
</tr>
<tr>
<td>当前session对表的查询，插入，更新操作都可以执行<br />select * from mylock;<br />insert into mylock values(5,’e’);</td>
<td align="center">当前session对表的查询会被阻塞<br />select * from mylock；</td>
</tr>
<tr>
<td>释放锁：<br />unlock tables；</td>
<td align="center">当前session能够立刻执行，并返回对应结果</td>
</tr>
</tbody></table>
<p><strong>MyISAM读阻塞写的案例：</strong></p>
<p>​        一个session使用lock table给表加读锁，这个session可以锁定表中的记录，但更新和访问其他表都会提示错误，同时，另一个session可以查询表中的记录，但更新就会出现锁等待。</p>
<table>
<thead>
<tr>
<th align="center">session1</th>
<th align="center">session2</th>
</tr>
</thead>
<tbody><tr>
<td align="center">获得表的read锁定<br />lock table mylock read;</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">当前session可以查询该表记录：<br />select * from mylock;</td>
<td align="center">当前session可以查询该表记录：<br />select * from mylock;</td>
</tr>
<tr>
<td align="center">当前session不能查询没有锁定的表<br />select * from person<br />Table ‘person’ was not locked with LOCK TABLES</td>
<td align="center">当前session可以查询或者更新未锁定的表<br />select * from mylock<br />insert into person values(1,’zhangsan’);</td>
</tr>
<tr>
<td align="center">当前session插入或者更新表会提示错误<br />insert into mylock values(6,’f’)<br />Table ‘mylock’ was locked with a READ lock and can’t be updated<br />update mylock set name=’aa’ where id = 1;<br />Table ‘mylock’ was locked with a READ lock and can’t be updated</td>
<td align="center">当前session插入数据会等待获得锁<br />insert into mylock values(6,’f’);</td>
</tr>
<tr>
<td align="center">释放锁<br />unlock tables;</td>
<td align="center">获得锁，更新成功</td>
</tr>
</tbody></table>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p><strong>MyISAM在执行查询语句之前，会自动给涉及的所有表加读锁，在执行更新操作前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此用户一般不需要使用命令来显式加锁，上例中的加锁时为了演示效果。</strong></p>
<p><strong>MyISAM的并发插入问题</strong></p>
<p>MyISAM表的读和写是串行的，这是就总体而言的，在一定条件下，MyISAM也支持查询和插入操作的并发执行</p>
<table>
<thead>
<tr>
<th align="center">session1</th>
<th align="center">session2</th>
</tr>
</thead>
<tbody><tr>
<td align="center">获取表的read local锁定<br />lock table mylock read local</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">当前session不能对表进行更新或者插入操作<br />insert into mylock values(6,’f’)<br />Table ‘mylock’ was locked with a READ lock and can’t be updated<br />update mylock set name=’aa’ where id = 1;<br />Table ‘mylock’ was locked with a READ lock and can’t be updated</td>
<td align="center">其他session可以查询该表的记录<br />select* from mylock</td>
</tr>
<tr>
<td align="center">当前session不能查询没有锁定的表<br />select * from person<br />Table ‘person’ was not locked with LOCK TABLES</td>
<td align="center">其他session可以进行插入操作，但是更新会阻塞<br />update mylock set name = ‘aa’ where id = 1;</td>
</tr>
<tr>
<td align="center">当前session不能访问其他session插入的记录；</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">释放锁资源：unlock tables</td>
<td align="center">当前session获取锁，更新操作完成</td>
</tr>
<tr>
<td align="center">当前session可以查看其他session插入的记录</td>
<td align="center"></td>
</tr>
</tbody></table>
<p> 可以通过检查table_locks_waited和table_locks_immediate状态变量来分析系统上的表锁定争夺： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show status like &#x27;table%&#x27;;</span><br><span class="line">+<span class="comment">-----------------------+-------+</span></span><br><span class="line">| Variable_name         | Value |</span><br><span class="line">+<span class="comment">-----------------------+-------+</span></span><br><span class="line">| Table_locks_immediate | 352   |</span><br><span class="line">| Table_locks_waited    | 2     |</span><br><span class="line">+<span class="comment">-----------------------+-------+</span></span><br><span class="line"><span class="comment">--如果Table_locks_waited的值比较高，则说明存在着较严重的表级锁争用情况。</span></span><br></pre></td></tr></table></figure>

<p><strong>InnoDB锁</strong></p>
<p><strong>1、事务及其ACID属性</strong></p>
<p>事务是由一组SQL语句组成的逻辑处理单元，事务具有4属性，通常称为事务的ACID属性。</p>
<p>原子性（Actomicity）：事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。<br>一致性（Consistent）：在事务开始和完成时，数据都必须保持一致状态。<br>隔离性（Isolation）：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行。<br>持久性（Durable）：事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。</p>
<p><strong>2、并发事务带来的问题</strong></p>
<p>相对于串行处理来说，并发事务处理能大大增加数据库资源的利用率，提高数据库系统的事务吞吐量，从而可以支持更多用户的并发操作，但与此同时，会带来一下问题：</p>
<p><strong>脏读</strong>： 一个事务正在对一条记录做修改，在这个事务并提交前，这条记录的数据就处于不一致状态；这时，另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些“脏”的数据，并据此做进一步的处理，就会产生未提交的数据依赖关系。这种现象被形象地叫做“脏读” </p>
<p><strong>不可重复读</strong>：一个事务在读取某些数据已经发生了改变、或某些记录已经被删除了！这种现象叫做“不可重复读”。 </p>
<p><strong>幻读</strong>： 一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读” </p>
<p>上述出现的问题都是数据库读一致性的问题，可以通过事务的隔离机制来进行保证。</p>
<p>数据库的事务隔离越严格，并发副作用就越小，但付出的代价也就越大，因为事务隔离本质上就是使事务在一定程度上串行化，需要根据具体的业务需求来决定使用哪种隔离级别</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">脏读</th>
<th align="center">不可重复读</th>
<th align="center">幻读</th>
</tr>
</thead>
<tbody><tr>
<td align="center">read uncommitted</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">read committed</td>
<td align="center"></td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">repeatable read</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">serializable</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p> 可以通过检查InnoDB_row_lock状态变量来分析系统上的行锁的争夺情况： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show status like &#x27;innodb_row_lock%&#x27;;</span><br><span class="line">+<span class="comment">-------------------------------+-------+</span></span><br><span class="line">| Variable_name                 | Value |</span><br><span class="line">+<span class="comment">-------------------------------+-------+</span></span><br><span class="line">| Innodb_row_lock_current_waits | 0     |</span><br><span class="line">| Innodb_row_lock_time          | 18702 |</span><br><span class="line">| Innodb_row_lock_time_avg      | 18702 |</span><br><span class="line">| Innodb_row_lock_time_max      | 18702 |</span><br><span class="line">| Innodb_row_lock_waits         | 1     |</span><br><span class="line">+<span class="comment">-------------------------------+-------+</span></span><br><span class="line"><span class="comment">--如果发现锁争用比较严重，如InnoDB_row_lock_waits和InnoDB_row_lock_time_avg的值比较高</span></span><br></pre></td></tr></table></figure>

<p><strong>3、InnoDB的行锁模式及加锁方法</strong></p>
<p>​        <strong>共享锁（s）</strong>：又称读锁。允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。这保证了其他事务可以读A，但在T释放A上的S锁之前不能对A做任何修改。<br>​        <strong>排他锁（x）</strong>：又称写锁。允许获取排他锁的事务更新数据，阻止其他事务取得相同的数据集共享读锁和排他写锁。若事务T对数据对象A加上X锁，事务T可以读A也可以修改A，其他事务不能再对A加任何锁，直到T释放A上的锁。</p>
<p>​        mysql InnoDB引擎默认的修改数据语句：<strong>update,delete,insert都会自动给涉及到的数据加上排他锁，select语句默认不会加任何锁类型</strong>，如果加排他锁可以使用select …for update语句，加共享锁可以使用select … lock in share mode语句。<strong>所以加过排他锁的数据行在其他事务种是不能修改数据的，也不能通过for update和lock in share mode锁的方式查询数据，但可以直接通过select …from…查询数据，因为普通查询没有任何锁机制。</strong> </p>
<p><strong>InnoDB行锁实现方式</strong></p>
<p>​        InnoDB行锁是通过给<strong>索引</strong>上的索引项加锁来实现的，这一点MySQL与Oracle不同，后者是通过在数据块中对相应数据行加锁来实现的。InnoDB这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB才使用行级锁，<strong>否则，InnoDB将使用表锁！</strong>  </p>
<p>1、在不通过索引条件查询的时候，innodb使用的是表锁而不是行锁</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_no_index(<span class="keyword">id</span> <span class="built_in">int</span>,<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>)) <span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tab_no_index <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;2&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;3&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;4&#x27;</span>);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">session1</th>
<th align="center">session2</th>
</tr>
</thead>
<tbody><tr>
<td align="center">set autocommit=0<br />select * from tab_no_index where id = 1;</td>
<td align="center">set autocommit=0<br />select * from tab_no_index where id =2</td>
</tr>
<tr>
<td align="center">select * from tab_no_index where id = 1 for update</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">select * from tab_no_index where id = 2 for update;</td>
</tr>
</tbody></table>
<p>session1只给一行加了排他锁，但是session2在请求其他行的排他锁的时候，会出现锁等待。原因是在没有索引的情况下，innodb只能使用表锁。</p>
<p>2、创建带索引的表进行条件查询，innodb使用的是行锁</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_with_index(<span class="keyword">id</span> <span class="built_in">int</span>,<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>)) <span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tab_with_index <span class="keyword">add</span> <span class="keyword">index</span> <span class="keyword">id</span>(<span class="keyword">id</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tab_with_index <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;2&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;3&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;4&#x27;</span>);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">session1</th>
<th align="center">session2</th>
</tr>
</thead>
<tbody><tr>
<td align="center">set autocommit=0<br />select * from tab_with_indexwhere id = 1;</td>
<td align="center">set autocommit=0<br />select * from tab_with_indexwhere id =2</td>
</tr>
<tr>
<td align="center">select * from tab_with_indexwhere id = 1 for update</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">select * from tab_with_indexwhere id = 2 for update;</td>
</tr>
</tbody></table>
<p>3、由于mysql的行锁是针对索引加的锁，不是针对记录加的锁，所以虽然是访问不同行的记录，但是如果是使用相同的索引键，是会出现冲突的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tab_with_index <span class="keyword">drop</span> <span class="keyword">index</span> <span class="keyword">id</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tab_with_index  <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;4&#x27;</span>);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">session1</th>
<th align="center">session2</th>
</tr>
</thead>
<tbody><tr>
<td align="center">set autocommit=0</td>
<td align="center">set autocommit=0</td>
</tr>
<tr>
<td align="center">select * from tab_with_index where id = 1 and name=’1’ for update</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">select * from tab_with_index where id = 1 and name=’4’ for update<br />虽然session2访问的是和session1不同的记录，但是因为使用了相同的索引，所以需要等待锁</td>
</tr>
</tbody></table>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>对于MyISAM的表锁，主要讨论了以下几点：</strong><br>（1）共享读锁（S）之间是兼容的，但共享读锁（S）与排他写锁（X）之间，以及排他写锁（X）之间是互斥的，也就是说读和写是串行的。<br>（2）在一定条件下，MyISAM允许查询和插入并发执行，我们可以利用这一点来解决应用中对同一表查询和插入的锁争用问题。<br>（3）MyISAM默认的锁调度机制是写优先，这并不一定适合所有应用，用户可以通过设置LOW_PRIORITY_UPDATES参数，或在INSERT、UPDATE、DELETE语句中指定LOW_PRIORITY选项来调节读写锁的争用。<br>（4）由于表锁的锁定粒度大，读写之间又是串行的，因此，如果更新操作较多，MyISAM表可能会出现严重的锁等待，可以考虑采用InnoDB表来减少锁冲突。</p>
<p><strong>对于InnoDB表，本文主要讨论了以下几项内容：</strong><br>（1）InnoDB的行锁是基于索引实现的，如果不通过索引访问数据，InnoDB会使用表锁。<br>（2）在不同的隔离级别下，InnoDB的锁机制和一致性读策略不同。</p>
<p>在了解InnoDB锁特性后，用户可以通过设计和SQL调整等措施减少锁冲突和死锁，包括：</p>
<ul>
<li>尽量使用较低的隔离级别； 精心设计索引，并尽量使用索引访问数据，使加锁更精确，从而减少锁冲突的机会；</li>
<li>选择合理的事务大小，小事务发生锁冲突的几率也更小；</li>
<li>给记录集显式加锁时，最好一次性请求足够级别的锁。比如要修改数据的话，最好直接申请排他锁，而不是先申请共享锁，修改时再请求排他锁，这样容易产生死锁；</li>
<li>不同的程序访问一组表时，应尽量约定以相同的顺序访问各表，对一个表而言，尽可能以固定的顺序存取表中的行。这样可以大大减少死锁的机会；</li>
<li>尽量用相等条件访问数据，这样可以避免间隙锁对并发插入的影响； 不要申请超过实际需要的锁级别；除非必须，查询时不要显示加锁；</li>
<li>对于一些特定的事务，可以使用表锁来提高处理速度或减少死锁的可能。</li>
</ul>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>随笔记录</tag>
      </tags>
  </entry>
</search>
